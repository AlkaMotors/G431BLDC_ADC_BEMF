
G431ADCversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c3c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e24  08007e24  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08007e24  08007e24  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e24  08007e24  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e24  08007e24  00017e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08007e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  2000003c  08007e68  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08007e68  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d41  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000241a  00000000  00000000  00032dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  000351c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c8  00000000  00000000  000364a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ff46  00000000  00000000  00037670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d273  00000000  00000000  000575b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db8ad  00000000  00000000  00064829  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001400d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005034  00000000  00000000  00140154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000003c 	.word	0x2000003c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007dfc 	.word	0x08007dfc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000040 	.word	0x20000040
 8000214:	08007dfc 	.word	0x08007dfc

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 fec8 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f007 faf7 	bl	800782c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 fed4 	bl	800201e <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 fea0 	bl	8001fce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000038 	.word	0x20000038
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	200000b8 	.word	0x200000b8
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200000b8 	.word	0x200000b8

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3360      	adds	r3, #96	; 0x60
 80003b6:	461a      	mov	r2, r3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_ADC_SetOffset+0x40>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc90      	pop	{r4, r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	03fff000 	.word	0x03fff000

080003e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3360      	adds	r3, #96	; 0x60
 80003f6:	461a      	mov	r2, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000400:	6823      	ldr	r3, [r4, #0]
 8000402:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bc90      	pop	{r4, r7}
 800040e:	4770      	bx	lr

08000410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000410:	b490      	push	{r4, r7}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3360      	adds	r3, #96	; 0x60
 8000420:	461a      	mov	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bc90      	pop	{r4, r7}
 800043e:	4770      	bx	lr

08000440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3360      	adds	r3, #96	; 0x60
 8000450:	461a      	mov	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bc90      	pop	{r4, r7}
 800046e:	4770      	bx	lr

08000470 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3360      	adds	r3, #96	; 0x60
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bc90      	pop	{r4, r7}
 800049e:	4770      	bx	lr

080004a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d101      	bne.n	80004de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80004da:	2301      	movs	r3, #1
 80004dc:	e000      	b.n	80004e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004ec:	b490      	push	{r4, r7}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3330      	adds	r3, #48	; 0x30
 80004fc:	461a      	mov	r2, r3
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	f003 030c 	and.w	r3, r3, #12
 8000508:	4413      	add	r3, r2
 800050a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800050c:	6822      	ldr	r2, [r4, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	f003 031f 	and.w	r3, r3, #31
 8000514:	211f      	movs	r1, #31
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	43db      	mvns	r3, r3
 800051c:	401a      	ands	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0e9b      	lsrs	r3, r3, #26
 8000522:	f003 011f 	and.w	r1, r3, #31
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	f003 031f 	and.w	r3, r3, #31
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	4313      	orrs	r3, r2
 8000532:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bc90      	pop	{r4, r7}
 800053c:	4770      	bx	lr

0800053e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800054e:	2b00      	cmp	r3, #0
 8000550:	d101      	bne.n	8000556 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000552:	2301      	movs	r3, #1
 8000554:	e000      	b.n	8000558 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000564:	b490      	push	{r4, r7}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3314      	adds	r3, #20
 8000574:	461a      	mov	r2, r3
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	0e5b      	lsrs	r3, r3, #25
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	4413      	add	r3, r2
 8000582:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000584:	6822      	ldr	r2, [r4, #0]
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	0d1b      	lsrs	r3, r3, #20
 800058a:	f003 031f 	and.w	r3, r3, #31
 800058e:	2107      	movs	r1, #7
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	401a      	ands	r2, r3
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	0d1b      	lsrs	r3, r3, #20
 800059c:	f003 031f 	and.w	r3, r3, #31
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	4313      	orrs	r3, r2
 80005a8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc90      	pop	{r4, r7}
 80005b2:	4770      	bx	lr

080005b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005cc:	43db      	mvns	r3, r3
 80005ce:	401a      	ands	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0318 	and.w	r3, r3, #24
 80005d6:	4908      	ldr	r1, [pc, #32]	; (80005f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80005d8:	40d9      	lsrs	r1, r3
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	400b      	ands	r3, r1
 80005de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005e2:	431a      	orrs	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	0007ffff 	.word	0x0007ffff

080005fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f003 031f 	and.w	r3, r3, #31
}
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000644:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	6093      	str	r3, [r2, #8]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800066c:	d101      	bne.n	8000672 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000690:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000694:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006bc:	d101      	bne.n	80006c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80006be:	2301      	movs	r3, #1
 80006c0:	e000      	b.n	80006c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006e4:	f043 0201 	orr.w	r2, r3, #1
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000708:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800070c:	f043 0202 	orr.w	r2, r3, #2
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	2b01      	cmp	r3, #1
 8000732:	d101      	bne.n	8000738 <LL_ADC_IsEnabled+0x18>
 8000734:	2301      	movs	r3, #1
 8000736:	e000      	b.n	800073a <LL_ADC_IsEnabled+0x1a>
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	2b02      	cmp	r3, #2
 8000758:	d101      	bne.n	800075e <LL_ADC_IsDisableOngoing+0x18>
 800075a:	2301      	movs	r3, #1
 800075c:	e000      	b.n	8000760 <LL_ADC_IsDisableOngoing+0x1a>
 800075e:	2300      	movs	r3, #0
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800077c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000780:	f043 0204 	orr.w	r2, r3, #4
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80007a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007a8:	f043 0210 	orr.w	r2, r3, #16
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d101      	bne.n	80007d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80007d0:	2301      	movs	r3, #1
 80007d2:	e000      	b.n	80007d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80007f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007f6:	f043 0220 	orr.w	r2, r3, #32
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	2b08      	cmp	r3, #8
 800081c:	d101      	bne.n	8000822 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800081e:	2301      	movs	r3, #1
 8000820:	e000      	b.n	8000824 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b089      	sub	sp, #36	; 0x24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000838:	2300      	movs	r3, #0
 800083a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e16b      	b.n	8000b22 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000854:	2b00      	cmp	r3, #0
 8000856:	d109      	bne.n	800086c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f007 f80b 	bl	8007874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fef1 	bl	8000658 <LL_ADC_IsDeepPowerDownEnabled>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d004      	beq.n	8000886 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fed7 	bl	8000634 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff0c 	bl	80006a8 <LL_ADC_IsInternalRegulatorEnabled>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d113      	bne.n	80008be <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fef0 	bl	8000680 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80008a0:	4ba2      	ldr	r3, [pc, #648]	; (8000b2c <HAL_ADC_Init+0x2fc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	099b      	lsrs	r3, r3, #6
 80008a6:	4aa2      	ldr	r2, [pc, #648]	; (8000b30 <HAL_ADC_Init+0x300>)
 80008a8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ac:	099b      	lsrs	r3, r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80008b0:	e002      	b.n	80008b8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f9      	bne.n	80008b2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fef0 	bl	80006a8 <LL_ADC_IsInternalRegulatorEnabled>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d10d      	bne.n	80008ea <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008d2:	f043 0210 	orr.w	r2, r3, #16
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	f043 0201 	orr.w	r2, r3, #1
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff64 	bl	80007bc <LL_ADC_REG_IsConversionOngoing>
 80008f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008fa:	f003 0310 	and.w	r3, r3, #16
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 8106 	bne.w	8000b10 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8102 	bne.w	8000b10 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000910:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000914:	f043 0202 	orr.w	r2, r3, #2
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fefd 	bl	8000720 <LL_ADC_IsEnabled>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d111      	bne.n	8000950 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800092c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000930:	f7ff fef6 	bl	8000720 <LL_ADC_IsEnabled>
 8000934:	4604      	mov	r4, r0
 8000936:	487f      	ldr	r0, [pc, #508]	; (8000b34 <HAL_ADC_Init+0x304>)
 8000938:	f7ff fef2 	bl	8000720 <LL_ADC_IsEnabled>
 800093c:	4603      	mov	r3, r0
 800093e:	4323      	orrs	r3, r4
 8000940:	2b00      	cmp	r3, #0
 8000942:	d105      	bne.n	8000950 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4619      	mov	r1, r3
 800094a:	487b      	ldr	r0, [pc, #492]	; (8000b38 <HAL_ADC_Init+0x308>)
 800094c:	f7ff fcf6 	bl	800033c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7f5b      	ldrb	r3, [r3, #29]
 8000954:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800095a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000960:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000966:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800096e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000970:	4313      	orrs	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800097a:	2b01      	cmp	r3, #1
 800097c:	d106      	bne.n	800098c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000982:	3b01      	subs	r3, #1
 8000984:	045b      	lsls	r3, r3, #17
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4313      	orrs	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000990:	2b00      	cmp	r3, #0
 8000992:	d009      	beq.n	80009a8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000998:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	68da      	ldr	r2, [r3, #12]
 80009ae:	4b63      	ldr	r3, [pc, #396]	; (8000b3c <HAL_ADC_Init+0x30c>)
 80009b0:	4013      	ands	r3, r2
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	69b9      	ldr	r1, [r7, #24]
 80009b8:	430b      	orrs	r3, r1
 80009ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	691b      	ldr	r3, [r3, #16]
 80009c2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	430a      	orrs	r2, r1
 80009d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fef0 	bl	80007bc <LL_ADC_REG_IsConversionOngoing>
 80009dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff11 	bl	800080a <LL_ADC_INJ_IsConversionOngoing>
 80009e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d16d      	bne.n	8000acc <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d16a      	bne.n	8000acc <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80009fa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a02:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000a04:	4313      	orrs	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a12:	f023 0302 	bic.w	r3, r3, #2
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	6812      	ldr	r2, [r2, #0]
 8000a1a:	69b9      	ldr	r1, [r7, #24]
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d017      	beq.n	8000a58 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	691a      	ldr	r2, [r3, #16]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000a40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	6911      	ldr	r1, [r2, #16]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	6812      	ldr	r2, [r2, #0]
 8000a50:	430b      	orrs	r3, r1
 8000a52:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000a56:	e013      	b.n	8000a80 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	691a      	ldr	r2, [r3, #16]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	6812      	ldr	r2, [r2, #0]
 8000a74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d118      	bne.n	8000abc <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000a94:	f023 0304 	bic.w	r3, r3, #4
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000aa0:	4311      	orrs	r1, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000aa6:	4311      	orrs	r1, r2
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000aac:	430a      	orrs	r2, r1
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f042 0201 	orr.w	r2, r2, #1
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	e007      	b.n	8000acc <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	691a      	ldr	r2, [r3, #16]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f022 0201 	bic.w	r2, r2, #1
 8000aca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d10c      	bne.n	8000aee <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f023 010f 	bic.w	r1, r3, #15
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6a1b      	ldr	r3, [r3, #32]
 8000ae2:	1e5a      	subs	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	631a      	str	r2, [r3, #48]	; 0x30
 8000aec:	e007      	b.n	8000afe <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 020f 	bic.w	r2, r2, #15
 8000afc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b02:	f023 0303 	bic.w	r3, r3, #3
 8000b06:	f043 0201 	orr.w	r2, r3, #1
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8000b0e:	e007      	b.n	8000b20 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b14:	f043 0210 	orr.w	r2, r3, #16
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000038 	.word	0x20000038
 8000b30:	053e2d63 	.word	0x053e2d63
 8000b34:	50000100 	.word	0x50000100
 8000b38:	50000300 	.word	0x50000300
 8000b3c:	fff04007 	.word	0xfff04007

08000b40 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000b48:	4895      	ldr	r0, [pc, #596]	; (8000da0 <HAL_ADC_Start_IT+0x260>)
 8000b4a:	f7ff fd57 	bl	80005fc <LL_ADC_GetMultimode>
 8000b4e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fe31 	bl	80007bc <LL_ADC_REG_IsConversionOngoing>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f040 8115 	bne.w	8000d8c <HAL_ADC_Start_IT+0x24c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d101      	bne.n	8000b70 <HAL_ADC_Start_IT+0x30>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	e112      	b.n	8000d96 <HAL_ADC_Start_IT+0x256>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2201      	movs	r2, #1
 8000b74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f000 ffa3 	bl	8001ac4 <ADC_Enable>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b82:	7dfb      	ldrb	r3, [r7, #23]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f040 80fc 	bne.w	8000d82 <HAL_ADC_Start_IT+0x242>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b92:	f023 0301 	bic.w	r3, r3, #1
 8000b96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a80      	ldr	r2, [pc, #512]	; (8000da4 <HAL_ADC_Start_IT+0x264>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d002      	beq.n	8000bae <HAL_ADC_Start_IT+0x6e>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	e001      	b.n	8000bb2 <HAL_ADC_Start_IT+0x72>
 8000bae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d002      	beq.n	8000bc0 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d105      	bne.n	8000bcc <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bdc:	f023 0206 	bic.w	r2, r3, #6
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	661a      	str	r2, [r3, #96]	; 0x60
 8000be4:	e002      	b.n	8000bec <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	221c      	movs	r2, #28
 8000bf2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 021c 	bic.w	r2, r2, #28
 8000c0a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	d108      	bne.n	8000c26 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0208 	orr.w	r2, r2, #8
 8000c22:	605a      	str	r2, [r3, #4]
          break;
 8000c24:	e008      	b.n	8000c38 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f042 0204 	orr.w	r2, r2, #4
 8000c34:	605a      	str	r2, [r3, #4]
          break;
 8000c36:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d107      	bne.n	8000c50 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f042 0210 	orr.w	r2, r2, #16
 8000c4e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a53      	ldr	r2, [pc, #332]	; (8000da4 <HAL_ADC_Start_IT+0x264>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d002      	beq.n	8000c60 <HAL_ADC_Start_IT+0x120>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	e001      	b.n	8000c64 <HAL_ADC_Start_IT+0x124>
 8000c60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	6812      	ldr	r2, [r2, #0]
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d008      	beq.n	8000c7e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	2b05      	cmp	r3, #5
 8000c76:	d002      	beq.n	8000c7e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	2b09      	cmp	r3, #9
 8000c7c:	d13b      	bne.n	8000cf6 <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d02d      	beq.n	8000ce8 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d110      	bne.n	8000cc6 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0220 	bic.w	r2, r2, #32
 8000cb2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cc2:	605a      	str	r2, [r3, #4]
              break;
 8000cc4:	e011      	b.n	8000cea <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cd4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f042 0220 	orr.w	r2, r2, #32
 8000ce4:	605a      	str	r2, [r3, #4]
              break;
 8000ce6:	e000      	b.n	8000cea <HAL_ADC_Start_IT+0x1aa>
          }
        }
 8000ce8:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fd3c 	bl	800076c <LL_ADC_REG_StartConversion>
 8000cf4:	e04e      	b.n	8000d94 <HAL_ADC_Start_IT+0x254>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a27      	ldr	r2, [pc, #156]	; (8000da4 <HAL_ADC_Start_IT+0x264>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d002      	beq.n	8000d12 <HAL_ADC_Start_IT+0x1d2>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	e001      	b.n	8000d16 <HAL_ADC_Start_IT+0x1d6>
 8000d12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d16:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d036      	beq.n	8000d92 <HAL_ADC_Start_IT+0x252>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d110      	bne.n	8000d5e <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0220 	bic.w	r2, r2, #32
 8000d4a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d5a:	605a      	str	r2, [r3, #4]
              break;
 8000d5c:	e01a      	b.n	8000d94 <HAL_ADC_Start_IT+0x254>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d6c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f042 0220 	orr.w	r2, r2, #32
 8000d7c:	605a      	str	r2, [r3, #4]
              break;
 8000d7e:	bf00      	nop
 8000d80:	e008      	b.n	8000d94 <HAL_ADC_Start_IT+0x254>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000d8a:	e003      	b.n	8000d94 <HAL_ADC_Start_IT+0x254>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	75fb      	strb	r3, [r7, #23]
 8000d90:	e000      	b.n	8000d94 <HAL_ADC_Start_IT+0x254>
        }
 8000d92:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	50000300 	.word	0x50000300
 8000da4:	50000100 	.word	0x50000100

08000da8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <HAL_ADC_Stop_IT+0x16>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e02b      	b.n	8000e16 <HAL_ADC_Stop_IT+0x6e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 fdc7 	bl	800195c <ADC_ConversionStop>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d119      	bne.n	8000e0c <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 021c 	bic.w	r2, r2, #28
 8000de6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 fec5 	bl	8001b78 <ADC_Disable>
 8000dee:	4603      	mov	r3, r0
 8000df0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d109      	bne.n	8000e0c <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e00:	f023 0301 	bic.w	r3, r3, #1
 8000e04:	f043 0201 	orr.w	r2, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000e54:	4883      	ldr	r0, [pc, #524]	; (8001064 <HAL_ADC_IRQHandler+0x22c>)
 8000e56:	f7ff fbd1 	bl	80005fc <LL_ADC_GetMultimode>
 8000e5a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d017      	beq.n	8000e96 <HAL_ADC_IRQHandler+0x5e>
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d012      	beq.n	8000e96 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e74:	f003 0310 	and.w	r3, r3, #16
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d105      	bne.n	8000e88 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e80:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 ff1b 	bl	8001cc4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2202      	movs	r2, #2
 8000e94:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d004      	beq.n	8000eaa <HAL_ADC_IRQHandler+0x72>
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10a      	bne.n	8000ec0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 8085 	beq.w	8000fc0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d07f      	beq.n	8000fc0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d105      	bne.n	8000ed8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff faf2 	bl	80004c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d064      	beq.n	8000fb2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a5e      	ldr	r2, [pc, #376]	; (8001068 <HAL_ADC_IRQHandler+0x230>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d002      	beq.n	8000ef8 <HAL_ADC_IRQHandler+0xc0>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	e001      	b.n	8000efc <HAL_ADC_IRQHandler+0xc4>
 8000ef8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6812      	ldr	r2, [r2, #0]
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d008      	beq.n	8000f16 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	d002      	beq.n	8000f16 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	2b09      	cmp	r3, #9
 8000f14:	d104      	bne.n	8000f20 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	623b      	str	r3, [r7, #32]
 8000f1e:	e00d      	b.n	8000f3c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a50      	ldr	r2, [pc, #320]	; (8001068 <HAL_ADC_IRQHandler+0x230>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d002      	beq.n	8000f30 <HAL_ADC_IRQHandler+0xf8>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	e001      	b.n	8000f34 <HAL_ADC_IRQHandler+0xfc>
 8000f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f34:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d135      	bne.n	8000fb2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d12e      	bne.n	8000fb2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fc2f 	bl	80007bc <LL_ADC_REG_IsConversionOngoing>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d11a      	bne.n	8000f9a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 020c 	bic.w	r2, r2, #12
 8000f72:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d112      	bne.n	8000fb2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f98:	e00b      	b.n	8000fb2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9e:	f043 0210 	orr.w	r2, r3, #16
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	f043 0201 	orr.w	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f005 fd3e 	bl	8006a34 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0320 	and.w	r3, r3, #32
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <HAL_ADC_IRQHandler+0x19c>
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10b      	bne.n	8000fec <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 809e 	beq.w	800111c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8098 	beq.w	800111c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d105      	bne.n	8001004 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ffc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa98 	bl	800053e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800100e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa56 	bl	80004c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800101a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <HAL_ADC_IRQHandler+0x230>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d002      	beq.n	800102c <HAL_ADC_IRQHandler+0x1f4>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	e001      	b.n	8001030 <HAL_ADC_IRQHandler+0x1f8>
 800102c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	4293      	cmp	r3, r2
 8001036:	d008      	beq.n	800104a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d005      	beq.n	800104a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b06      	cmp	r3, #6
 8001042:	d002      	beq.n	800104a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2b07      	cmp	r3, #7
 8001048:	d104      	bne.n	8001054 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	e011      	b.n	8001078 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a03      	ldr	r2, [pc, #12]	; (8001068 <HAL_ADC_IRQHandler+0x230>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d006      	beq.n	800106c <HAL_ADC_IRQHandler+0x234>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	e005      	b.n	8001070 <HAL_ADC_IRQHandler+0x238>
 8001064:	50000300 	.word	0x50000300
 8001068:	50000100 	.word	0x50000100
 800106c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001070:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10c      	bne.n	8001098 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001084:	2b00      	cmp	r3, #0
 8001086:	d142      	bne.n	800110e <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d03f      	beq.n	800110e <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001094:	2b00      	cmp	r3, #0
 8001096:	d13a      	bne.n	800110e <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a2:	2b40      	cmp	r3, #64	; 0x40
 80010a4:	d133      	bne.n	800110e <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d12e      	bne.n	800110e <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fba8 	bl	800080a <LL_ADC_INJ_IsConversionOngoing>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d11a      	bne.n	80010f6 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80010ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d112      	bne.n	800110e <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ec:	f043 0201 	orr.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80010f4:	e00b      	b.n	800110e <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fa:	f043 0210 	orr.w	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fdb0 	bl	8001c74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2260      	movs	r2, #96	; 0x60
 800111a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001122:	2b00      	cmp	r3, #0
 8001124:	d011      	beq.n	800114a <HAL_ADC_IRQHandler+0x312>
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00c      	beq.n	800114a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001134:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f895 	bl	800126c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001150:	2b00      	cmp	r3, #0
 8001152:	d012      	beq.n	800117a <HAL_ADC_IRQHandler+0x342>
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00d      	beq.n	800117a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001162:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fd96 	bl	8001c9c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001180:	2b00      	cmp	r3, #0
 8001182:	d012      	beq.n	80011aa <HAL_ADC_IRQHandler+0x372>
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00d      	beq.n	80011aa <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001192:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 fd88 	bl	8001cb0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d036      	beq.n	8001222 <HAL_ADC_IRQHandler+0x3ea>
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d031      	beq.n	8001222 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80011c6:	2301      	movs	r3, #1
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ca:	e014      	b.n	80011f6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d008      	beq.n	80011e4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80011d2:	4825      	ldr	r0, [pc, #148]	; (8001268 <HAL_ADC_IRQHandler+0x430>)
 80011d4:	f7ff fa20 	bl	8000618 <LL_ADC_GetMultiDMATransfer>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80011de:	2301      	movs	r3, #1
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
 80011e2:	e008      	b.n	80011f6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80011f2:	2301      	movs	r3, #1
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d10e      	bne.n	800121a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001200:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120c:	f043 0202 	orr.w	r2, r3, #2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f833 	bl	8001280 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2210      	movs	r2, #16
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001228:	2b00      	cmp	r3, #0
 800122a:	d018      	beq.n	800125e <HAL_ADC_IRQHandler+0x426>
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001232:	2b00      	cmp	r3, #0
 8001234:	d013      	beq.n	800125e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001246:	f043 0208 	orr.w	r2, r3, #8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001256:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 fd15 	bl	8001c88 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	50000300 	.word	0x50000300

0800126c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0a6      	sub	sp, #152	; 0x98
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x22>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e348      	b.n	8001948 <HAL_ADC_ConfigChannel+0x6b4>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fa7a 	bl	80007bc <LL_ADC_REG_IsConversionOngoing>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f040 832d 	bne.w	800192a <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	6859      	ldr	r1, [r3, #4]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	f7ff f905 	bl	80004ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fa68 	bl	80007bc <LL_ADC_REG_IsConversionOngoing>
 80012ec:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fa88 	bl	800080a <LL_ADC_INJ_IsConversionOngoing>
 80012fa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001302:	2b00      	cmp	r3, #0
 8001304:	f040 817b 	bne.w	80015fe <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800130c:	2b00      	cmp	r3, #0
 800130e:	f040 8176 	bne.w	80015fe <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800131a:	d10f      	bne.n	800133c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff f91c 	bl	8000564 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f8b3 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>
 800133a:	e00e      	b.n	800135a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	6819      	ldr	r1, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	461a      	mov	r2, r3
 800134a:	f7ff f90b 	bl	8000564 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f8a3 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	08db      	lsrs	r3, r3, #3
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	2b04      	cmp	r3, #4
 800137a:	d022      	beq.n	80013c2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6919      	ldr	r1, [r3, #16]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800138c:	f7ff f80a 	bl	80003a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	6919      	ldr	r1, [r3, #16]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	461a      	mov	r2, r3
 800139e:	f7ff f84f 	bl	8000440 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	6919      	ldr	r1, [r3, #16]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	7f1b      	ldrb	r3, [r3, #28]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d102      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x124>
 80013b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013b6:	e000      	b.n	80013ba <HAL_ADC_ConfigChannel+0x126>
 80013b8:	2300      	movs	r3, #0
 80013ba:	461a      	mov	r2, r3
 80013bc:	f7ff f858 	bl	8000470 <LL_ADC_SetOffsetSaturation>
 80013c0:	e11d      	b.n	80015fe <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f80d 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10a      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x15a>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f802 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	0e9b      	lsrs	r3, r3, #26
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	e012      	b.n	8001414 <HAL_ADC_ConfigChannel+0x180>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe fff7 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800140a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800140c:	fab3 f383 	clz	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800141c:	2b00      	cmp	r3, #0
 800141e:	d105      	bne.n	800142c <HAL_ADC_ConfigChannel+0x198>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0e9b      	lsrs	r3, r3, #26
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	e00a      	b.n	8001442 <HAL_ADC_ConfigChannel+0x1ae>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001434:	fa93 f3a3 	rbit	r3, r3
 8001438:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800143a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800143c:	fab3 f383 	clz	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	429a      	cmp	r2, r3
 8001444:	d106      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe ffde 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	4618      	mov	r0, r3
 800145c:	f7fe ffc4 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10a      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x1ec>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2101      	movs	r1, #1
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe ffb9 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	0e9b      	lsrs	r3, r3, #26
 800147a:	f003 021f 	and.w	r2, r3, #31
 800147e:	e010      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x20e>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe ffae 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800149a:	fab3 f383 	clz	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x226>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0e9b      	lsrs	r3, r3, #26
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	e00a      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x23c>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014c2:	fa93 f3a3 	rbit	r3, r3
 80014c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80014c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d106      	bne.n	80014e2 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2200      	movs	r2, #0
 80014da:	2101      	movs	r1, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe ff97 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2102      	movs	r1, #2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe ff7d 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10a      	bne.n	800150e <HAL_ADC_ConfigChannel+0x27a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2102      	movs	r1, #2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ff72 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	0e9b      	lsrs	r3, r3, #26
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	e010      	b.n	8001530 <HAL_ADC_ConfigChannel+0x29c>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2102      	movs	r1, #2
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe ff67 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001528:	fab3 f383 	clz	r3, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x2b4>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0e9b      	lsrs	r3, r3, #26
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	e00a      	b.n	800155e <HAL_ADC_ConfigChannel+0x2ca>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001558:	fab3 f383 	clz	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	429a      	cmp	r2, r3
 8001560:	d106      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ff50 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2103      	movs	r1, #3
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff36 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10a      	bne.n	800159c <HAL_ADC_ConfigChannel+0x308>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2103      	movs	r1, #3
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff2b 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	0e9b      	lsrs	r3, r3, #26
 8001596:	f003 021f 	and.w	r2, r3, #31
 800159a:	e010      	b.n	80015be <HAL_ADC_ConfigChannel+0x32a>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2103      	movs	r1, #3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff20 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80015b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x342>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	0e9b      	lsrs	r3, r3, #26
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	e00a      	b.n	80015ec <HAL_ADC_ConfigChannel+0x358>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80015e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015e6:	fab3 f383 	clz	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d106      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	2103      	movs	r1, #3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff09 	bl	8000410 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f88c 	bl	8000720 <LL_ADC_IsEnabled>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 810c 	bne.w	8001828 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	461a      	mov	r2, r3
 800161e:	f7fe ffc9 	bl	80005b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	4aab      	ldr	r2, [pc, #684]	; (80018d4 <HAL_ADC_ConfigChannel+0x640>)
 8001628:	4293      	cmp	r3, r2
 800162a:	f040 80fd 	bne.w	8001828 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10b      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x3c2>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	0e9b      	lsrs	r3, r3, #26
 8001644:	3301      	adds	r3, #1
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	2b09      	cmp	r3, #9
 800164c:	bf94      	ite	ls
 800164e:	2301      	movls	r3, #1
 8001650:	2300      	movhi	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	e012      	b.n	800167c <HAL_ADC_ConfigChannel+0x3e8>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3301      	adds	r3, #1
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	2b09      	cmp	r3, #9
 8001674:	bf94      	ite	ls
 8001676:	2301      	movls	r3, #1
 8001678:	2300      	movhi	r3, #0
 800167a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800167c:	2b00      	cmp	r3, #0
 800167e:	d064      	beq.n	800174a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001688:	2b00      	cmp	r3, #0
 800168a:	d107      	bne.n	800169c <HAL_ADC_ConfigChannel+0x408>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0e9b      	lsrs	r3, r3, #26
 8001692:	3301      	adds	r3, #1
 8001694:	069b      	lsls	r3, r3, #26
 8001696:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800169a:	e00e      	b.n	80016ba <HAL_ADC_ConfigChannel+0x426>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80016aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	069b      	lsls	r3, r3, #26
 80016b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <HAL_ADC_ConfigChannel+0x446>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	0e9b      	lsrs	r3, r3, #26
 80016cc:	3301      	adds	r3, #1
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	e010      	b.n	80016fc <HAL_ADC_ConfigChannel+0x468>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80016e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	ea42 0103 	orr.w	r1, r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10a      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x48e>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0e9b      	lsrs	r3, r3, #26
 8001712:	3301      	adds	r3, #1
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	051b      	lsls	r3, r3, #20
 8001720:	e011      	b.n	8001746 <HAL_ADC_ConfigChannel+0x4b2>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3301      	adds	r3, #1
 800173a:	f003 021f 	and.w	r2, r3, #31
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001746:	430b      	orrs	r3, r1
 8001748:	e069      	b.n	800181e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001752:	2b00      	cmp	r3, #0
 8001754:	d107      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x4d2>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0e9b      	lsrs	r3, r3, #26
 800175c:	3301      	adds	r3, #1
 800175e:	069b      	lsls	r3, r3, #26
 8001760:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001764:	e00e      	b.n	8001784 <HAL_ADC_ConfigChannel+0x4f0>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	61fb      	str	r3, [r7, #28]
  return result;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	3301      	adds	r3, #1
 800177e:	069b      	lsls	r3, r3, #26
 8001780:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x510>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0e9b      	lsrs	r3, r3, #26
 8001796:	3301      	adds	r3, #1
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	e010      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x532>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	fa93 f3a3 	rbit	r3, r3
 80017b0:	617b      	str	r3, [r7, #20]
  return result;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	3301      	adds	r3, #1
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	ea42 0103 	orr.w	r1, r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10d      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x55e>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	0e9b      	lsrs	r3, r3, #26
 80017dc:	3301      	adds	r3, #1
 80017de:	f003 021f 	and.w	r2, r3, #31
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	3b1e      	subs	r3, #30
 80017ea:	051b      	lsls	r3, r3, #20
 80017ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017f0:	e014      	b.n	800181c <HAL_ADC_ConfigChannel+0x588>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	fa93 f3a3 	rbit	r3, r3
 80017fe:	60fb      	str	r3, [r7, #12]
  return result;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	fab3 f383 	clz	r3, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	3301      	adds	r3, #1
 800180a:	f003 021f 	and.w	r2, r3, #31
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	3b1e      	subs	r3, #30
 8001816:	051b      	lsls	r3, r3, #20
 8001818:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800181c:	430b      	orrs	r3, r1
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	6892      	ldr	r2, [r2, #8]
 8001822:	4619      	mov	r1, r3
 8001824:	f7fe fe9e 	bl	8000564 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <HAL_ADC_ConfigChannel+0x644>)
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8083 	beq.w	800193c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001836:	4829      	ldr	r0, [pc, #164]	; (80018dc <HAL_ADC_ConfigChannel+0x648>)
 8001838:	f7fe fda6 	bl	8000388 <LL_ADC_GetCommonPathInternalCh>
 800183c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <HAL_ADC_ConfigChannel+0x64c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d004      	beq.n	8001854 <HAL_ADC_ConfigChannel+0x5c0>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <HAL_ADC_ConfigChannel+0x650>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d126      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d120      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001868:	d168      	bne.n	800193c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800186a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800186e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001872:	4619      	mov	r1, r3
 8001874:	4819      	ldr	r0, [pc, #100]	; (80018dc <HAL_ADC_ConfigChannel+0x648>)
 8001876:	f7fe fd74 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_ADC_ConfigChannel+0x654>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <HAL_ADC_ConfigChannel+0x658>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	099a      	lsrs	r2, r3, #6
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001892:	e002      	b.n	800189a <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	3b01      	subs	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f9      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018a0:	e04c      	b.n	800193c <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_ADC_ConfigChannel+0x65c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d125      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x664>
 80018ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d11f      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <HAL_ADC_ConfigChannel+0x660>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d03c      	beq.n	800193c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ca:	4619      	mov	r1, r3
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <HAL_ADC_ConfigChannel+0x648>)
 80018ce:	f7fe fd48 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018d2:	e033      	b.n	800193c <HAL_ADC_ConfigChannel+0x6a8>
 80018d4:	407f0000 	.word	0x407f0000
 80018d8:	80080000 	.word	0x80080000
 80018dc:	50000300 	.word	0x50000300
 80018e0:	c3210000 	.word	0xc3210000
 80018e4:	90c00010 	.word	0x90c00010
 80018e8:	20000038 	.word	0x20000038
 80018ec:	053e2d63 	.word	0x053e2d63
 80018f0:	c7520000 	.word	0xc7520000
 80018f4:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <HAL_ADC_ConfigChannel+0x6bc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d11c      	bne.n	800193c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d116      	bne.n	800193c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_ADC_ConfigChannel+0x6c0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d011      	beq.n	800193c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800191c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001920:	4619      	mov	r1, r3
 8001922:	480d      	ldr	r0, [pc, #52]	; (8001958 <HAL_ADC_ConfigChannel+0x6c4>)
 8001924:	f7fe fd1d 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
 8001928:	e008      	b.n	800193c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192e:	f043 0220 	orr.w	r2, r3, #32
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001944:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001948:	4618      	mov	r0, r3
 800194a:	3798      	adds	r7, #152	; 0x98
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	cb840000 	.word	0xcb840000
 8001954:	50000100 	.word	0x50000100
 8001958:	50000300 	.word	0x50000300

0800195c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe ff22 	bl	80007bc <LL_ADC_REG_IsConversionOngoing>
 8001978:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe ff43 	bl	800080a <LL_ADC_INJ_IsConversionOngoing>
 8001984:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d103      	bne.n	8001994 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8090 	beq.w	8001ab4 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d02a      	beq.n	80019f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7f5b      	ldrb	r3, [r3, #29]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d126      	bne.n	80019f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7f1b      	ldrb	r3, [r3, #28]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d122      	bne.n	80019f8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80019b6:	e014      	b.n	80019e2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	4a41      	ldr	r2, [pc, #260]	; (8001ac0 <ADC_ConversionStop+0x164>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d90d      	bls.n	80019dc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	f043 0210 	orr.w	r2, r3, #16
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e06c      	b.n	8001ab6 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	3301      	adds	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ec:	2b40      	cmp	r3, #64	; 0x40
 80019ee:	d1e3      	bne.n	80019b8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2240      	movs	r2, #64	; 0x40
 80019f6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d014      	beq.n	8001a28 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe feda 	bl	80007bc <LL_ADC_REG_IsConversionOngoing>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00c      	beq.n	8001a28 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fe97 	bl	8000746 <LL_ADC_IsDisableOngoing>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d104      	bne.n	8001a28 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe feb6 	bl	8000794 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d014      	beq.n	8001a58 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fee9 	bl	800080a <LL_ADC_INJ_IsConversionOngoing>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fe7f 	bl	8000746 <LL_ADC_IsDisableOngoing>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d104      	bne.n	8001a58 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fec5 	bl	80007e2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d004      	beq.n	8001a68 <ADC_ConversionStop+0x10c>
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d105      	bne.n	8001a6e <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001a62:	230c      	movs	r3, #12
 8001a64:	617b      	str	r3, [r7, #20]
        break;
 8001a66:	e005      	b.n	8001a74 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001a68:	2308      	movs	r3, #8
 8001a6a:	617b      	str	r3, [r7, #20]
        break;
 8001a6c:	e002      	b.n	8001a74 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	617b      	str	r3, [r7, #20]
        break;
 8001a72:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001a74:	f7fe fc34 	bl	80002e0 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001a7a:	e014      	b.n	8001aa6 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001a7c:	f7fe fc30 	bl	80002e0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d90d      	bls.n	8001aa6 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	f043 0210 	orr.w	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	f043 0201 	orr.w	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e007      	b.n	8001ab6 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e3      	bne.n	8001a7c <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3720      	adds	r7, #32
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	a33fffff 	.word	0xa33fffff

08001ac4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fe25 	bl	8000720 <LL_ADC_IsEnabled>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d146      	bne.n	8001b6a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <ADC_Enable+0xb0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00d      	beq.n	8001b06 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	f043 0210 	orr.w	r2, r3, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afa:	f043 0201 	orr.w	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e032      	b.n	8001b6c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fde0 	bl	80006d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001b10:	f7fe fbe6 	bl	80002e0 <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b16:	e021      	b.n	8001b5c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fdff 	bl	8000720 <LL_ADC_IsEnabled>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d104      	bne.n	8001b32 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fdcf 	bl	80006d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b32:	f7fe fbd5 	bl	80002e0 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d90d      	bls.n	8001b5c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	f043 0210 	orr.w	r2, r3, #16
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b50:	f043 0201 	orr.w	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e007      	b.n	8001b6c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d1d6      	bne.n	8001b18 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	8000003f 	.word	0x8000003f

08001b78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fdde 	bl	8000746 <LL_ADC_IsDisableOngoing>
 8001b8a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fdc5 	bl	8000720 <LL_ADC_IsEnabled>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d040      	beq.n	8001c1e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d13d      	bne.n	8001c1e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030d 	and.w	r3, r3, #13
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10c      	bne.n	8001bca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fd9f 	bl	80006f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bc2:	f7fe fb8d 	bl	80002e0 <HAL_GetTick>
 8001bc6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001bc8:	e022      	b.n	8001c10 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	f043 0210 	orr.w	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	f043 0201 	orr.w	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e01c      	b.n	8001c20 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001be6:	f7fe fb7b 	bl	80002e0 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d90d      	bls.n	8001c10 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	f043 0210 	orr.w	r2, r3, #16
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c04:	f043 0201 	orr.w	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e007      	b.n	8001c20 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1e3      	bne.n	8001be6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <LL_ADC_IsEnabled>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <LL_ADC_IsEnabled+0x18>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <LL_ADC_IsEnabled+0x1a>
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_ADC_REG_IsConversionOngoing>:
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d101      	bne.n	8001c66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b0a1      	sub	sp, #132	; 0x84
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e087      	b.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d06:	d102      	bne.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001d08:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	e001      	b.n	8001d12 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10b      	bne.n	8001d30 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	f043 0220 	orr.w	r2, r3, #32
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e06a      	b.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff8b 	bl	8001c4e <LL_ADC_REG_IsConversionOngoing>
 8001d38:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff85 	bl	8001c4e <LL_ADC_REG_IsConversionOngoing>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d14c      	bne.n	8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d149      	bne.n	8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001d50:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001d52:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d028      	beq.n	8001dae <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d6e:	035b      	lsls	r3, r3, #13
 8001d70:	430b      	orrs	r3, r1
 8001d72:	431a      	orrs	r2, r3
 8001d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d7c:	f7ff ff54 	bl	8001c28 <LL_ADC_IsEnabled>
 8001d80:	4604      	mov	r4, r0
 8001d82:	4823      	ldr	r0, [pc, #140]	; (8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001d84:	f7ff ff50 	bl	8001c28 <LL_ADC_IsEnabled>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4323      	orrs	r3, r4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d133      	bne.n	8001df8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d98:	f023 030f 	bic.w	r3, r3, #15
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	6811      	ldr	r1, [r2, #0]
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	6892      	ldr	r2, [r2, #8]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001daa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dac:	e024      	b.n	8001df8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001dbe:	f7ff ff33 	bl	8001c28 <LL_ADC_IsEnabled>
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	4812      	ldr	r0, [pc, #72]	; (8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001dc6:	f7ff ff2f 	bl	8001c28 <LL_ADC_IsEnabled>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4323      	orrs	r3, r4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d112      	bne.n	8001df8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dda:	f023 030f 	bic.w	r3, r3, #15
 8001dde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001de0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001de2:	e009      	b.n	8001df8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	f043 0220 	orr.w	r2, r3, #32
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001df6:	e000      	b.n	8001dfa <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001df8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3784      	adds	r7, #132	; 0x84
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	50000100 	.word	0x50000100
 8001e14:	50000300 	.word	0x50000300

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <__NVIC_EnableIRQ+0x38>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	; (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f7ff ff8e 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff29 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff40 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff90 	bl	8001f0c <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5f 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff33 	bl	8001e7c <__NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffa4 	bl	8001f74 <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e08d      	b.n	8002166 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_DMA_Init+0x138>)
 8002052:	429a      	cmp	r2, r3
 8002054:	d80f      	bhi.n	8002076 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4b45      	ldr	r3, [pc, #276]	; (8002174 <HAL_DMA_Init+0x13c>)
 800205e:	4413      	add	r3, r2
 8002060:	4a45      	ldr	r2, [pc, #276]	; (8002178 <HAL_DMA_Init+0x140>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	009a      	lsls	r2, r3, #2
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a42      	ldr	r2, [pc, #264]	; (800217c <HAL_DMA_Init+0x144>)
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
 8002074:	e00e      	b.n	8002094 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	4b40      	ldr	r3, [pc, #256]	; (8002180 <HAL_DMA_Init+0x148>)
 800207e:	4413      	add	r3, r2
 8002080:	4a3d      	ldr	r2, [pc, #244]	; (8002178 <HAL_DMA_Init+0x140>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	009a      	lsls	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a3c      	ldr	r2, [pc, #240]	; (8002184 <HAL_DMA_Init+0x14c>)
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80020aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80020b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fa1e 	bl	8002528 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020f4:	d102      	bne.n	80020fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002110:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d010      	beq.n	800213c <HAL_DMA_Init+0x104>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b04      	cmp	r3, #4
 8002120:	d80c      	bhi.n	800213c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fa3e 	bl	80025a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	e008      	b.n	800214e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40020407 	.word	0x40020407
 8002174:	bffdfff8 	.word	0xbffdfff8
 8002178:	cccccccd 	.word	0xcccccccd
 800217c:	40020000 	.word	0x40020000
 8002180:	bffdfbf8 	.word	0xbffdfbf8
 8002184:	40020400 	.word	0x40020400

08002188 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_DMA_Start_IT+0x20>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e066      	b.n	8002276 <HAL_DMA_Start_IT+0xee>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d155      	bne.n	8002268 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0201 	bic.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f962 	bl	80024aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 020e 	orr.w	r2, r2, #14
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e00f      	b.n	8002220 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0204 	bic.w	r2, r2, #4
 800220e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 020a 	orr.w	r2, r2, #10
 800221e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002254:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e005      	b.n	8002274 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002270:	2302      	movs	r3, #2
 8002272:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002274:	7dfb      	ldrb	r3, [r7, #23]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d00d      	beq.n	80022b2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2204      	movs	r2, #4
 800229a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e047      	b.n	8002342 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 020e 	bic.w	r2, r2, #14
 80022c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f003 021f 	and.w	r2, r3, #31
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f202 	lsl.w	r2, r1, r2
 80022f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00c      	beq.n	8002322 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002316:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002320:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	4798      	blx	r3
    }
  }
  return status;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	2204      	movs	r2, #4
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d026      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x7a>
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	d021      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	2104      	movs	r1, #4
 80023ae:	fa01 f202 	lsl.w	r2, r1, r2
 80023b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d071      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023c4:	e06c      	b.n	80024a0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	2202      	movs	r2, #2
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d02e      	beq.n	8002438 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d029      	beq.n	8002438 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10b      	bne.n	800240a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 020a 	bic.w	r2, r2, #10
 8002400:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f003 021f 	and.w	r2, r3, #31
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2102      	movs	r1, #2
 8002418:	fa01 f202 	lsl.w	r2, r1, r2
 800241c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d038      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002436:	e033      	b.n	80024a0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2208      	movs	r2, #8
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d02a      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d025      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 020e 	bic.w	r2, r2, #14
 8002464:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f003 021f 	and.w	r2, r3, #31
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
}
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024c0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024d2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f202 	lsl.w	r2, r1, r2
 80024e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d108      	bne.n	800250a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002508:	e007      	b.n	800251a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	60da      	str	r2, [r3, #12]
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b16      	ldr	r3, [pc, #88]	; (8002590 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002538:	429a      	cmp	r2, r3
 800253a:	d802      	bhi.n	8002542 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800253c:	4b15      	ldr	r3, [pc, #84]	; (8002594 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e001      	b.n	8002546 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002544:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3b08      	subs	r3, #8
 8002552:	4a12      	ldr	r2, [pc, #72]	; (800259c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	009a      	lsls	r2, r3, #2
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	461a      	mov	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002572:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2201      	movs	r2, #1
 800257c:	409a      	lsls	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40020407 	.word	0x40020407
 8002594:	40020800 	.word	0x40020800
 8002598:	40020820 	.word	0x40020820
 800259c:	cccccccd 	.word	0xcccccccd
 80025a0:	40020880 	.word	0x40020880

080025a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	461a      	mov	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80025c6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2201      	movs	r2, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	1000823f 	.word	0x1000823f
 80025e8:	40020940 	.word	0x40020940

080025ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025fa:	e15a      	b.n	80028b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2101      	movs	r1, #1
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	4013      	ands	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 814c 	beq.w	80028ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x38>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b12      	cmp	r3, #18
 8002622:	d123      	bne.n	800266c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	08da      	lsrs	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3208      	adds	r2, #8
 8002666:	6939      	ldr	r1, [r7, #16]
 8002668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0203 	and.w	r2, r3, #3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d00b      	beq.n	80026c0 <HAL_GPIO_Init+0xd4>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d007      	beq.n	80026c0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026b4:	2b11      	cmp	r3, #17
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b12      	cmp	r3, #18
 80026be:	d130      	bne.n	8002722 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026f6:	2201      	movs	r2, #1
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 0201 	and.w	r2, r3, #1
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80a6 	beq.w	80028ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002760:	4b5b      	ldr	r3, [pc, #364]	; (80028d0 <HAL_GPIO_Init+0x2e4>)
 8002762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002764:	4a5a      	ldr	r2, [pc, #360]	; (80028d0 <HAL_GPIO_Init+0x2e4>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6613      	str	r3, [r2, #96]	; 0x60
 800276c:	4b58      	ldr	r3, [pc, #352]	; (80028d0 <HAL_GPIO_Init+0x2e4>)
 800276e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002778:	4a56      	ldr	r2, [pc, #344]	; (80028d4 <HAL_GPIO_Init+0x2e8>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027a2:	d01f      	beq.n	80027e4 <HAL_GPIO_Init+0x1f8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a4c      	ldr	r2, [pc, #304]	; (80028d8 <HAL_GPIO_Init+0x2ec>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d019      	beq.n	80027e0 <HAL_GPIO_Init+0x1f4>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a4b      	ldr	r2, [pc, #300]	; (80028dc <HAL_GPIO_Init+0x2f0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d013      	beq.n	80027dc <HAL_GPIO_Init+0x1f0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_GPIO_Init+0x2f4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00d      	beq.n	80027d8 <HAL_GPIO_Init+0x1ec>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a49      	ldr	r2, [pc, #292]	; (80028e4 <HAL_GPIO_Init+0x2f8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d007      	beq.n	80027d4 <HAL_GPIO_Init+0x1e8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a48      	ldr	r2, [pc, #288]	; (80028e8 <HAL_GPIO_Init+0x2fc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d101      	bne.n	80027d0 <HAL_GPIO_Init+0x1e4>
 80027cc:	2305      	movs	r3, #5
 80027ce:	e00a      	b.n	80027e6 <HAL_GPIO_Init+0x1fa>
 80027d0:	2306      	movs	r3, #6
 80027d2:	e008      	b.n	80027e6 <HAL_GPIO_Init+0x1fa>
 80027d4:	2304      	movs	r3, #4
 80027d6:	e006      	b.n	80027e6 <HAL_GPIO_Init+0x1fa>
 80027d8:	2303      	movs	r3, #3
 80027da:	e004      	b.n	80027e6 <HAL_GPIO_Init+0x1fa>
 80027dc:	2302      	movs	r3, #2
 80027de:	e002      	b.n	80027e6 <HAL_GPIO_Init+0x1fa>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_GPIO_Init+0x1fa>
 80027e4:	2300      	movs	r3, #0
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	f002 0203 	and.w	r2, r2, #3
 80027ec:	0092      	lsls	r2, r2, #2
 80027ee:	4093      	lsls	r3, r2
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f6:	4937      	ldr	r1, [pc, #220]	; (80028d4 <HAL_GPIO_Init+0x2e8>)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002804:	4b39      	ldr	r3, [pc, #228]	; (80028ec <HAL_GPIO_Init+0x300>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	43db      	mvns	r3, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002828:	4a30      	ldr	r2, [pc, #192]	; (80028ec <HAL_GPIO_Init+0x300>)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <HAL_GPIO_Init+0x300>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	43db      	mvns	r3, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002852:	4a26      	ldr	r2, [pc, #152]	; (80028ec <HAL_GPIO_Init+0x300>)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_GPIO_Init+0x300>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	43db      	mvns	r3, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_GPIO_Init+0x300>)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <HAL_GPIO_Init+0x300>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	43db      	mvns	r3, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028a6:	4a11      	ldr	r2, [pc, #68]	; (80028ec <HAL_GPIO_Init+0x300>)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3301      	adds	r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f47f ae9d 	bne.w	80025fc <HAL_GPIO_Init+0x10>
  }
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40010000 	.word	0x40010000
 80028d8:	48000400 	.word	0x48000400
 80028dc:	48000800 	.word	0x48000800
 80028e0:	48000c00 	.word	0x48000c00
 80028e4:	48001000 	.word	0x48001000
 80028e8:	48001400 	.word	0x48001400
 80028ec:	40010400 	.word	0x40010400

080028f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e001      	b.n	8002912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002938:	887a      	ldrh	r2, [r7, #2]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800293e:	e002      	b.n	8002946 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002940:	887a      	ldrh	r2, [r7, #2]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	619a      	str	r2, [r3, #24]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e038      	b.n	80029d6 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800296c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f245 5255 	movw	r2, #21845	; 0x5555
 8002976:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6852      	ldr	r2, [r2, #4]
 8002980:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6892      	ldr	r2, [r2, #8]
 800298a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800298c:	f7fd fca8 	bl	80002e0 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002992:	e008      	b.n	80029a6 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002994:	f7fd fca4 	bl	80002e0 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b30      	cmp	r3, #48	; 0x30
 80029a0:	d901      	bls.n	80029a6 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e017      	b.n	80029d6 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f1      	bne.n	8002994 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d005      	beq.n	80029ca <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	611a      	str	r2, [r3, #16]
 80029c8:	e004      	b.n	80029d4 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80029d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80029ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d141      	bne.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a0e:	4b4b      	ldr	r3, [pc, #300]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1a:	d131      	bne.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a1c:	4b47      	ldr	r3, [pc, #284]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a22:	4a46      	ldr	r2, [pc, #280]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a2c:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a34:	4a41      	ldr	r2, [pc, #260]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a3c:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2232      	movs	r2, #50	; 0x32
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	4a3f      	ldr	r2, [pc, #252]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	0c9b      	lsrs	r3, r3, #18
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a52:	e002      	b.n	8002a5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5a:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a66:	d102      	bne.n	8002a6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f2      	bne.n	8002a54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a6e:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7a:	d158      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e057      	b.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a80:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a86:	4a2d      	ldr	r2, [pc, #180]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a90:	e04d      	b.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a98:	d141      	bne.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a9a:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa6:	d131      	bne.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aa8:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aae:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac0:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2232      	movs	r2, #50	; 0x32
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	0c9b      	lsrs	r3, r3, #18
 8002ada:	3301      	adds	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ade:	e002      	b.n	8002ae6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af2:	d102      	bne.n	8002afa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f2      	bne.n	8002ae0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b06:	d112      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e011      	b.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b1c:	e007      	b.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	20000038 	.word	0x20000038
 8002b44:	431bde83 	.word	0x431bde83

08002b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e308      	b.n	800316c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d075      	beq.n	8002c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b66:	4ba3      	ldr	r3, [pc, #652]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b70:	4ba0      	ldr	r3, [pc, #640]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_OscConfig+0x3e>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_OscConfig+0x44>
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	4b99      	ldr	r3, [pc, #612]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d05b      	beq.n	8002c50 <HAL_RCC_OscConfig+0x108>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d157      	bne.n	8002c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e2e3      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bac:	d106      	bne.n	8002bbc <HAL_RCC_OscConfig+0x74>
 8002bae:	4b91      	ldr	r3, [pc, #580]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a90      	ldr	r2, [pc, #576]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e01d      	b.n	8002bf8 <HAL_RCC_OscConfig+0xb0>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x98>
 8002bc6:	4b8b      	ldr	r3, [pc, #556]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a8a      	ldr	r2, [pc, #552]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b88      	ldr	r3, [pc, #544]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a87      	ldr	r2, [pc, #540]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0xb0>
 8002be0:	4b84      	ldr	r3, [pc, #528]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a83      	ldr	r2, [pc, #524]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b81      	ldr	r3, [pc, #516]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a80      	ldr	r2, [pc, #512]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fd fb6e 	bl	80002e0 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fd fb6a 	bl	80002e0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e2a8      	b.n	800316c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1a:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0xc0>
 8002c26:	e014      	b.n	8002c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fd fb5a 	bl	80002e0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7fd fb56 	bl	80002e0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e294      	b.n	800316c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c42:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0xe8>
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d075      	beq.n	8002d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	4b65      	ldr	r3, [pc, #404]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c68:	4b62      	ldr	r3, [pc, #392]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_OscConfig+0x136>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d002      	beq.n	8002c84 <HAL_RCC_OscConfig+0x13c>
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d11f      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c84:	4b5b      	ldr	r3, [pc, #364]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_OscConfig+0x154>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e267      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9c:	4b55      	ldr	r3, [pc, #340]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	4952      	ldr	r1, [pc, #328]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cb0:	4b51      	ldr	r3, [pc, #324]	; (8002df8 <HAL_RCC_OscConfig+0x2b0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fac7 	bl	8000248 <HAL_InitTick>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d043      	beq.n	8002d48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e253      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d023      	beq.n	8002d14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b49      	ldr	r3, [pc, #292]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a48      	ldr	r2, [pc, #288]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fd fb02 	bl	80002e0 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce0:	f7fd fafe 	bl	80002e0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e23c      	b.n	800316c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf2:	4b40      	ldr	r3, [pc, #256]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfe:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	061b      	lsls	r3, r3, #24
 8002d0c:	4939      	ldr	r1, [pc, #228]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
 8002d12:	e01a      	b.n	8002d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d14:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a36      	ldr	r2, [pc, #216]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fd fade 	bl	80002e0 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d28:	f7fd fada 	bl	80002e0 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e218      	b.n	800316c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1e0>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d03c      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5e:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d64:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7fd fab7 	bl	80002e0 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d76:	f7fd fab3 	bl	80002e0 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e1f1      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ef      	beq.n	8002d76 <HAL_RCC_OscConfig+0x22e>
 8002d96:	e01b      	b.n	8002dd0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d98:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9e:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fd fa9a 	bl	80002e0 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fd fa96 	bl	80002e0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e1d4      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1ef      	bne.n	8002db0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80ab 	beq.w	8002f34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2b4>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e005      	b.n	8002dfe <HAL_RCC_OscConfig+0x2b6>
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	4baf      	ldr	r3, [pc, #700]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	4aae      	ldr	r2, [pc, #696]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e0e:	4bac      	ldr	r3, [pc, #688]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1e:	4ba9      	ldr	r3, [pc, #676]	; (80030c4 <HAL_RCC_OscConfig+0x57c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d118      	bne.n	8002e5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2a:	4ba6      	ldr	r3, [pc, #664]	; (80030c4 <HAL_RCC_OscConfig+0x57c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4aa5      	ldr	r2, [pc, #660]	; (80030c4 <HAL_RCC_OscConfig+0x57c>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7fd fa53 	bl	80002e0 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7fd fa4f 	bl	80002e0 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e18d      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e50:	4b9c      	ldr	r3, [pc, #624]	; (80030c4 <HAL_RCC_OscConfig+0x57c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d108      	bne.n	8002e76 <HAL_RCC_OscConfig+0x32e>
 8002e64:	4b96      	ldr	r3, [pc, #600]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	4a95      	ldr	r2, [pc, #596]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e74:	e024      	b.n	8002ec0 <HAL_RCC_OscConfig+0x378>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d110      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x358>
 8002e7e:	4b90      	ldr	r3, [pc, #576]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	4a8e      	ldr	r2, [pc, #568]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e8e:	4b8c      	ldr	r3, [pc, #560]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	4a8a      	ldr	r2, [pc, #552]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e9e:	e00f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x378>
 8002ea0:	4b87      	ldr	r3, [pc, #540]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	4a86      	ldr	r2, [pc, #536]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb0:	4b83      	ldr	r3, [pc, #524]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a82      	ldr	r2, [pc, #520]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d016      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fd fa0a 	bl	80002e0 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed0:	f7fd fa06 	bl	80002e0 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e142      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee6:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ed      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x388>
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7fd f9f3 	bl	80002e0 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fd f9ef 	bl	80002e0 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e12b      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f14:	4b6a      	ldr	r3, [pc, #424]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1ed      	bne.n	8002efe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f22:	7ffb      	ldrb	r3, [r7, #31]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f28:	4b65      	ldr	r3, [pc, #404]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	4a64      	ldr	r2, [pc, #400]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d03c      	beq.n	8002fba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01c      	beq.n	8002f82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f48:	4b5d      	ldr	r3, [pc, #372]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f4e:	4a5c      	ldr	r2, [pc, #368]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fd f9c2 	bl	80002e0 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f60:	f7fd f9be 	bl	80002e0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0fc      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f72:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ef      	beq.n	8002f60 <HAL_RCC_OscConfig+0x418>
 8002f80:	e01b      	b.n	8002fba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f82:	4b4f      	ldr	r3, [pc, #316]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f88:	4a4d      	ldr	r2, [pc, #308]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7fd f9a5 	bl	80002e0 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f9a:	f7fd f9a1 	bl	80002e0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0df      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fac:	4b44      	ldr	r3, [pc, #272]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1ef      	bne.n	8002f9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80d3 	beq.w	800316a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc4:	4b3e      	ldr	r3, [pc, #248]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	f000 808d 	beq.w	80030ec <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d15a      	bne.n	8003090 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a38      	ldr	r2, [pc, #224]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8002fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fd f97b 	bl	80002e0 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fd f977 	bl	80002e0 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0b5      	b.n	800316c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003000:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800300c:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	4b2d      	ldr	r3, [pc, #180]	; (80030c8 <HAL_RCC_OscConfig+0x580>)
 8003012:	4013      	ands	r3, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6a11      	ldr	r1, [r2, #32]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800301c:	3a01      	subs	r2, #1
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	4311      	orrs	r1, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003026:	0212      	lsls	r2, r2, #8
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800302e:	0852      	lsrs	r2, r2, #1
 8003030:	3a01      	subs	r2, #1
 8003032:	0552      	lsls	r2, r2, #21
 8003034:	4311      	orrs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800303a:	0852      	lsrs	r2, r2, #1
 800303c:	3a01      	subs	r2, #1
 800303e:	0652      	lsls	r2, r2, #25
 8003040:	4311      	orrs	r1, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003046:	06d2      	lsls	r2, r2, #27
 8003048:	430a      	orrs	r2, r1
 800304a:	491d      	ldr	r1, [pc, #116]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 800304c:	4313      	orrs	r3, r2
 800304e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1a      	ldr	r2, [pc, #104]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800305c:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a17      	ldr	r2, [pc, #92]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003066:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd f93a 	bl	80002e0 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fd f936 	bl	80002e0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e074      	b.n	800316c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x528>
 800308e:	e06c      	b.n	800316a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 8003096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800309a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 80030a2:	f023 0303 	bic.w	r3, r3, #3
 80030a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <HAL_RCC_OscConfig+0x578>)
 80030ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fd f912 	bl	80002e0 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030be:	e00e      	b.n	80030de <HAL_RCC_OscConfig+0x596>
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40007000 	.word	0x40007000
 80030c8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fd f908 	bl	80002e0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e046      	b.n	800316c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030de:	4b25      	ldr	r3, [pc, #148]	; (8003174 <HAL_RCC_OscConfig+0x62c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x584>
 80030ea:	e03e      	b.n	800316a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e039      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030f8:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_OscConfig+0x62c>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0203 	and.w	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	429a      	cmp	r2, r3
 800310a:	d12c      	bne.n	8003166 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	3b01      	subs	r3, #1
 8003118:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d123      	bne.n	8003166 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d11b      	bne.n	8003166 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d113      	bne.n	8003166 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d109      	bne.n	8003166 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	3b01      	subs	r3, #1
 8003160:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e11e      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b91      	ldr	r3, [pc, #580]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d910      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b8e      	ldr	r3, [pc, #568]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 020f 	bic.w	r2, r3, #15
 80031a6:	498c      	ldr	r1, [pc, #560]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b8a      	ldr	r3, [pc, #552]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e106      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d073      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d129      	bne.n	8003228 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d4:	4b81      	ldr	r3, [pc, #516]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0f4      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031e4:	f000 f966 	bl	80034b4 <RCC_GetSysClockFreqFromPLLSource>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4a7c      	ldr	r2, [pc, #496]	; (80033e0 <HAL_RCC_ClockConfig+0x268>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d93f      	bls.n	8003272 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031f2:	4b7a      	ldr	r3, [pc, #488]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003206:	2b00      	cmp	r3, #0
 8003208:	d033      	beq.n	8003272 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800320e:	2b00      	cmp	r3, #0
 8003210:	d12f      	bne.n	8003272 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003212:	4b72      	ldr	r3, [pc, #456]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800321a:	4a70      	ldr	r2, [pc, #448]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e024      	b.n	8003272 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003230:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0c6      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003240:	4b66      	ldr	r3, [pc, #408]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0be      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003250:	f000 f8ce 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8003254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4a61      	ldr	r2, [pc, #388]	; (80033e0 <HAL_RCC_ClockConfig+0x268>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d909      	bls.n	8003272 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800325e:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003266:	4a5d      	ldr	r2, [pc, #372]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4957      	ldr	r1, [pc, #348]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003284:	f7fd f82c 	bl	80002e0 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fd f828 	bl	80002e0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e095      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b4e      	ldr	r3, [pc, #312]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d023      	beq.n	8003308 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032cc:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a42      	ldr	r2, [pc, #264]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032e4:	4b3d      	ldr	r3, [pc, #244]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80032ec:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f4:	4b39      	ldr	r3, [pc, #228]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4936      	ldr	r1, [pc, #216]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
 8003306:	e008      	b.n	800331a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d105      	bne.n	800331a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800330e:	4b33      	ldr	r3, [pc, #204]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4a32      	ldr	r2, [pc, #200]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003318:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d21d      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 020f 	bic.w	r2, r3, #15
 8003330:	4929      	ldr	r1, [pc, #164]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003338:	f7fc ffd2 	bl	80002e0 <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fc ffce 	bl	80002e0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e03b      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d1ed      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4917      	ldr	r1, [pc, #92]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	490f      	ldr	r1, [pc, #60]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033a2:	f000 f825 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033a6:	4601      	mov	r1, r0
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <HAL_RCC_ClockConfig+0x26c>)
 80033b4:	5cd3      	ldrb	r3, [r2, r3]
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	fa21 f303 	lsr.w	r3, r1, r3
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_RCC_ClockConfig+0x270>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCC_ClockConfig+0x274>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fc ff3e 	bl	8000248 <HAL_InitTick>
 80033cc:	4603      	mov	r3, r0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40022000 	.word	0x40022000
 80033dc:	40021000 	.word	0x40021000
 80033e0:	04c4b400 	.word	0x04c4b400
 80033e4:	08007e14 	.word	0x08007e14
 80033e8:	20000038 	.word	0x20000038
 80033ec:	20000000 	.word	0x20000000

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033f6:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d102      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003402:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	e047      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003408:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b08      	cmp	r3, #8
 8003412:	d102      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003414:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	e03e      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d136      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	3301      	adds	r3, #1
 800343c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d10c      	bne.n	800345e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003444:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	fbb2 f3f3 	udiv	r3, r2, r3
 800344c:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800344e:	68d2      	ldr	r2, [r2, #12]
 8003450:	0a12      	lsrs	r2, r2, #8
 8003452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	617b      	str	r3, [r7, #20]
      break;
 800345c:	e00c      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	0a12      	lsrs	r2, r2, #8
 800346c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003470:	fb02 f303 	mul.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
      break;
 8003476:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	0e5b      	lsrs	r3, r3, #25
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	e001      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003498:	693b      	ldr	r3, [r7, #16]
}
 800349a:	4618      	mov	r0, r3
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	007a1200 	.word	0x007a1200

080034b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ba:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	3301      	adds	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d10c      	bne.n	80034f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034d8:	4a17      	ldr	r2, [pc, #92]	; (8003538 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	4a14      	ldr	r2, [pc, #80]	; (8003534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034e2:	68d2      	ldr	r2, [r2, #12]
 80034e4:	0a12      	lsrs	r2, r2, #8
 80034e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	617b      	str	r3, [r7, #20]
    break;
 80034f0:	e00c      	b.n	800350c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	4a0e      	ldr	r2, [pc, #56]	; (8003534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034fc:	68d2      	ldr	r2, [r2, #12]
 80034fe:	0a12      	lsrs	r2, r2, #8
 8003500:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]
    break;
 800350a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	0e5b      	lsrs	r3, r3, #25
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	3301      	adds	r3, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003526:	687b      	ldr	r3, [r7, #4]
}
 8003528:	4618      	mov	r0, r3
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40021000 	.word	0x40021000
 8003538:	007a1200 	.word	0x007a1200
 800353c:	00f42400 	.word	0x00f42400

08003540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003548:	2300      	movs	r3, #0
 800354a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800354c:	2300      	movs	r3, #0
 800354e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8098 	beq.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355e:	2300      	movs	r3, #0
 8003560:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003562:	4b43      	ldr	r3, [pc, #268]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10d      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356e:	4b40      	ldr	r3, [pc, #256]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	4a3f      	ldr	r2, [pc, #252]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003578:	6593      	str	r3, [r2, #88]	; 0x58
 800357a:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003586:	2301      	movs	r3, #1
 8003588:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800358a:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a39      	ldr	r2, [pc, #228]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003596:	f7fc fea3 	bl	80002e0 <HAL_GetTick>
 800359a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800359c:	e009      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359e:	f7fc fe9f 	bl	80002e0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d902      	bls.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	74fb      	strb	r3, [r7, #19]
        break;
 80035b0:	e005      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035b2:	4b30      	ldr	r3, [pc, #192]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0ef      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d159      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035c4:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01e      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d019      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035e0:	4b23      	ldr	r3, [pc, #140]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035ec:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035fc:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800360c:	4a18      	ldr	r2, [pc, #96]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7fc fe5f 	bl	80002e0 <HAL_GetTick>
 8003622:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003624:	e00b      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fc fe5b 	bl	80002e0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d902      	bls.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	74fb      	strb	r3, [r7, #19]
            break;
 800363c:	e006      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ec      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10b      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003652:	4b07      	ldr	r3, [pc, #28]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	4903      	ldr	r1, [pc, #12]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003668:	e008      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	74bb      	strb	r3, [r7, #18]
 800366e:	e005      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367c:	7c7b      	ldrb	r3, [r7, #17]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003682:	4ba6      	ldr	r3, [pc, #664]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	4aa5      	ldr	r2, [pc, #660]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800369a:	4ba0      	ldr	r3, [pc, #640]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	f023 0203 	bic.w	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	499c      	ldr	r1, [pc, #624]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036bc:	4b97      	ldr	r3, [pc, #604]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f023 020c 	bic.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4994      	ldr	r1, [pc, #592]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036de:	4b8f      	ldr	r3, [pc, #572]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	498b      	ldr	r1, [pc, #556]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003700:	4b86      	ldr	r3, [pc, #536]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	4983      	ldr	r1, [pc, #524]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003722:	4b7e      	ldr	r3, [pc, #504]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	497a      	ldr	r1, [pc, #488]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003744:	4b75      	ldr	r3, [pc, #468]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	4972      	ldr	r1, [pc, #456]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003766:	4b6d      	ldr	r3, [pc, #436]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	4969      	ldr	r1, [pc, #420]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003788:	4b64      	ldr	r3, [pc, #400]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	4961      	ldr	r1, [pc, #388]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037aa:	4b5c      	ldr	r3, [pc, #368]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	4958      	ldr	r1, [pc, #352]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d015      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037cc:	4b53      	ldr	r3, [pc, #332]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	4950      	ldr	r1, [pc, #320]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ea:	d105      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ec:	4b4b      	ldr	r3, [pc, #300]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a4a      	ldr	r2, [pc, #296]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003800:	2b00      	cmp	r3, #0
 8003802:	d015      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003804:	4b45      	ldr	r3, [pc, #276]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	4942      	ldr	r1, [pc, #264]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003822:	d105      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003824:	4b3d      	ldr	r3, [pc, #244]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a3c      	ldr	r2, [pc, #240]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d015      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800383c:	4b37      	ldr	r3, [pc, #220]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	4934      	ldr	r1, [pc, #208]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800385a:	d105      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800385c:	4b2f      	ldr	r3, [pc, #188]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a2e      	ldr	r2, [pc, #184]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003866:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d015      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003874:	4b29      	ldr	r3, [pc, #164]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003882:	4926      	ldr	r1, [pc, #152]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003892:	d105      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003894:	4b21      	ldr	r3, [pc, #132]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a20      	ldr	r2, [pc, #128]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800389a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800389e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	4918      	ldr	r1, [pc, #96]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ca:	d105      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a12      	ldr	r2, [pc, #72]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d015      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f2:	490a      	ldr	r1, [pc, #40]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003902:	d105      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003910:	7cbb      	ldrb	r3, [r7, #18]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000

08003920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e01d      	b.n	800396e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f004 f862 	bl	8007a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3304      	adds	r3, #4
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f001 f8dc 	bl	8004b1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_TIM_Base_Start+0x50>)
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b06      	cmp	r3, #6
 8003998:	d00b      	beq.n	80039b2 <HAL_TIM_Base_Start+0x3a>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d007      	beq.n	80039b2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	00010007 	.word	0x00010007

080039cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10f      	bne.n	8003a0c <HAL_TIM_Base_Stop+0x40>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	f244 4344 	movw	r3, #17476	; 0x4444
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_TIM_Base_Stop+0x40>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <HAL_TIM_Base_Start_IT+0x50>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	d00b      	beq.n	8003a66 <HAL_TIM_Base_Start_IT+0x42>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a54:	d007      	beq.n	8003a66 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	00010007 	.word	0x00010007

08003a78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e01d      	b.n	8003ac6 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f004 f874 	bl	8007b8c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f001 f830 	bl	8004b1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 fe0a 	bl	80056fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <HAL_TIM_OC_Start+0x98>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_TIM_OC_Start+0x4a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_TIM_OC_Start+0x9c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <HAL_TIM_OC_Start+0x4a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <HAL_TIM_OC_Start+0xa0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <HAL_TIM_OC_Start+0x4a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <HAL_TIM_OC_Start+0xa4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_TIM_OC_Start+0x4a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_TIM_OC_Start+0xa8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_OC_Start+0x4e>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_TIM_OC_Start+0x50>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_TIM_OC_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_TIM_OC_Start+0xac>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b06      	cmp	r3, #6
 8003b44:	d00b      	beq.n	8003b5e <HAL_TIM_OC_Start+0x8e>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4c:	d007      	beq.n	8003b5e <HAL_TIM_OC_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	40013400 	.word	0x40013400
 8003b70:	40014000 	.word	0x40014000
 8003b74:	40014400 	.word	0x40014400
 8003b78:	40014800 	.word	0x40014800
 8003b7c:	00010007 	.word	0x00010007

08003b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e01d      	b.n	8003bce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f003 ff0c 	bl	80079c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f000 ffac 	bl	8004b1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2201      	movs	r2, #1
 8003be8:	6839      	ldr	r1, [r7, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 fd86 	bl	80056fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1e      	ldr	r2, [pc, #120]	; (8003c70 <HAL_TIM_PWM_Start+0x98>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x4a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <HAL_TIM_PWM_Start+0x9c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00e      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x4a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <HAL_TIM_PWM_Start+0xa0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d009      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x4a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_TIM_PWM_Start+0xa4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d004      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x4a>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <HAL_TIM_PWM_Start+0xa8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_PWM_Start+0x4e>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_TIM_PWM_Start+0x50>
 8003c26:	2300      	movs	r3, #0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_TIM_PWM_Start+0xac>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b06      	cmp	r3, #6
 8003c4c:	d00b      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x8e>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c54:	d007      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40012c00 	.word	0x40012c00
 8003c74:	40013400 	.word	0x40013400
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40014400 	.word	0x40014400
 8003c80:	40014800 	.word	0x40014800
 8003c84:	00010007 	.word	0x00010007

08003c88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e01d      	b.n	8003cd6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f815 	bl	8003cde <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f000 ff28 	bl	8004b1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e0e0      	b.n	8003ed4 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d10b      	bne.n	8003d36 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_IC_Start_DMA+0x3a>
 8003d24:	887b      	ldrh	r3, [r7, #2]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e0d2      	b.n	8003ed4 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	f200 80ad 	bhi.w	8003e98 <HAL_TIM_IC_Start_DMA+0x1a4>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <HAL_TIM_IC_Start_DMA+0x50>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d79 	.word	0x08003d79
 8003d48:	08003e99 	.word	0x08003e99
 8003d4c:	08003e99 	.word	0x08003e99
 8003d50:	08003e99 	.word	0x08003e99
 8003d54:	08003dc1 	.word	0x08003dc1
 8003d58:	08003e99 	.word	0x08003e99
 8003d5c:	08003e99 	.word	0x08003e99
 8003d60:	08003e99 	.word	0x08003e99
 8003d64:	08003e09 	.word	0x08003e09
 8003d68:	08003e99 	.word	0x08003e99
 8003d6c:	08003e99 	.word	0x08003e99
 8003d70:	08003e99 	.word	0x08003e99
 8003d74:	08003e51 	.word	0x08003e51
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	4a57      	ldr	r2, [pc, #348]	; (8003edc <HAL_TIM_IC_Start_DMA+0x1e8>)
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	4a56      	ldr	r2, [pc, #344]	; (8003ee0 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	4a55      	ldr	r2, [pc, #340]	; (8003ee4 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8003d8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3334      	adds	r3, #52	; 0x34
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	f7fe f9f2 	bl	8002188 <HAL_DMA_Start_IT>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e092      	b.n	8003ed4 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dbc:	60da      	str	r2, [r3, #12]
      break;
 8003dbe:	e06c      	b.n	8003e9a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	4a45      	ldr	r2, [pc, #276]	; (8003edc <HAL_TIM_IC_Start_DMA+0x1e8>)
 8003dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	4a44      	ldr	r2, [pc, #272]	; (8003ee0 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	4a43      	ldr	r2, [pc, #268]	; (8003ee4 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8003dd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3338      	adds	r3, #56	; 0x38
 8003de2:	4619      	mov	r1, r3
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	887b      	ldrh	r3, [r7, #2]
 8003de8:	f7fe f9ce 	bl	8002188 <HAL_DMA_Start_IT>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e06e      	b.n	8003ed4 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e04:	60da      	str	r2, [r3, #12]
      break;
 8003e06:	e048      	b.n	8003e9a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	4a33      	ldr	r2, [pc, #204]	; (8003edc <HAL_TIM_IC_Start_DMA+0x1e8>)
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	4a32      	ldr	r2, [pc, #200]	; (8003ee0 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4a31      	ldr	r2, [pc, #196]	; (8003ee4 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8003e1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	333c      	adds	r3, #60	; 0x3c
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	887b      	ldrh	r3, [r7, #2]
 8003e30:	f7fe f9aa 	bl	8002188 <HAL_DMA_Start_IT>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e04a      	b.n	8003ed4 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e4c:	60da      	str	r2, [r3, #12]
      break;
 8003e4e:	e024      	b.n	8003e9a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	4a21      	ldr	r2, [pc, #132]	; (8003edc <HAL_TIM_IC_Start_DMA+0x1e8>)
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	4a20      	ldr	r2, [pc, #128]	; (8003ee0 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8003e66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3340      	adds	r3, #64	; 0x40
 8003e72:	4619      	mov	r1, r3
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	887b      	ldrh	r3, [r7, #2]
 8003e78:	f7fe f986 	bl	8002188 <HAL_DMA_Start_IT>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e026      	b.n	8003ed4 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e94:	60da      	str	r2, [r3, #12]
      break;
 8003e96:	e000      	b.n	8003e9a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8003e98:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 fc2a 	bl	80056fc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <HAL_TIM_IC_Start_DMA+0x1f4>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b06      	cmp	r3, #6
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_TIM_IC_Start_DMA+0x1de>
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec0:	d007      	beq.n	8003ed2 <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	08004a3d 	.word	0x08004a3d
 8003ee0:	08004aad 	.word	0x08004aad
 8003ee4:	08004a19 	.word	0x08004a19
 8003ee8:	00010007 	.word	0x00010007

08003eec <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b0c      	cmp	r3, #12
 8003efa:	d855      	bhi.n	8003fa8 <HAL_TIM_IC_Stop_DMA+0xbc>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <HAL_TIM_IC_Stop_DMA+0x18>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f39 	.word	0x08003f39
 8003f08:	08003fa9 	.word	0x08003fa9
 8003f0c:	08003fa9 	.word	0x08003fa9
 8003f10:	08003fa9 	.word	0x08003fa9
 8003f14:	08003f55 	.word	0x08003f55
 8003f18:	08003fa9 	.word	0x08003fa9
 8003f1c:	08003fa9 	.word	0x08003fa9
 8003f20:	08003fa9 	.word	0x08003fa9
 8003f24:	08003f71 	.word	0x08003f71
 8003f28:	08003fa9 	.word	0x08003fa9
 8003f2c:	08003fa9 	.word	0x08003fa9
 8003f30:	08003fa9 	.word	0x08003fa9
 8003f34:	08003f8d 	.word	0x08003f8d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe f996 	bl	800227e <HAL_DMA_Abort_IT>
      break;
 8003f52:	e02a      	b.n	8003faa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fe f988 	bl	800227e <HAL_DMA_Abort_IT>
      break;
 8003f6e:	e01c      	b.n	8003faa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe f97a 	bl	800227e <HAL_DMA_Abort_IT>
      break;
 8003f8a:	e00e      	b.n	8003faa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe f96c 	bl	800227e <HAL_DMA_Abort_IT>
      break;
 8003fa6:	e000      	b.n	8003faa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 8003fa8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	6839      	ldr	r1, [r7, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 fba2 	bl	80056fc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a1a      	ldr	r2, [r3, #32]
 8003fbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10f      	bne.n	8003fe8 <HAL_TIM_IC_Stop_DMA+0xfc>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a1a      	ldr	r2, [r3, #32]
 8003fce:	f244 4344 	movw	r3, #17476	; 0x4444
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d107      	bne.n	8003fe8 <HAL_TIM_IC_Stop_DMA+0xfc>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0201 	bic.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop

08003ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b02      	cmp	r3, #2
 8004010:	d122      	bne.n	8004058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d11b      	bne.n	8004058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0202 	mvn.w	r2, #2
 8004028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fcb8 	bl	80049b4 <HAL_TIM_IC_CaptureCallback>
 8004044:	e005      	b.n	8004052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fcaa 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fcc5 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b04      	cmp	r3, #4
 8004064:	d122      	bne.n	80040ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b04      	cmp	r3, #4
 8004072:	d11b      	bne.n	80040ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0204 	mvn.w	r2, #4
 800407c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2202      	movs	r2, #2
 8004082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fc8e 	bl	80049b4 <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fc80 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fc9b 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d122      	bne.n	8004100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d11b      	bne.n	8004100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0208 	mvn.w	r2, #8
 80040d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2204      	movs	r2, #4
 80040d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fc64 	bl	80049b4 <HAL_TIM_IC_CaptureCallback>
 80040ec:	e005      	b.n	80040fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fc56 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fc71 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b10      	cmp	r3, #16
 800410c:	d122      	bne.n	8004154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b10      	cmp	r3, #16
 800411a:	d11b      	bne.n	8004154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0210 	mvn.w	r2, #16
 8004124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2208      	movs	r2, #8
 800412a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fc3a 	bl	80049b4 <HAL_TIM_IC_CaptureCallback>
 8004140:	e005      	b.n	800414e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fc2c 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fc47 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d10e      	bne.n	8004180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d107      	bne.n	8004180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0201 	mvn.w	r2, #1
 8004178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f001 ff98 	bl	80060b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d10e      	bne.n	80041ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004198:	2b80      	cmp	r3, #128	; 0x80
 800419a:	d107      	bne.n	80041ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f001 fc06 	bl	80059b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ba:	d10e      	bne.n	80041da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b80      	cmp	r3, #128	; 0x80
 80041c8:	d107      	bne.n	80041da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f001 fbf9 	bl	80059cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d10e      	bne.n	8004206 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b40      	cmp	r3, #64	; 0x40
 80041f4:	d107      	bne.n	8004206 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fbf5 	bl	80049f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b20      	cmp	r3, #32
 8004212:	d10e      	bne.n	8004232 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b20      	cmp	r3, #32
 8004220:	d107      	bne.n	8004232 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f06f 0220 	mvn.w	r2, #32
 800422a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f001 fbb9 	bl	80059a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004240:	d10f      	bne.n	8004262 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800424c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004250:	d107      	bne.n	8004262 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800425a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f001 fbbf 	bl	80059e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004270:	d10f      	bne.n	8004292 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800427c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004280:	d107      	bne.n	8004292 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800428a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f001 fbb1 	bl	80059f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a0:	d10f      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b0:	d107      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80042ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f001 fba3 	bl	8005a08 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042d0:	d10f      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042e0:	d107      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80042ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f001 fb95 	bl	8005a1c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004312:	2302      	movs	r3, #2
 8004314:	e06c      	b.n	80043f0 <HAL_TIM_OC_ConfigChannel+0xf4>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2202      	movs	r2, #2
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b14      	cmp	r3, #20
 800432a:	d857      	bhi.n	80043dc <HAL_TIM_OC_ConfigChannel+0xe0>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <HAL_TIM_OC_ConfigChannel+0x38>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004389 	.word	0x08004389
 8004338:	080043dd 	.word	0x080043dd
 800433c:	080043dd 	.word	0x080043dd
 8004340:	080043dd 	.word	0x080043dd
 8004344:	08004397 	.word	0x08004397
 8004348:	080043dd 	.word	0x080043dd
 800434c:	080043dd 	.word	0x080043dd
 8004350:	080043dd 	.word	0x080043dd
 8004354:	080043a5 	.word	0x080043a5
 8004358:	080043dd 	.word	0x080043dd
 800435c:	080043dd 	.word	0x080043dd
 8004360:	080043dd 	.word	0x080043dd
 8004364:	080043b3 	.word	0x080043b3
 8004368:	080043dd 	.word	0x080043dd
 800436c:	080043dd 	.word	0x080043dd
 8004370:	080043dd 	.word	0x080043dd
 8004374:	080043c1 	.word	0x080043c1
 8004378:	080043dd 	.word	0x080043dd
 800437c:	080043dd 	.word	0x080043dd
 8004380:	080043dd 	.word	0x080043dd
 8004384:	080043cf 	.word	0x080043cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fc54 	bl	8004c3c <TIM_OC1_SetConfig>
      break;
 8004394:	e023      	b.n	80043de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fcdd 	bl	8004d5c <TIM_OC2_SetConfig>
      break;
 80043a2:	e01c      	b.n	80043de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fd60 	bl	8004e70 <TIM_OC3_SetConfig>
      break;
 80043b0:	e015      	b.n	80043de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fde1 	bl	8004f80 <TIM_OC4_SetConfig>
      break;
 80043be:	e00e      	b.n	80043de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fe64 	bl	8005094 <TIM_OC5_SetConfig>
      break;
 80043cc:	e007      	b.n	80043de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fec1 	bl	800515c <TIM_OC6_SetConfig>
      break;
 80043da:	e000      	b.n	80043de <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 80043dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_TIM_IC_ConfigChannel+0x1a>
 800440e:	2302      	movs	r3, #2
 8004410:	e08a      	b.n	8004528 <HAL_TIM_IC_ConfigChannel+0x130>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2202      	movs	r2, #2
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d11b      	bne.n	8004460 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f000 ffa6 	bl	8005388 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 020c 	bic.w	r2, r2, #12
 800444a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6999      	ldr	r1, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	619a      	str	r2, [r3, #24]
 800445e:	e05a      	b.n	8004516 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b04      	cmp	r3, #4
 8004464:	d11c      	bne.n	80044a0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6819      	ldr	r1, [r3, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f001 f81e 	bl	80054b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004488:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6999      	ldr	r1, [r3, #24]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	021a      	lsls	r2, r3, #8
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	619a      	str	r2, [r3, #24]
 800449e:	e03a      	b.n	8004516 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d11b      	bne.n	80044de <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	6819      	ldr	r1, [r3, #0]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f001 f86b 	bl	8005590 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 020c 	bic.w	r2, r2, #12
 80044c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69d9      	ldr	r1, [r3, #28]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	61da      	str	r2, [r3, #28]
 80044dc:	e01b      	b.n	8004516 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6819      	ldr	r1, [r3, #0]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f001 f88b 	bl	8005608 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004500:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69d9      	ldr	r1, [r3, #28]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	021a      	lsls	r2, r3, #8
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004546:	2302      	movs	r3, #2
 8004548:	e105      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x226>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2202      	movs	r2, #2
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b14      	cmp	r3, #20
 800455e:	f200 80f0 	bhi.w	8004742 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	080045bd 	.word	0x080045bd
 800456c:	08004743 	.word	0x08004743
 8004570:	08004743 	.word	0x08004743
 8004574:	08004743 	.word	0x08004743
 8004578:	080045fd 	.word	0x080045fd
 800457c:	08004743 	.word	0x08004743
 8004580:	08004743 	.word	0x08004743
 8004584:	08004743 	.word	0x08004743
 8004588:	0800463f 	.word	0x0800463f
 800458c:	08004743 	.word	0x08004743
 8004590:	08004743 	.word	0x08004743
 8004594:	08004743 	.word	0x08004743
 8004598:	0800467f 	.word	0x0800467f
 800459c:	08004743 	.word	0x08004743
 80045a0:	08004743 	.word	0x08004743
 80045a4:	08004743 	.word	0x08004743
 80045a8:	080046c1 	.word	0x080046c1
 80045ac:	08004743 	.word	0x08004743
 80045b0:	08004743 	.word	0x08004743
 80045b4:	08004743 	.word	0x08004743
 80045b8:	08004701 	.word	0x08004701
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fb3a 	bl	8004c3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0208 	orr.w	r2, r2, #8
 80045d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0204 	bic.w	r2, r2, #4
 80045e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6999      	ldr	r1, [r3, #24]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	619a      	str	r2, [r3, #24]
      break;
 80045fa:	e0a3      	b.n	8004744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fbaa 	bl	8004d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6999      	ldr	r1, [r3, #24]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	021a      	lsls	r2, r3, #8
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	619a      	str	r2, [r3, #24]
      break;
 800463c:	e082      	b.n	8004744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fc13 	bl	8004e70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0208 	orr.w	r2, r2, #8
 8004658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0204 	bic.w	r2, r2, #4
 8004668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69d9      	ldr	r1, [r3, #28]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	61da      	str	r2, [r3, #28]
      break;
 800467c:	e062      	b.n	8004744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fc7b 	bl	8004f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69d9      	ldr	r1, [r3, #28]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	021a      	lsls	r2, r3, #8
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	61da      	str	r2, [r3, #28]
      break;
 80046be:	e041      	b.n	8004744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fce4 	bl	8005094 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0208 	orr.w	r2, r2, #8
 80046da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0204 	bic.w	r2, r2, #4
 80046ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80046fe:	e021      	b.n	8004744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fd28 	bl	800515c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800471a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	021a      	lsls	r2, r3, #8
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004740:	e000      	b.n	8004744 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004742:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop

08004760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_TIM_ConfigClockSource+0x18>
 8004774:	2302      	movs	r3, #2
 8004776:	e0c3      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x1a0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800479a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b70      	cmp	r3, #112	; 0x70
 80047b2:	d038      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0xc6>
 80047b4:	2b70      	cmp	r3, #112	; 0x70
 80047b6:	d815      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x84>
 80047b8:	2b30      	cmp	r3, #48	; 0x30
 80047ba:	f000 808e 	beq.w	80048da <HAL_TIM_ConfigClockSource+0x17a>
 80047be:	2b30      	cmp	r3, #48	; 0x30
 80047c0:	d809      	bhi.n	80047d6 <HAL_TIM_ConfigClockSource+0x76>
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	f000 8089 	beq.w	80048da <HAL_TIM_ConfigClockSource+0x17a>
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	f000 8086 	beq.w	80048da <HAL_TIM_ConfigClockSource+0x17a>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8083 	beq.w	80048da <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80047d4:	e08b      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80047d6:	2b50      	cmp	r3, #80	; 0x50
 80047d8:	d04f      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x11a>
 80047da:	2b60      	cmp	r3, #96	; 0x60
 80047dc:	d05d      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x13a>
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	d06b      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x15a>
      break;
 80047e2:	e084      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80047e4:	4a48      	ldr	r2, [pc, #288]	; (8004908 <HAL_TIM_ConfigClockSource+0x1a8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d077      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x17a>
 80047ea:	4a47      	ldr	r2, [pc, #284]	; (8004908 <HAL_TIM_ConfigClockSource+0x1a8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d809      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0xa4>
 80047f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f4:	d02e      	beq.n	8004854 <HAL_TIM_ConfigClockSource+0xf4>
 80047f6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80047fa:	d06e      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x17a>
 80047fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004800:	d074      	beq.n	80048ec <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8004802:	e074      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8004804:	4a41      	ldr	r2, [pc, #260]	; (800490c <HAL_TIM_ConfigClockSource+0x1ac>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d067      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x17a>
 800480a:	4a40      	ldr	r2, [pc, #256]	; (800490c <HAL_TIM_ConfigClockSource+0x1ac>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d803      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0xb8>
 8004810:	4a3f      	ldr	r2, [pc, #252]	; (8004910 <HAL_TIM_ConfigClockSource+0x1b0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d061      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8004816:	e06a      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8004818:	4a3e      	ldr	r2, [pc, #248]	; (8004914 <HAL_TIM_ConfigClockSource+0x1b4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d05d      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x17a>
 800481e:	4a3e      	ldr	r2, [pc, #248]	; (8004918 <HAL_TIM_ConfigClockSource+0x1b8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d05a      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8004824:	e063      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6899      	ldr	r1, [r3, #8]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f000 ff41 	bl	80056bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004848:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	609a      	str	r2, [r3, #8]
      break;
 8004852:	e04c      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	6899      	ldr	r1, [r3, #8]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f000 ff2a 	bl	80056bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004876:	609a      	str	r2, [r3, #8]
      break;
 8004878:	e039      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	461a      	mov	r2, r3
 8004888:	f000 fde6 	bl	8005458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2150      	movs	r1, #80	; 0x50
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fef5 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004898:	e029      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f000 fe42 	bl	8005530 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2160      	movs	r1, #96	; 0x60
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fee5 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 80048b8:	e019      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6859      	ldr	r1, [r3, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	461a      	mov	r2, r3
 80048c8:	f000 fdc6 	bl	8005458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2140      	movs	r1, #64	; 0x40
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fed5 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 80048d8:	e009      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f000 fecc 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 80048ea:	e000      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x18e>
      break;
 80048ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	00100020 	.word	0x00100020
 800490c:	00100040 	.word	0x00100040
 8004910:	00100030 	.word	0x00100030
 8004914:	00100060 	.word	0x00100060
 8004918:	00100070 	.word	0x00100070

0800491c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004930:	2302      	movs	r3, #2
 8004932:	e031      	b.n	8004998 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fc6e 	bl	8005228 <TIM_SlaveTimer_SetConfig>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e018      	b.n	8004998 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004974:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004984:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff ffe8 	bl	8004a04 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d103      	bne.n	8004a64 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	771a      	strb	r2, [r3, #28]
 8004a62:	e019      	b.n	8004a98 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d103      	bne.n	8004a76 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2202      	movs	r2, #2
 8004a72:	771a      	strb	r2, [r3, #28]
 8004a74:	e010      	b.n	8004a98 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d103      	bne.n	8004a88 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2204      	movs	r2, #4
 8004a84:	771a      	strb	r2, [r3, #28]
 8004a86:	e007      	b.n	8004a98 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d102      	bne.n	8004a98 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2208      	movs	r2, #8
 8004a96:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff ff8b 	bl	80049b4 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d103      	bne.n	8004ad4 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	771a      	strb	r2, [r3, #28]
 8004ad2:	e019      	b.n	8004b08 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d103      	bne.n	8004ae6 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	771a      	strb	r2, [r3, #28]
 8004ae4:	e010      	b.n	8004b08 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d103      	bne.n	8004af8 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2204      	movs	r2, #4
 8004af4:	771a      	strb	r2, [r3, #28]
 8004af6:	e007      	b.n	8004b08 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d102      	bne.n	8004b08 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2208      	movs	r2, #8
 8004b06:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff ff5d 	bl	80049c8 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a3c      	ldr	r2, [pc, #240]	; (8004c20 <TIM_Base_SetConfig+0x104>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00f      	beq.n	8004b54 <TIM_Base_SetConfig+0x38>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3a:	d00b      	beq.n	8004b54 <TIM_Base_SetConfig+0x38>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a39      	ldr	r2, [pc, #228]	; (8004c24 <TIM_Base_SetConfig+0x108>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d007      	beq.n	8004b54 <TIM_Base_SetConfig+0x38>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a38      	ldr	r2, [pc, #224]	; (8004c28 <TIM_Base_SetConfig+0x10c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_Base_SetConfig+0x38>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a37      	ldr	r2, [pc, #220]	; (8004c2c <TIM_Base_SetConfig+0x110>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d108      	bne.n	8004b66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a2d      	ldr	r2, [pc, #180]	; (8004c20 <TIM_Base_SetConfig+0x104>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01b      	beq.n	8004ba6 <TIM_Base_SetConfig+0x8a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b74:	d017      	beq.n	8004ba6 <TIM_Base_SetConfig+0x8a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a2a      	ldr	r2, [pc, #168]	; (8004c24 <TIM_Base_SetConfig+0x108>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <TIM_Base_SetConfig+0x8a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a29      	ldr	r2, [pc, #164]	; (8004c28 <TIM_Base_SetConfig+0x10c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00f      	beq.n	8004ba6 <TIM_Base_SetConfig+0x8a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a28      	ldr	r2, [pc, #160]	; (8004c2c <TIM_Base_SetConfig+0x110>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00b      	beq.n	8004ba6 <TIM_Base_SetConfig+0x8a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a27      	ldr	r2, [pc, #156]	; (8004c30 <TIM_Base_SetConfig+0x114>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d007      	beq.n	8004ba6 <TIM_Base_SetConfig+0x8a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a26      	ldr	r2, [pc, #152]	; (8004c34 <TIM_Base_SetConfig+0x118>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_Base_SetConfig+0x8a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a25      	ldr	r2, [pc, #148]	; (8004c38 <TIM_Base_SetConfig+0x11c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d108      	bne.n	8004bb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a10      	ldr	r2, [pc, #64]	; (8004c20 <TIM_Base_SetConfig+0x104>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00f      	beq.n	8004c04 <TIM_Base_SetConfig+0xe8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a11      	ldr	r2, [pc, #68]	; (8004c2c <TIM_Base_SetConfig+0x110>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_Base_SetConfig+0xe8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a10      	ldr	r2, [pc, #64]	; (8004c30 <TIM_Base_SetConfig+0x114>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_Base_SetConfig+0xe8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a0f      	ldr	r2, [pc, #60]	; (8004c34 <TIM_Base_SetConfig+0x118>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0xe8>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <TIM_Base_SetConfig+0x11c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d103      	bne.n	8004c0c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	615a      	str	r2, [r3, #20]
}
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800
 8004c2c:	40013400 	.word	0x40013400
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40014400 	.word	0x40014400
 8004c38:	40014800 	.word	0x40014800

08004c3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f023 0201 	bic.w	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 0302 	bic.w	r3, r3, #2
 8004c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a2c      	ldr	r2, [pc, #176]	; (8004d48 <TIM_OC1_SetConfig+0x10c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00f      	beq.n	8004cbc <TIM_OC1_SetConfig+0x80>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a2b      	ldr	r2, [pc, #172]	; (8004d4c <TIM_OC1_SetConfig+0x110>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00b      	beq.n	8004cbc <TIM_OC1_SetConfig+0x80>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a2a      	ldr	r2, [pc, #168]	; (8004d50 <TIM_OC1_SetConfig+0x114>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <TIM_OC1_SetConfig+0x80>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a29      	ldr	r2, [pc, #164]	; (8004d54 <TIM_OC1_SetConfig+0x118>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_OC1_SetConfig+0x80>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a28      	ldr	r2, [pc, #160]	; (8004d58 <TIM_OC1_SetConfig+0x11c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d10c      	bne.n	8004cd6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f023 0308 	bic.w	r3, r3, #8
 8004cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f023 0304 	bic.w	r3, r3, #4
 8004cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1b      	ldr	r2, [pc, #108]	; (8004d48 <TIM_OC1_SetConfig+0x10c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00f      	beq.n	8004cfe <TIM_OC1_SetConfig+0xc2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <TIM_OC1_SetConfig+0x110>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <TIM_OC1_SetConfig+0xc2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <TIM_OC1_SetConfig+0x114>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <TIM_OC1_SetConfig+0xc2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <TIM_OC1_SetConfig+0x118>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d003      	beq.n	8004cfe <TIM_OC1_SetConfig+0xc2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <TIM_OC1_SetConfig+0x11c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d111      	bne.n	8004d22 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40012c00 	.word	0x40012c00
 8004d4c:	40013400 	.word	0x40013400
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800

08004d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f023 0210 	bic.w	r2, r3, #16
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0320 	bic.w	r3, r3, #32
 8004daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a28      	ldr	r2, [pc, #160]	; (8004e5c <TIM_OC2_SetConfig+0x100>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_OC2_SetConfig+0x6c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a27      	ldr	r2, [pc, #156]	; (8004e60 <TIM_OC2_SetConfig+0x104>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d10d      	bne.n	8004de4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a1d      	ldr	r2, [pc, #116]	; (8004e5c <TIM_OC2_SetConfig+0x100>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00f      	beq.n	8004e0c <TIM_OC2_SetConfig+0xb0>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a1c      	ldr	r2, [pc, #112]	; (8004e60 <TIM_OC2_SetConfig+0x104>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <TIM_OC2_SetConfig+0xb0>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a1b      	ldr	r2, [pc, #108]	; (8004e64 <TIM_OC2_SetConfig+0x108>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_OC2_SetConfig+0xb0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a1a      	ldr	r2, [pc, #104]	; (8004e68 <TIM_OC2_SetConfig+0x10c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_OC2_SetConfig+0xb0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <TIM_OC2_SetConfig+0x110>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d113      	bne.n	8004e34 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40013400 	.word	0x40013400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40014400 	.word	0x40014400
 8004e6c:	40014800 	.word	0x40014800

08004e70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a27      	ldr	r2, [pc, #156]	; (8004f6c <TIM_OC3_SetConfig+0xfc>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_OC3_SetConfig+0x6a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <TIM_OC3_SetConfig+0x100>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d10d      	bne.n	8004ef6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a1c      	ldr	r2, [pc, #112]	; (8004f6c <TIM_OC3_SetConfig+0xfc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00f      	beq.n	8004f1e <TIM_OC3_SetConfig+0xae>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a1b      	ldr	r2, [pc, #108]	; (8004f70 <TIM_OC3_SetConfig+0x100>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00b      	beq.n	8004f1e <TIM_OC3_SetConfig+0xae>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a1a      	ldr	r2, [pc, #104]	; (8004f74 <TIM_OC3_SetConfig+0x104>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d007      	beq.n	8004f1e <TIM_OC3_SetConfig+0xae>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <TIM_OC3_SetConfig+0x108>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <TIM_OC3_SetConfig+0xae>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <TIM_OC3_SetConfig+0x10c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d113      	bne.n	8004f46 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	621a      	str	r2, [r3, #32]
}
 8004f60:	bf00      	nop
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40013400 	.word	0x40013400
 8004f74:	40014000 	.word	0x40014000
 8004f78:	40014400 	.word	0x40014400
 8004f7c:	40014800 	.word	0x40014800

08004f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	031b      	lsls	r3, r3, #12
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a28      	ldr	r2, [pc, #160]	; (8005080 <TIM_OC4_SetConfig+0x100>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_OC4_SetConfig+0x6c>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a27      	ldr	r2, [pc, #156]	; (8005084 <TIM_OC4_SetConfig+0x104>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d10d      	bne.n	8005008 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005006:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <TIM_OC4_SetConfig+0x100>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00f      	beq.n	8005030 <TIM_OC4_SetConfig+0xb0>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a1c      	ldr	r2, [pc, #112]	; (8005084 <TIM_OC4_SetConfig+0x104>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00b      	beq.n	8005030 <TIM_OC4_SetConfig+0xb0>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <TIM_OC4_SetConfig+0x108>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d007      	beq.n	8005030 <TIM_OC4_SetConfig+0xb0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a1a      	ldr	r2, [pc, #104]	; (800508c <TIM_OC4_SetConfig+0x10c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_OC4_SetConfig+0xb0>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a19      	ldr	r2, [pc, #100]	; (8005090 <TIM_OC4_SetConfig+0x110>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d113      	bne.n	8005058 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005036:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800503e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	019b      	lsls	r3, r3, #6
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	019b      	lsls	r3, r3, #6
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40013400 	.word	0x40013400
 8005088:	40014000 	.word	0x40014000
 800508c:	40014400 	.word	0x40014400
 8005090:	40014800 	.word	0x40014800

08005094 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	041b      	lsls	r3, r3, #16
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a17      	ldr	r2, [pc, #92]	; (8005148 <TIM_OC5_SetConfig+0xb4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00f      	beq.n	800510e <TIM_OC5_SetConfig+0x7a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a16      	ldr	r2, [pc, #88]	; (800514c <TIM_OC5_SetConfig+0xb8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00b      	beq.n	800510e <TIM_OC5_SetConfig+0x7a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a15      	ldr	r2, [pc, #84]	; (8005150 <TIM_OC5_SetConfig+0xbc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <TIM_OC5_SetConfig+0x7a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a14      	ldr	r2, [pc, #80]	; (8005154 <TIM_OC5_SetConfig+0xc0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <TIM_OC5_SetConfig+0x7a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a13      	ldr	r2, [pc, #76]	; (8005158 <TIM_OC5_SetConfig+0xc4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d109      	bne.n	8005122 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005114:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40013400 	.word	0x40013400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800

0800515c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	051b      	lsls	r3, r3, #20
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a18      	ldr	r2, [pc, #96]	; (8005214 <TIM_OC6_SetConfig+0xb8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00f      	beq.n	80051d8 <TIM_OC6_SetConfig+0x7c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a17      	ldr	r2, [pc, #92]	; (8005218 <TIM_OC6_SetConfig+0xbc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00b      	beq.n	80051d8 <TIM_OC6_SetConfig+0x7c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a16      	ldr	r2, [pc, #88]	; (800521c <TIM_OC6_SetConfig+0xc0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d007      	beq.n	80051d8 <TIM_OC6_SetConfig+0x7c>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a15      	ldr	r2, [pc, #84]	; (8005220 <TIM_OC6_SetConfig+0xc4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <TIM_OC6_SetConfig+0x7c>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a14      	ldr	r2, [pc, #80]	; (8005224 <TIM_OC6_SetConfig+0xc8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d109      	bne.n	80051ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	029b      	lsls	r3, r3, #10
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40013400 	.word	0x40013400
 800521c:	40014000 	.word	0x40014000
 8005220:	40014400 	.word	0x40014400
 8005224:	40014800 	.word	0x40014800

08005228 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005244:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005256:	f023 0307 	bic.w	r3, r3, #7
 800525a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b60      	cmp	r3, #96	; 0x60
 8005274:	d06d      	beq.n	8005352 <TIM_SlaveTimer_SetConfig+0x12a>
 8005276:	2b60      	cmp	r3, #96	; 0x60
 8005278:	d80f      	bhi.n	800529a <TIM_SlaveTimer_SetConfig+0x72>
 800527a:	2b20      	cmp	r3, #32
 800527c:	d073      	beq.n	8005366 <TIM_SlaveTimer_SetConfig+0x13e>
 800527e:	2b20      	cmp	r3, #32
 8005280:	d804      	bhi.n	800528c <TIM_SlaveTimer_SetConfig+0x64>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d06f      	beq.n	8005366 <TIM_SlaveTimer_SetConfig+0x13e>
 8005286:	2b10      	cmp	r3, #16
 8005288:	d06d      	beq.n	8005366 <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800528a:	e06d      	b.n	8005368 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 800528c:	2b40      	cmp	r3, #64	; 0x40
 800528e:	d028      	beq.n	80052e2 <TIM_SlaveTimer_SetConfig+0xba>
 8005290:	2b50      	cmp	r3, #80	; 0x50
 8005292:	d054      	beq.n	800533e <TIM_SlaveTimer_SetConfig+0x116>
 8005294:	2b30      	cmp	r3, #48	; 0x30
 8005296:	d066      	beq.n	8005366 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8005298:	e066      	b.n	8005368 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 800529a:	4a36      	ldr	r2, [pc, #216]	; (8005374 <TIM_SlaveTimer_SetConfig+0x14c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d062      	beq.n	8005366 <TIM_SlaveTimer_SetConfig+0x13e>
 80052a0:	4a34      	ldr	r2, [pc, #208]	; (8005374 <TIM_SlaveTimer_SetConfig+0x14c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d808      	bhi.n	80052b8 <TIM_SlaveTimer_SetConfig+0x90>
 80052a6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80052aa:	d05c      	beq.n	8005366 <TIM_SlaveTimer_SetConfig+0x13e>
 80052ac:	4a32      	ldr	r2, [pc, #200]	; (8005378 <TIM_SlaveTimer_SetConfig+0x150>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d059      	beq.n	8005366 <TIM_SlaveTimer_SetConfig+0x13e>
 80052b2:	2b70      	cmp	r3, #112	; 0x70
 80052b4:	d00a      	beq.n	80052cc <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 80052b6:	e057      	b.n	8005368 <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 80052b8:	4a30      	ldr	r2, [pc, #192]	; (800537c <TIM_SlaveTimer_SetConfig+0x154>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d053      	beq.n	8005366 <TIM_SlaveTimer_SetConfig+0x13e>
 80052be:	4a30      	ldr	r2, [pc, #192]	; (8005380 <TIM_SlaveTimer_SetConfig+0x158>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d050      	beq.n	8005366 <TIM_SlaveTimer_SetConfig+0x13e>
 80052c4:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <TIM_SlaveTimer_SetConfig+0x15c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d04d      	beq.n	8005366 <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 80052ca:	e04d      	b.n	8005368 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68d9      	ldr	r1, [r3, #12]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f000 f9ee 	bl	80056bc <TIM_ETR_SetConfig>
      break;
 80052e0:	e042      	b.n	8005368 <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d004      	beq.n	80052f4 <TIM_SlaveTimer_SetConfig+0xcc>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80052f2:	d101      	bne.n	80052f8 <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e038      	b.n	800536a <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6a1a      	ldr	r2, [r3, #32]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0201 	bic.w	r2, r2, #1
 800530e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800531e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	621a      	str	r2, [r3, #32]
      break;
 800533c:	e014      	b.n	8005368 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6899      	ldr	r1, [r3, #8]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	461a      	mov	r2, r3
 800534c:	f000 f884 	bl	8005458 <TIM_TI1_ConfigInputStage>
      break;
 8005350:	e00a      	b.n	8005368 <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	6899      	ldr	r1, [r3, #8]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	461a      	mov	r2, r3
 8005360:	f000 f8e6 	bl	8005530 <TIM_TI2_ConfigInputStage>
      break;
 8005364:	e000      	b.n	8005368 <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8005366:	bf00      	nop
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	00100030 	.word	0x00100030
 8005378:	00100020 	.word	0x00100020
 800537c:	00100060 	.word	0x00100060
 8005380:	00100070 	.word	0x00100070
 8005384:	00100040 	.word	0x00100040

08005388 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f023 0201 	bic.w	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a24      	ldr	r2, [pc, #144]	; (8005444 <TIM_TI1_SetConfig+0xbc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <TIM_TI1_SetConfig+0x56>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d00f      	beq.n	80053de <TIM_TI1_SetConfig+0x56>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4a21      	ldr	r2, [pc, #132]	; (8005448 <TIM_TI1_SetConfig+0xc0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00b      	beq.n	80053de <TIM_TI1_SetConfig+0x56>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a20      	ldr	r2, [pc, #128]	; (800544c <TIM_TI1_SetConfig+0xc4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <TIM_TI1_SetConfig+0x56>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <TIM_TI1_SetConfig+0xc8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_TI1_SetConfig+0x56>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <TIM_TI1_SetConfig+0xcc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d101      	bne.n	80053e2 <TIM_TI1_SetConfig+0x5a>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <TIM_TI1_SetConfig+0x5c>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0303 	bic.w	r3, r3, #3
 80053ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e003      	b.n	8005402 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	b2db      	uxtb	r3, r3
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f023 030a 	bic.w	r3, r3, #10
 800541c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f003 030a 	and.w	r3, r3, #10
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40012c00 	.word	0x40012c00
 8005448:	40000400 	.word	0x40000400
 800544c:	40000800 	.word	0x40000800
 8005450:	40013400 	.word	0x40013400
 8005454:	40014000 	.word	0x40014000

08005458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0201 	bic.w	r2, r3, #1
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 030a 	bic.w	r3, r3, #10
 8005494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b087      	sub	sp, #28
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f023 0210 	bic.w	r2, r3, #16
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	021b      	lsls	r3, r3, #8
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	031b      	lsls	r3, r3, #12
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005508:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f023 0210 	bic.w	r2, r3, #16
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800555a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	031b      	lsls	r3, r3, #12
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800556c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	621a      	str	r2, [r3, #32]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f023 0303 	bic.w	r3, r3, #3
 80055bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80055e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	621a      	str	r2, [r3, #32]
}
 80055fc:	bf00      	nop
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005634:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005646:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	031b      	lsls	r3, r3, #12
 800564c:	b29b      	uxth	r3, r3
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800565a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	031b      	lsls	r3, r3, #12
 8005660:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f043 0307 	orr.w	r3, r3, #7
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	609a      	str	r2, [r3, #8]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	021a      	lsls	r2, r3, #8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	431a      	orrs	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	609a      	str	r2, [r3, #8]
}
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 031f 	and.w	r3, r3, #31
 800570e:	2201      	movs	r2, #1
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	43db      	mvns	r3, r3
 800571e:	401a      	ands	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1a      	ldr	r2, [r3, #32]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	fa01 f303 	lsl.w	r3, r1, r3
 8005734:	431a      	orrs	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2204      	movs	r2, #4
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f968 	bl	8005a30 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800576e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_TIMEx_PWMN_Start+0x5c>)
 8005778:	4013      	ands	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b06      	cmp	r3, #6
 8005780:	d00b      	beq.n	800579a <HAL_TIMEx_PWMN_Start+0x52>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005788:	d007      	beq.n	800579a <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0201 	orr.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	00010007 	.word	0x00010007

080057a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057bc:	2302      	movs	r3, #2
 80057be:	e047      	b.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1d      	ldr	r2, [pc, #116]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d108      	bne.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800580c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005810:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005822:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	4313      	orrs	r3, r2
 800582c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	40012c00 	.word	0x40012c00
 8005860:	40013400 	.word	0x40013400

08005864 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800587c:	2302      	movs	r3, #2
 800587e:	e087      	b.n	8005990 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	041b      	lsls	r3, r3, #16
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a27      	ldr	r2, [pc, #156]	; (800599c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a25      	ldr	r2, [pc, #148]	; (80059a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d106      	bne.n	800591c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1e      	ldr	r2, [pc, #120]	; (800599c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d126      	bne.n	800597e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	051b      	lsls	r3, r3, #20
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a0e      	ldr	r2, [pc, #56]	; (800599c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a0d      	ldr	r2, [pc, #52]	; (80059a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d106      	bne.n	800597e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40012c00 	.word	0x40012c00
 80059a0:	40013400 	.word	0x40013400

080059a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 031f 	and.w	r3, r3, #31
 8005a42:	2204      	movs	r2, #4
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a1a      	ldr	r2, [r3, #32]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	401a      	ands	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 031f 	and.w	r3, r3, #31
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	fa01 f303 	lsl.w	r3, r1, r3
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b089      	sub	sp, #36	; 0x24
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	fa93 f3a3 	rbit	r3, r3
 8005a94:	613b      	str	r3, [r7, #16]
  return result;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	fab3 f383 	clz	r3, r3
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	2103      	movs	r1, #3
 8005aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	401a      	ands	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	fa93 f3a3 	rbit	r3, r3
 8005ab4:	61bb      	str	r3, [r7, #24]
  return result;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	fab3 f383 	clz	r3, r3
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	601a      	str	r2, [r3, #0]
}
 8005acc:	bf00      	nop
 8005ace:	3724      	adds	r7, #36	; 0x24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	43db      	mvns	r3, r3
 8005aec:	401a      	ands	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	fb01 f303 	mul.w	r3, r1, r3
 8005af6:	431a      	orrs	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	605a      	str	r2, [r3, #4]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b089      	sub	sp, #36	; 0x24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	fa93 f3a3 	rbit	r3, r3
 8005b22:	613b      	str	r3, [r7, #16]
  return result;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	fab3 f383 	clz	r3, r3
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	2103      	movs	r1, #3
 8005b30:	fa01 f303 	lsl.w	r3, r1, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	401a      	ands	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	fa93 f3a3 	rbit	r3, r3
 8005b42:	61bb      	str	r3, [r7, #24]
  return result;
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	fab3 f383 	clz	r3, r3
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	fa01 f303 	lsl.w	r3, r1, r3
 8005b54:	431a      	orrs	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005b5a:	bf00      	nop
 8005b5c:	3724      	adds	r7, #36	; 0x24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b089      	sub	sp, #36	; 0x24
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	fa93 f3a3 	rbit	r3, r3
 8005b80:	613b      	str	r3, [r7, #16]
  return result;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	fab3 f383 	clz	r3, r3
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	2103      	movs	r1, #3
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	401a      	ands	r2, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	fa93 f3a3 	rbit	r3, r3
 8005ba0:	61bb      	str	r3, [r7, #24]
  return result;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	fab3 f383 	clz	r3, r3
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	60da      	str	r2, [r3, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	3724      	adds	r7, #36	; 0x24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b089      	sub	sp, #36	; 0x24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1a      	ldr	r2, [r3, #32]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	fa93 f3a3 	rbit	r3, r3
 8005bde:	613b      	str	r3, [r7, #16]
  return result;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	fab3 f383 	clz	r3, r3
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	210f      	movs	r1, #15
 8005bec:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	fa93 f3a3 	rbit	r3, r3
 8005bfe:	61bb      	str	r3, [r7, #24]
  return result;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	fab3 f383 	clz	r3, r3
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c10:	431a      	orrs	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005c16:	bf00      	nop
 8005c18:	3724      	adds	r7, #36	; 0x24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b089      	sub	sp, #36	; 0x24
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	0a1b      	lsrs	r3, r3, #8
 8005c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	fa93 f3a3 	rbit	r3, r3
 8005c3e:	613b      	str	r3, [r7, #16]
  return result;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	fab3 f383 	clz	r3, r3
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	210f      	movs	r1, #15
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	401a      	ands	r2, r3
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	0a1b      	lsrs	r3, r3, #8
 8005c58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	fa93 f3a3 	rbit	r3, r3
 8005c60:	61bb      	str	r3, [r7, #24]
  return result;
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	fab3 f383 	clz	r3, r3
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c72:	431a      	orrs	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005c78:	bf00      	nop
 8005c7a:	3724      	adds	r7, #36	; 0x24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	fa93 f3a3 	rbit	r3, r3
 8005c9a:	60bb      	str	r3, [r7, #8]
  return result;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	fab3 f383 	clz	r3, r3
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005ca6:	e040      	b.n	8005d2a <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	2101      	movs	r1, #1
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d032      	beq.n	8005d24 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6939      	ldr	r1, [r7, #16]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fed7 	bl	8005a7a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d003      	beq.n	8005cdc <LL_GPIO_Init+0x58>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d106      	bne.n	8005cea <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6939      	ldr	r1, [r7, #16]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ff0f 	bl	8005b08 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	6939      	ldr	r1, [r7, #16]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff ff37 	bl	8005b66 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d111      	bne.n	8005d24 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2bff      	cmp	r3, #255	; 0xff
 8005d04:	d807      	bhi.n	8005d16 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6939      	ldr	r1, [r7, #16]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff ff58 	bl	8005bc4 <LL_GPIO_SetAFPin_0_7>
 8005d14:	e006      	b.n	8005d24 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6939      	ldr	r1, [r7, #16]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff ff7f 	bl	8005c22 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	3301      	adds	r3, #1
 8005d28:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1b7      	bne.n	8005ca8 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d003      	beq.n	8005d48 <LL_GPIO_Init+0xc4>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d107      	bne.n	8005d58 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	6819      	ldr	r1, [r3, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff fec0 	bl	8005ad8 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <LL_GPIO_SetPinMode>:
{
 8005d62:	b480      	push	{r7}
 8005d64:	b089      	sub	sp, #36	; 0x24
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	fa93 f3a3 	rbit	r3, r3
 8005d7c:	613b      	str	r3, [r7, #16]
  return result;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	fab3 f383 	clz	r3, r3
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	2103      	movs	r1, #3
 8005d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	401a      	ands	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	fa93 f3a3 	rbit	r3, r3
 8005d9c:	61bb      	str	r3, [r7, #24]
  return result;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	fab3 f383 	clz	r3, r3
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	fa01 f303 	lsl.w	r3, r1, r3
 8005dae:	431a      	orrs	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	601a      	str	r2, [r3, #0]
}
 8005db4:	bf00      	nop
 8005db6:	3724      	adds	r7, #36	; 0x24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005de6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005de8:	4907      	ldr	r1, [pc, #28]	; (8005e08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005df2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4013      	ands	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
}
 8005dfc:	bf00      	nop
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40021000 	.word	0x40021000

08005e0c <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//////////////////////////////////PHASE 1//////////////////////
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
	if (x < in_min){
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	da01      	bge.n	8005e26 <map+0x1a>
		x = in_min;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	60fb      	str	r3, [r7, #12]
	}
	if (x > in_max){
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	dd01      	ble.n	8005e32 <map+0x26>
		x = in_max;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
	}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	69b9      	ldr	r1, [r7, #24]
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	1a8a      	subs	r2, r1, r2
 8005e3e:	fb02 f203 	mul.w	r2, r2, r3
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	1acb      	subs	r3, r1, r3
 8005e48:	fb92 f2f3 	sdiv	r2, r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	4413      	add	r3, r2

}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <phaseBPWM>:
void phaseBPWM() {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0




		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_12, LL_GPIO_MODE_ALTERNATE); // low
 8005e60:	2202      	movs	r2, #2
 8005e62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e6a:	f7ff ff7a 	bl	8005d62 <LL_GPIO_SetPinMode>

		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_ALTERNATE);  // high
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e78:	f7ff ff73 	bl	8005d62 <LL_GPIO_SetPinMode>

	}
 8005e7c:	bf00      	nop
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <phaseBFLOAT>:


void phaseBFLOAT() {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0




		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_12, LL_GPIO_MODE_OUTPUT);
 8005e84:	2201      	movs	r2, #1
 8005e86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e8e:	f7ff ff68 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOA->BRR = GPIO_PIN_12;
 8005e92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e9a:	629a      	str	r2, [r3, #40]	; 0x28
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT);
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ea6:	f7ff ff5c 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOA->BRR = GPIO_PIN_9;
 8005eaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8005eb4:	bf00      	nop
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <phaseBLOW>:


void phaseBLOW() {
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0


	        // low mosfet on
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_12, LL_GPIO_MODE_OUTPUT);
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ec6:	f7ff ff4c 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOA->BSRR = GPIO_PIN_12;
 8005eca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ece:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ed2:	619a      	str	r2, [r3, #24]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT);
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ede:	f7ff ff40 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOA->BRR = GPIO_PIN_9;
 8005ee2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eea:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8005eec:	bf00      	nop
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <phaseAPWM>:


//////////////////////////////PHASE 2//////////////////////////////////////////////////


void phaseAPWM() {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0



		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_11, LL_GPIO_MODE_ALTERNATE);
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005efe:	f7ff ff30 	bl	8005d62 <LL_GPIO_SetPinMode>

		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_ALTERNATE);           //HIGH
 8005f02:	2202      	movs	r2, #2
 8005f04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f0c:	f7ff ff29 	bl	8005d62 <LL_GPIO_SetPinMode>

	}
 8005f10:	bf00      	nop
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <phaseAFLOAT>:


void phaseAFLOAT() {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0


	         // floating
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_11, LL_GPIO_MODE_OUTPUT);           // LOW
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f22:	f7ff ff1e 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOA->BRR = GPIO_PIN_11;
 8005f26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT);            //HIGH
 8005f30:	2201      	movs	r2, #1
 8005f32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f3a:	f7ff ff12 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOA->BRR = GPIO_PIN_8;
 8005f3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f46:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8005f48:	bf00      	nop
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <phaseALOW>:



void phaseALOW() {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0


	            // lowside
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_11, LL_GPIO_MODE_OUTPUT);
 8005f50:	2201      	movs	r2, #1
 8005f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f5a:	f7ff ff02 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOA->BSRR = GPIO_PIN_11;
 8005f5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f66:	619a      	str	r2, [r3, #24]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT);
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f72:	f7ff fef6 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOA->BRR = GPIO_PIN_8;
 8005f76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f7e:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8005f80:	bf00      	nop
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <phaseCPWM>:

///////////////////////////////////////////////PHASE 3 /////////////////////////////////////////////////



void phaseCPWM() {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0



		LL_GPIO_SetPinMode(GPIOF, GPIO_PIN_0, LL_GPIO_MODE_ALTERNATE); //low
 8005f88:	2202      	movs	r2, #2
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	4805      	ldr	r0, [pc, #20]	; (8005fa4 <phaseCPWM+0x20>)
 8005f8e:	f7ff fee8 	bl	8005d62 <LL_GPIO_SetPinMode>

		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_ALTERNATE);//high
 8005f92:	2202      	movs	r2, #2
 8005f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f9c:	f7ff fee1 	bl	8005d62 <LL_GPIO_SetPinMode>

	}
 8005fa0:	bf00      	nop
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	48001400 	.word	0x48001400

08005fa8 <phaseCFLOAT>:



void phaseCFLOAT() {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0


		LL_GPIO_SetPinMode(GPIOF, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT);
 8005fac:	2201      	movs	r2, #1
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4809      	ldr	r0, [pc, #36]	; (8005fd8 <phaseCFLOAT+0x30>)
 8005fb2:	f7ff fed6 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOF->BRR = GPIO_PIN_0;
 8005fb6:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <phaseCFLOAT+0x30>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	629a      	str	r2, [r3, #40]	; 0x28
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT);
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fc6:	f7ff fecc 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOA->BRR = GPIO_PIN_10;
 8005fca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8005fd4:	bf00      	nop
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	48001400 	.word	0x48001400

08005fdc <phaseCLOW>:



void phaseCLOW() {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0



		LL_GPIO_SetPinMode(GPIOF, GPIO_PIN_0, LL_GPIO_MODE_OUTPUT); // low
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	4809      	ldr	r0, [pc, #36]	; (800600c <phaseCLOW+0x30>)
 8005fe6:	f7ff febc 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOF->BSRR = GPIO_PIN_0;
 8005fea:	4b08      	ldr	r3, [pc, #32]	; (800600c <phaseCLOW+0x30>)
 8005fec:	2201      	movs	r2, #1
 8005fee:	619a      	str	r2, [r3, #24]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT); //high
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ffa:	f7ff feb2 	bl	8005d62 <LL_GPIO_SetPinMode>
		GPIOA->BRR = GPIO_PIN_10;
 8005ffe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006006:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8006008:	bf00      	nop
 800600a:	bd80      	pop	{r7, pc}
 800600c:	48001400 	.word	0x48001400

08006010 <comStep>:



void  comStep (int newStep){
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
//TIM14->CNT = 0;
switch(newStep)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3b01      	subs	r3, #1
 800601c:	2b05      	cmp	r3, #5
 800601e:	d839      	bhi.n	8006094 <comStep+0x84>
 8006020:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <comStep+0x18>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	08006041 	.word	0x08006041
 800602c:	0800604f 	.word	0x0800604f
 8006030:	0800605d 	.word	0x0800605d
 8006034:	0800606b 	.word	0x0800606b
 8006038:	08006079 	.word	0x08006079
 800603c:	08006087 	.word	0x08006087
{

        case 1:			//A-B
        	phaseAPWM();
 8006040:	f7ff ff56 	bl	8005ef0 <phaseAPWM>
        	phaseBLOW();
 8006044:	f7ff ff38 	bl	8005eb8 <phaseBLOW>
        	phaseCFLOAT();
 8006048:	f7ff ffae 	bl	8005fa8 <phaseCFLOAT>
        	break;
 800604c:	e022      	b.n	8006094 <comStep+0x84>


        case 2:		// C-B
        	phaseAFLOAT();
 800604e:	f7ff ff61 	bl	8005f14 <phaseAFLOAT>
        	phaseBLOW();
 8006052:	f7ff ff31 	bl	8005eb8 <phaseBLOW>
        	phaseCPWM();
 8006056:	f7ff ff95 	bl	8005f84 <phaseCPWM>
        	break;
 800605a:	e01b      	b.n	8006094 <comStep+0x84>



        case 3:	// C-A
        	phaseALOW();
 800605c:	f7ff ff76 	bl	8005f4c <phaseALOW>
        	phaseBFLOAT();
 8006060:	f7ff ff0e 	bl	8005e80 <phaseBFLOAT>
        	phaseCPWM();
 8006064:	f7ff ff8e 	bl	8005f84 <phaseCPWM>
        	break;
 8006068:	e014      	b.n	8006094 <comStep+0x84>


        case 4:// B-A
        	phaseALOW();
 800606a:	f7ff ff6f 	bl	8005f4c <phaseALOW>
        	phaseBPWM();
 800606e:	f7ff fef5 	bl	8005e5c <phaseBPWM>
        	phaseCFLOAT();
 8006072:	f7ff ff99 	bl	8005fa8 <phaseCFLOAT>
        	break;
 8006076:	e00d      	b.n	8006094 <comStep+0x84>


        case 5:    // B-C
        	phaseAFLOAT();
 8006078:	f7ff ff4c 	bl	8005f14 <phaseAFLOAT>
        	phaseBPWM();
 800607c:	f7ff feee 	bl	8005e5c <phaseBPWM>
        	phaseCLOW();
 8006080:	f7ff ffac 	bl	8005fdc <phaseCLOW>
        	break;
 8006084:	e006      	b.n	8006094 <comStep+0x84>


        case 6:      // A-C
        	phaseAPWM();
 8006086:	f7ff ff33 	bl	8005ef0 <phaseAPWM>
        	phaseBFLOAT();
 800608a:	f7ff fef9 	bl	8005e80 <phaseBFLOAT>
        	phaseCLOW();
 800608e:	f7ff ffa5 	bl	8005fdc <phaseCLOW>
        	break;
 8006092:	bf00      	nop
	}

//stop_time = TIM14->CNT;

}
 8006094:	bf00      	nop
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <allOff>:


void allOff() {                   // coast
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
	phaseAFLOAT();
 80060a0:	f7ff ff38 	bl	8005f14 <phaseAFLOAT>
	phaseBFLOAT();
 80060a4:	f7ff feec 	bl	8005e80 <phaseBFLOAT>
	phaseCFLOAT();
 80060a8:	f7ff ff7e 	bl	8005fa8 <phaseCFLOAT>
}
 80060ac:	bf00      	nop
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIM_PeriodElapsedCallback>:
void fullBrake(){                     // full braking shorting all low sides
	phaseALOW();
	phaseBLOW();
	phaseCLOW();
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]

			if (htim->Instance==TIM16)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a11      	ldr	r2, [pc, #68]	; (8006104 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d11b      	bne.n	80060fa <HAL_TIM_PeriodElapsedCallback+0x4a>
			{

			if(inputSet == 1){
 80060c2:	4b11      	ldr	r3, [pc, #68]	; (8006108 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d117      	bne.n	80060fa <HAL_TIM_PeriodElapsedCallback+0x4a>
				 if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)){
 80060ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060d2:	f7fc fc0d 	bl	80028f0 <HAL_GPIO_ReadPin>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10e      	bne.n	80060fa <HAL_TIM_PeriodElapsedCallback+0x4a>

		     HAL_TIM_IC_Stop_DMA(&htim8,TIM_CHANNEL_1);
 80060dc:	2100      	movs	r1, #0
 80060de:	480b      	ldr	r0, [pc, #44]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80060e0:	f7fd ff04 	bl	8003eec <HAL_TIM_IC_Stop_DMA>
			 TIM15->CNT = 0;
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	625a      	str	r2, [r3, #36]	; 0x24
//			 for (int i = 0; i < 8; i++){
//			 							dma_buffer[i]=0;
//			 						}


				 HAL_TIM_IC_Start_DMA(&htim8, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 80060ea:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	4a09      	ldr	r2, [pc, #36]	; (8006118 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80060f2:	2100      	movs	r1, #0
 80060f4:	4805      	ldr	r0, [pc, #20]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80060f6:	f7fd fdfd 	bl	8003cf4 <HAL_TIM_IC_Start_DMA>

			 }

		}

}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40014400 	.word	0x40014400
 8006108:	2000009c 	.word	0x2000009c
 800610c:	200000c0 	.word	0x200000c0
 8006110:	40014000 	.word	0x40014000
 8006114:	20000018 	.word	0x20000018
 8006118:	200002a4 	.word	0x200002a4

0800611c <detectInput>:

void detectInput(){
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
	smallestnumber = 20000;
 8006122:	4b4e      	ldr	r3, [pc, #312]	; (800625c <detectInput+0x140>)
 8006124:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006128:	601a      	str	r2, [r3, #0]
	dshot = 0;
 800612a:	4b4d      	ldr	r3, [pc, #308]	; (8006260 <detectInput+0x144>)
 800612c:	2200      	movs	r2, #0
 800612e:	701a      	strb	r2, [r3, #0]
	proshot = 0;
 8006130:	4b4c      	ldr	r3, [pc, #304]	; (8006264 <detectInput+0x148>)
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
	multishot = 0;
 8006136:	4b4c      	ldr	r3, [pc, #304]	; (8006268 <detectInput+0x14c>)
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]
	oneshot42 = 0;
 800613c:	4b4b      	ldr	r3, [pc, #300]	; (800626c <detectInput+0x150>)
 800613e:	2200      	movs	r2, #0
 8006140:	701a      	strb	r2, [r3, #0]
	oneshot125 = 0;
 8006142:	4b4b      	ldr	r3, [pc, #300]	; (8006270 <detectInput+0x154>)
 8006144:	2200      	movs	r2, #0
 8006146:	701a      	strb	r2, [r3, #0]
	servoPwm = 0;
 8006148:	4b4a      	ldr	r3, [pc, #296]	; (8006274 <detectInput+0x158>)
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
//	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < IC_buffer_size; j++){
 800614e:	2301      	movs	r3, #1
 8006150:	607b      	str	r3, [r7, #4]
 8006152:	e011      	b.n	8006178 <detectInput+0x5c>

		if(dma_buffer[j]  < smallestnumber){ // blank space
 8006154:	4a48      	ldr	r2, [pc, #288]	; (8006278 <detectInput+0x15c>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800615c:	4a3f      	ldr	r2, [pc, #252]	; (800625c <detectInput+0x140>)
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	4293      	cmp	r3, r2
 8006162:	d206      	bcs.n	8006172 <detectInput+0x56>
			smallestnumber = dma_buffer[j];
 8006164:	4a44      	ldr	r2, [pc, #272]	; (8006278 <detectInput+0x15c>)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800616c:	461a      	mov	r2, r3
 800616e:	4b3b      	ldr	r3, [pc, #236]	; (800625c <detectInput+0x140>)
 8006170:	601a      	str	r2, [r3, #0]
	for ( int j = 1 ; j < IC_buffer_size; j++){
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3301      	adds	r3, #1
 8006176:	607b      	str	r3, [r7, #4]
 8006178:	4b40      	ldr	r3, [pc, #256]	; (800627c <detectInput+0x160>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	429a      	cmp	r2, r3
 8006180:	dbe8      	blt.n	8006154 <detectInput+0x38>
		}

	}

	if ((smallestnumber > 3)&&(smallestnumber < 20)){
 8006182:	4b36      	ldr	r3, [pc, #216]	; (800625c <detectInput+0x140>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b03      	cmp	r3, #3
 8006188:	dd10      	ble.n	80061ac <detectInput+0x90>
 800618a:	4b34      	ldr	r3, [pc, #208]	; (800625c <detectInput+0x140>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b13      	cmp	r3, #19
 8006190:	dc0c      	bgt.n	80061ac <detectInput+0x90>
		dshot = 1;
 8006192:	4b33      	ldr	r3, [pc, #204]	; (8006260 <detectInput+0x144>)
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
		TIM8->PSC = 69;
 8006198:	4b39      	ldr	r3, [pc, #228]	; (8006280 <detectInput+0x164>)
 800619a:	2245      	movs	r2, #69	; 0x45
 800619c:	629a      	str	r2, [r3, #40]	; 0x28
		IC_buffer_size = 32;
 800619e:	4b37      	ldr	r3, [pc, #220]	; (800627c <detectInput+0x160>)
 80061a0:	2220      	movs	r2, #32
 80061a2:	601a      	str	r2, [r3, #0]
		TIM16->ARR = 8000;
 80061a4:	4b37      	ldr	r3, [pc, #220]	; (8006284 <detectInput+0x168>)
 80061a6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80061aa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if ((smallestnumber > 20)&&(smallestnumber < 30)){
 80061ac:	4b2b      	ldr	r3, [pc, #172]	; (800625c <detectInput+0x140>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b14      	cmp	r3, #20
 80061b2:	dd13      	ble.n	80061dc <detectInput+0xc0>
 80061b4:	4b29      	ldr	r3, [pc, #164]	; (800625c <detectInput+0x140>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b1d      	cmp	r3, #29
 80061ba:	dc0f      	bgt.n	80061dc <detectInput+0xc0>
			dshot = 1;
 80061bc:	4b28      	ldr	r3, [pc, #160]	; (8006260 <detectInput+0x144>)
 80061be:	2201      	movs	r2, #1
 80061c0:	701a      	strb	r2, [r3, #0]
			TIM8->PSC = 113;
 80061c2:	4b2f      	ldr	r3, [pc, #188]	; (8006280 <detectInput+0x164>)
 80061c4:	2271      	movs	r2, #113	; 0x71
 80061c6:	629a      	str	r2, [r3, #40]	; 0x28
			TIM16->PSC = 4;
 80061c8:	4b2e      	ldr	r3, [pc, #184]	; (8006284 <detectInput+0x168>)
 80061ca:	2204      	movs	r2, #4
 80061cc:	629a      	str	r2, [r3, #40]	; 0x28
			TIM16->ARR = 8000;
 80061ce:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <detectInput+0x168>)
 80061d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80061d4:	62da      	str	r2, [r3, #44]	; 0x2c
			IC_buffer_size = 32;
 80061d6:	4b29      	ldr	r3, [pc, #164]	; (800627c <detectInput+0x160>)
 80061d8:	2220      	movs	r2, #32
 80061da:	601a      	str	r2, [r3, #0]
		}

	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 80061dc:	4b1f      	ldr	r3, [pc, #124]	; (800625c <detectInput+0x140>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b28      	cmp	r3, #40	; 0x28
 80061e2:	dd10      	ble.n	8006206 <detectInput+0xea>
 80061e4:	4b1d      	ldr	r3, [pc, #116]	; (800625c <detectInput+0x140>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b4f      	cmp	r3, #79	; 0x4f
 80061ea:	dc0c      	bgt.n	8006206 <detectInput+0xea>
		proshot = 1;
 80061ec:	4b1d      	ldr	r3, [pc, #116]	; (8006264 <detectInput+0x148>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]
		TIM8->PSC = 4;
 80061f2:	4b23      	ldr	r3, [pc, #140]	; (8006280 <detectInput+0x164>)
 80061f4:	2204      	movs	r2, #4
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28
		IC_buffer_size = 8;
 80061f8:	4b20      	ldr	r3, [pc, #128]	; (800627c <detectInput+0x160>)
 80061fa:	2208      	movs	r2, #8
 80061fc:	601a      	str	r2, [r3, #0]
		TIM16->ARR = 8000;
 80061fe:	4b21      	ldr	r3, [pc, #132]	; (8006284 <detectInput+0x168>)
 8006200:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006204:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (smallestnumber > 100){
 8006206:	4b15      	ldr	r3, [pc, #84]	; (800625c <detectInput+0x140>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b64      	cmp	r3, #100	; 0x64
 800620c:	dd0b      	ble.n	8006226 <detectInput+0x10a>
		servoPwm = 1;
 800620e:	4b19      	ldr	r3, [pc, #100]	; (8006274 <detectInput+0x158>)
 8006210:	2201      	movs	r2, #1
 8006212:	701a      	strb	r2, [r3, #0]
		TIM15->PSC = 169;
 8006214:	4b1c      	ldr	r3, [pc, #112]	; (8006288 <detectInput+0x16c>)
 8006216:	22a9      	movs	r2, #169	; 0xa9
 8006218:	629a      	str	r2, [r3, #40]	; 0x28
//		TIM16->PSC = 47;
//		TIM16->ARR = 10000;
		HAL_TIM_Base_Stop(&htim16);
 800621a:	481c      	ldr	r0, [pc, #112]	; (800628c <detectInput+0x170>)
 800621c:	f7fd fbd6 	bl	80039cc <HAL_TIM_Base_Stop>
		IC_buffer_size = 6;
 8006220:	4b16      	ldr	r3, [pc, #88]	; (800627c <detectInput+0x160>)
 8006222:	2206      	movs	r2, #6
 8006224:	601a      	str	r2, [r3, #0]

	}

	if (smallestnumber == 0){
 8006226:	4b0d      	ldr	r3, [pc, #52]	; (800625c <detectInput+0x140>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d103      	bne.n	8006236 <detectInput+0x11a>
		inputSet = 0;
 800622e:	4b18      	ldr	r3, [pc, #96]	; (8006290 <detectInput+0x174>)
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	e005      	b.n	8006242 <detectInput+0x126>
	}else{

		inputSet = 1;
 8006236:	4b16      	ldr	r3, [pc, #88]	; (8006290 <detectInput+0x174>)
 8006238:	2201      	movs	r2, #1
 800623a:	701a      	strb	r2, [r3, #0]

		HAL_Delay(50);
 800623c:	2032      	movs	r0, #50	; 0x32
 800623e:	f7fa f85b 	bl	80002f8 <HAL_Delay>
		//	playInputTune();
	}
	HAL_TIM_IC_Start_DMA(&htim8, TIM_CHANNEL_1, dma_buffer , IC_buffer_size);
 8006242:	4b0e      	ldr	r3, [pc, #56]	; (800627c <detectInput+0x160>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	4a0b      	ldr	r2, [pc, #44]	; (8006278 <detectInput+0x15c>)
 800624a:	2100      	movs	r1, #0
 800624c:	4811      	ldr	r0, [pc, #68]	; (8006294 <detectInput+0x178>)
 800624e:	f7fd fd51 	bl	8003cf4 <HAL_TIM_IC_Start_DMA>
}
 8006252:	bf00      	nop
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	2000001c 	.word	0x2000001c
 8006260:	2000009d 	.word	0x2000009d
 8006264:	2000009e 	.word	0x2000009e
 8006268:	2000009f 	.word	0x2000009f
 800626c:	200000a0 	.word	0x200000a0
 8006270:	200000a1 	.word	0x200000a1
 8006274:	200000a2 	.word	0x200000a2
 8006278:	200002a4 	.word	0x200002a4
 800627c:	20000018 	.word	0x20000018
 8006280:	40013400 	.word	0x40013400
 8006284:	40014400 	.word	0x40014400
 8006288:	40014000 	.word	0x40014000
 800628c:	20000434 	.word	0x20000434
 8006290:	2000009c 	.word	0x2000009c
 8006294:	200000c0 	.word	0x200000c0

08006298 <computeProshotDMA>:

void computeProshotDMA(){
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0

total = dma_buffer[1]+ dma_buffer[2] + dma_buffer[3] + dma_buffer[4]+ dma_buffer[5] + dma_buffer[6] + dma_buffer[7];
 800629e:	4b61      	ldr	r3, [pc, #388]	; (8006424 <computeProshotDMA+0x18c>)
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	4b60      	ldr	r3, [pc, #384]	; (8006424 <computeProshotDMA+0x18c>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	441a      	add	r2, r3
 80062a8:	4b5e      	ldr	r3, [pc, #376]	; (8006424 <computeProshotDMA+0x18c>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	441a      	add	r2, r3
 80062ae:	4b5d      	ldr	r3, [pc, #372]	; (8006424 <computeProshotDMA+0x18c>)
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	441a      	add	r2, r3
 80062b4:	4b5b      	ldr	r3, [pc, #364]	; (8006424 <computeProshotDMA+0x18c>)
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	441a      	add	r2, r3
 80062ba:	4b5a      	ldr	r3, [pc, #360]	; (8006424 <computeProshotDMA+0x18c>)
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	441a      	add	r2, r3
 80062c0:	4b58      	ldr	r3, [pc, #352]	; (8006424 <computeProshotDMA+0x18c>)
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	461a      	mov	r2, r3
 80062c8:	4b57      	ldr	r3, [pc, #348]	; (8006428 <computeProshotDMA+0x190>)
 80062ca:	601a      	str	r2, [r3, #0]

   if (( total < 118 && total > 98)&& (dma_buffer[0]> 100)){
 80062cc:	4b56      	ldr	r3, [pc, #344]	; (8006428 <computeProshotDMA+0x190>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b75      	cmp	r3, #117	; 0x75
 80062d2:	f300 80a0 	bgt.w	8006416 <computeProshotDMA+0x17e>
 80062d6:	4b54      	ldr	r3, [pc, #336]	; (8006428 <computeProshotDMA+0x190>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b62      	cmp	r3, #98	; 0x62
 80062dc:	f340 809b 	ble.w	8006416 <computeProshotDMA+0x17e>
 80062e0:	4b50      	ldr	r3, [pc, #320]	; (8006424 <computeProshotDMA+0x18c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b64      	cmp	r3, #100	; 0x64
 80062e6:	f240 8096 	bls.w	8006416 <computeProshotDMA+0x17e>
   for (int i = 1; i < 8; i +=2){
 80062ea:	2301      	movs	r3, #1
 80062ec:	607b      	str	r3, [r7, #4]
 80062ee:	e010      	b.n	8006312 <computeProshotDMA+0x7a>
    propulse[(i-1) / 2] = (dma_buffer[i] - 7);
 80062f0:	4a4c      	ldr	r2, [pc, #304]	; (8006424 <computeProshotDMA+0x18c>)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f8:	1fd9      	subs	r1, r3, #7
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	0fda      	lsrs	r2, r3, #31
 8006300:	4413      	add	r3, r2
 8006302:	105b      	asrs	r3, r3, #1
 8006304:	461a      	mov	r2, r3
 8006306:	4b49      	ldr	r3, [pc, #292]	; (800642c <computeProshotDMA+0x194>)
 8006308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for (int i = 1; i < 8; i +=2){
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3302      	adds	r3, #2
 8006310:	607b      	str	r3, [r7, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b07      	cmp	r3, #7
 8006316:	ddeb      	ble.n	80062f0 <computeProshotDMA+0x58>
 8006318:	bf00      	nop
					}
   }else{

	   return;
   }
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 800631a:	4b44      	ldr	r3, [pc, #272]	; (800642c <computeProshotDMA+0x194>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b43      	ldr	r3, [pc, #268]	; (800642c <computeProshotDMA+0x194>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	405a      	eors	r2, r3
 8006324:	4b41      	ldr	r3, [pc, #260]	; (800642c <computeProshotDMA+0x194>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4053      	eors	r3, r2
 800632a:	00da      	lsls	r2, r3, #3
							|(propulse[0]^propulse[1]^propulse[2])<<2
 800632c:	4b3f      	ldr	r3, [pc, #252]	; (800642c <computeProshotDMA+0x194>)
 800632e:	6819      	ldr	r1, [r3, #0]
 8006330:	4b3e      	ldr	r3, [pc, #248]	; (800642c <computeProshotDMA+0x194>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	4059      	eors	r1, r3
 8006336:	4b3d      	ldr	r3, [pc, #244]	; (800642c <computeProshotDMA+0x194>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	404b      	eors	r3, r1
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	431a      	orrs	r2, r3
							|(propulse[0]^propulse[1]^propulse[2])<<1
 8006340:	4b3a      	ldr	r3, [pc, #232]	; (800642c <computeProshotDMA+0x194>)
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	4b39      	ldr	r3, [pc, #228]	; (800642c <computeProshotDMA+0x194>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	4059      	eors	r1, r3
 800634a:	4b38      	ldr	r3, [pc, #224]	; (800642c <computeProshotDMA+0x194>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	404b      	eors	r3, r1
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	431a      	orrs	r2, r3
							|(propulse[0]^propulse[1]^propulse[2]));
 8006354:	4b35      	ldr	r3, [pc, #212]	; (800642c <computeProshotDMA+0x194>)
 8006356:	6819      	ldr	r1, [r3, #0]
 8006358:	4b34      	ldr	r3, [pc, #208]	; (800642c <computeProshotDMA+0x194>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4059      	eors	r1, r3
 800635e:	4b33      	ldr	r3, [pc, #204]	; (800642c <computeProshotDMA+0x194>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	404b      	eors	r3, r1
 8006364:	4313      	orrs	r3, r2
	calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8006366:	4a32      	ldr	r2, [pc, #200]	; (8006430 <computeProshotDMA+0x198>)
 8006368:	6013      	str	r3, [r2, #0]

	checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 800636a:	4b30      	ldr	r3, [pc, #192]	; (800642c <computeProshotDMA+0x194>)
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	00da      	lsls	r2, r3, #3
 8006370:	4b2e      	ldr	r3, [pc, #184]	; (800642c <computeProshotDMA+0x194>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	431a      	orrs	r2, r3
 8006378:	4b2c      	ldr	r3, [pc, #176]	; (800642c <computeProshotDMA+0x194>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	431a      	orrs	r2, r3
 8006380:	4b2a      	ldr	r3, [pc, #168]	; (800642c <computeProshotDMA+0x194>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	4a2b      	ldr	r2, [pc, #172]	; (8006434 <computeProshotDMA+0x19c>)
 8006388:	6013      	str	r3, [r2, #0]
    if ( checkCRC == calcCRC){
 800638a:	4b2a      	ldr	r3, [pc, #168]	; (8006434 <computeProshotDMA+0x19c>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	4b28      	ldr	r3, [pc, #160]	; (8006430 <computeProshotDMA+0x198>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d10c      	bne.n	80063b0 <computeProshotDMA+0x118>
    	tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
 8006396:	4b25      	ldr	r3, [pc, #148]	; (800642c <computeProshotDMA+0x194>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	01da      	lsls	r2, r3, #7
 800639c:	4b23      	ldr	r3, [pc, #140]	; (800642c <computeProshotDMA+0x194>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	431a      	orrs	r2, r3
 80063a4:	4b21      	ldr	r3, [pc, #132]	; (800642c <computeProshotDMA+0x194>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	105b      	asrs	r3, r3, #1
 80063aa:	4313      	orrs	r3, r2
 80063ac:	4a22      	ldr	r2, [pc, #136]	; (8006438 <computeProshotDMA+0x1a0>)
 80063ae:	6013      	str	r3, [r2, #0]
    }else{
 //   	error++;
    }
    if (tocheck > 47 && tocheck < 2048){
 80063b0:	4b21      	ldr	r3, [pc, #132]	; (8006438 <computeProshotDMA+0x1a0>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b2f      	cmp	r3, #47	; 0x2f
 80063b6:	dd0c      	ble.n	80063d2 <computeProshotDMA+0x13a>
 80063b8:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <computeProshotDMA+0x1a0>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c0:	da07      	bge.n	80063d2 <computeProshotDMA+0x13a>
    	newinput = tocheck ;
 80063c2:	4b1d      	ldr	r3, [pc, #116]	; (8006438 <computeProshotDMA+0x1a0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1d      	ldr	r2, [pc, #116]	; (800643c <computeProshotDMA+0x1a4>)
 80063c8:	6013      	str	r3, [r2, #0]
    				commandcount = 0;
 80063ca:	4b1d      	ldr	r3, [pc, #116]	; (8006440 <computeProshotDMA+0x1a8>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	e022      	b.n	8006418 <computeProshotDMA+0x180>



    			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 80063d2:	4b19      	ldr	r3, [pc, #100]	; (8006438 <computeProshotDMA+0x1a0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	dd0c      	ble.n	80063f4 <computeProshotDMA+0x15c>
 80063da:	4b17      	ldr	r3, [pc, #92]	; (8006438 <computeProshotDMA+0x1a0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b2f      	cmp	r3, #47	; 0x2f
 80063e0:	dc08      	bgt.n	80063f4 <computeProshotDMA+0x15c>
 80063e2:	4b18      	ldr	r3, [pc, #96]	; (8006444 <computeProshotDMA+0x1ac>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d104      	bne.n	80063f4 <computeProshotDMA+0x15c>

    					dshotcommand = tocheck ;
 80063ea:	4b13      	ldr	r3, [pc, #76]	; (8006438 <computeProshotDMA+0x1a0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a16      	ldr	r2, [pc, #88]	; (8006448 <computeProshotDMA+0x1b0>)
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e011      	b.n	8006418 <computeProshotDMA+0x180>
    			}else{
    				commandcount++;
 80063f4:	4b12      	ldr	r3, [pc, #72]	; (8006440 <computeProshotDMA+0x1a8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	4a11      	ldr	r2, [pc, #68]	; (8006440 <computeProshotDMA+0x1a8>)
 80063fc:	6013      	str	r3, [r2, #0]
    				if (commandcount > 1){
 80063fe:	4b10      	ldr	r3, [pc, #64]	; (8006440 <computeProshotDMA+0x1a8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b01      	cmp	r3, #1
 8006404:	dd08      	ble.n	8006418 <computeProshotDMA+0x180>
    				newinput = tocheck ;
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <computeProshotDMA+0x1a0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a0c      	ldr	r2, [pc, #48]	; (800643c <computeProshotDMA+0x1a4>)
 800640c:	6013      	str	r3, [r2, #0]
    			    commandcount = 0;
 800640e:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <computeProshotDMA+0x1a8>)
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	e000      	b.n	8006418 <computeProshotDMA+0x180>
	   return;
 8006416:	bf00      	nop
    			}
    			}

}
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	200002a4 	.word	0x200002a4
 8006428:	20000098 	.word	0x20000098
 800642c:	20000074 	.word	0x20000074
 8006430:	200001ac 	.word	0x200001ac
 8006434:	200001c0 	.word	0x200001c0
 8006438:	20000084 	.word	0x20000084
 800643c:	20000094 	.word	0x20000094
 8006440:	20000088 	.word	0x20000088
 8006444:	20000090 	.word	0x20000090
 8006448:	20000224 	.word	0x20000224

0800644c <computeDshotDMA>:

void computeDshotDMA(){
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0

	if (dma_buffer[0] < 20){
 8006450:	4b57      	ldr	r3, [pc, #348]	; (80065b0 <computeDshotDMA+0x164>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b13      	cmp	r3, #19
 8006456:	f240 80a6 	bls.w	80065a6 <computeDshotDMA+0x15a>
	}

//	for (int i = 1; i < 32; i+=2){
//		dpulse[(i-1)>>1] = dma_buffer[i] ;
//	}
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 800645a:	4b55      	ldr	r3, [pc, #340]	; (80065b0 <computeDshotDMA+0x164>)
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	4b54      	ldr	r3, [pc, #336]	; (80065b0 <computeDshotDMA+0x164>)
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	405a      	eors	r2, r3
 8006464:	4b52      	ldr	r3, [pc, #328]	; (80065b0 <computeDshotDMA+0x164>)
 8006466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006468:	4053      	eors	r3, r2
 800646a:	00da      	lsls	r2, r3, #3
			          |(dma_buffer[3]^dma_buffer[11]^dma_buffer[19])<<2
 800646c:	4b50      	ldr	r3, [pc, #320]	; (80065b0 <computeDshotDMA+0x164>)
 800646e:	68d9      	ldr	r1, [r3, #12]
 8006470:	4b4f      	ldr	r3, [pc, #316]	; (80065b0 <computeDshotDMA+0x164>)
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	4059      	eors	r1, r3
 8006476:	4b4e      	ldr	r3, [pc, #312]	; (80065b0 <computeDshotDMA+0x164>)
 8006478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647a:	404b      	eors	r3, r1
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	431a      	orrs	r2, r3
					|(dma_buffer[5]^dma_buffer[13]^dma_buffer[21])<<1
 8006480:	4b4b      	ldr	r3, [pc, #300]	; (80065b0 <computeDshotDMA+0x164>)
 8006482:	6959      	ldr	r1, [r3, #20]
 8006484:	4b4a      	ldr	r3, [pc, #296]	; (80065b0 <computeDshotDMA+0x164>)
 8006486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006488:	4059      	eors	r1, r3
 800648a:	4b49      	ldr	r3, [pc, #292]	; (80065b0 <computeDshotDMA+0x164>)
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	404b      	eors	r3, r1
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	431a      	orrs	r2, r3
					|(dma_buffer[7]^dma_buffer[15]^dma_buffer[23])
 8006494:	4b46      	ldr	r3, [pc, #280]	; (80065b0 <computeDshotDMA+0x164>)
 8006496:	69d9      	ldr	r1, [r3, #28]
 8006498:	4b45      	ldr	r3, [pc, #276]	; (80065b0 <computeDshotDMA+0x164>)
 800649a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649c:	4059      	eors	r1, r3
 800649e:	4b44      	ldr	r3, [pc, #272]	; (80065b0 <computeDshotDMA+0x164>)
 80064a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a2:	404b      	eors	r3, r1
 80064a4:	4313      	orrs	r3, r2
 80064a6:	461a      	mov	r2, r3
	 calcCRC = ((dma_buffer[1]^dma_buffer[9]^dma_buffer[17])<<3
 80064a8:	4b42      	ldr	r3, [pc, #264]	; (80065b4 <computeDshotDMA+0x168>)
 80064aa:	601a      	str	r2, [r3, #0]
//			          |(dpulse[1]^dpulse[5]^dpulse[9])<<2
//					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
//					|(dpulse[3]^dpulse[7]^dpulse[11])
//				);
//	 checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
	 checkCRC = (dma_buffer[25]<<3 | dma_buffer[27]<<2 | dma_buffer[29]<<1 | dma_buffer[31]);
 80064ac:	4b40      	ldr	r3, [pc, #256]	; (80065b0 <computeDshotDMA+0x164>)
 80064ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b0:	00da      	lsls	r2, r3, #3
 80064b2:	4b3f      	ldr	r3, [pc, #252]	; (80065b0 <computeDshotDMA+0x164>)
 80064b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	431a      	orrs	r2, r3
 80064ba:	4b3d      	ldr	r3, [pc, #244]	; (80065b0 <computeDshotDMA+0x164>)
 80064bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	431a      	orrs	r2, r3
 80064c2:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <computeDshotDMA+0x164>)
 80064c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c6:	4313      	orrs	r3, r2
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b3b      	ldr	r3, [pc, #236]	; (80065b8 <computeDshotDMA+0x16c>)
 80064cc:	601a      	str	r2, [r3, #0]
//
			if(calcCRC == checkCRC){
 80064ce:	4b39      	ldr	r3, [pc, #228]	; (80065b4 <computeDshotDMA+0x168>)
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4b39      	ldr	r3, [pc, #228]	; (80065b8 <computeDshotDMA+0x16c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d12d      	bne.n	8006536 <computeDshotDMA+0xea>
				tocheck = (
						dma_buffer[1]<<10 | dma_buffer[3]<<9 | dma_buffer[5]<<8 | dma_buffer[7]<<7
 80064da:	4b35      	ldr	r3, [pc, #212]	; (80065b0 <computeDshotDMA+0x164>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	029a      	lsls	r2, r3, #10
 80064e0:	4b33      	ldr	r3, [pc, #204]	; (80065b0 <computeDshotDMA+0x164>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	025b      	lsls	r3, r3, #9
 80064e6:	431a      	orrs	r2, r3
 80064e8:	4b31      	ldr	r3, [pc, #196]	; (80065b0 <computeDshotDMA+0x164>)
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	431a      	orrs	r2, r3
 80064f0:	4b2f      	ldr	r3, [pc, #188]	; (80065b0 <computeDshotDMA+0x164>)
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	01db      	lsls	r3, r3, #7
 80064f6:	431a      	orrs	r2, r3
					| dma_buffer[9]<<6 | dma_buffer[11]<<5 | dma_buffer[13]<<4 | dma_buffer[15]<<3
 80064f8:	4b2d      	ldr	r3, [pc, #180]	; (80065b0 <computeDshotDMA+0x164>)
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	019b      	lsls	r3, r3, #6
 80064fe:	431a      	orrs	r2, r3
 8006500:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <computeDshotDMA+0x164>)
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	015b      	lsls	r3, r3, #5
 8006506:	431a      	orrs	r2, r3
 8006508:	4b29      	ldr	r3, [pc, #164]	; (80065b0 <computeDshotDMA+0x164>)
 800650a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	431a      	orrs	r2, r3
 8006510:	4b27      	ldr	r3, [pc, #156]	; (80065b0 <computeDshotDMA+0x164>)
 8006512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	431a      	orrs	r2, r3
					| dma_buffer[17]<<2 | dma_buffer[19]<<1 | dma_buffer[21]);
 8006518:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <computeDshotDMA+0x164>)
 800651a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	431a      	orrs	r2, r3
 8006520:	4b23      	ldr	r3, [pc, #140]	; (80065b0 <computeDshotDMA+0x164>)
 8006522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	431a      	orrs	r2, r3
 8006528:	4b21      	ldr	r3, [pc, #132]	; (80065b0 <computeDshotDMA+0x164>)
 800652a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652c:	4313      	orrs	r3, r2
 800652e:	461a      	mov	r2, r3
				tocheck = (
 8006530:	4b22      	ldr	r3, [pc, #136]	; (80065bc <computeDshotDMA+0x170>)
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	e004      	b.n	8006540 <computeDshotDMA+0xf4>
//				success++;
				}else{
					error++;
 8006536:	4b22      	ldr	r3, [pc, #136]	; (80065c0 <computeDshotDMA+0x174>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3301      	adds	r3, #1
 800653c:	4a20      	ldr	r2, [pc, #128]	; (80065c0 <computeDshotDMA+0x174>)
 800653e:	6013      	str	r3, [r2, #0]
				}

			if (tocheck > 47 && tocheck < 2048){
 8006540:	4b1e      	ldr	r3, [pc, #120]	; (80065bc <computeDshotDMA+0x170>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b2f      	cmp	r3, #47	; 0x2f
 8006546:	dd0c      	ble.n	8006562 <computeDshotDMA+0x116>
 8006548:	4b1c      	ldr	r3, [pc, #112]	; (80065bc <computeDshotDMA+0x170>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006550:	da07      	bge.n	8006562 <computeDshotDMA+0x116>
				newinput = tocheck;
 8006552:	4b1a      	ldr	r3, [pc, #104]	; (80065bc <computeDshotDMA+0x170>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1b      	ldr	r2, [pc, #108]	; (80065c4 <computeDshotDMA+0x178>)
 8006558:	6013      	str	r3, [r2, #0]
				commandcount = 0;
 800655a:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <computeDshotDMA+0x17c>)
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e022      	b.n	80065a8 <computeDshotDMA+0x15c>
			}else if (tocheck > 1 && tocheck < 48 && input == 0){
 8006562:	4b16      	ldr	r3, [pc, #88]	; (80065bc <computeDshotDMA+0x170>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b01      	cmp	r3, #1
 8006568:	dd0c      	ble.n	8006584 <computeDshotDMA+0x138>
 800656a:	4b14      	ldr	r3, [pc, #80]	; (80065bc <computeDshotDMA+0x170>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b2f      	cmp	r3, #47	; 0x2f
 8006570:	dc08      	bgt.n	8006584 <computeDshotDMA+0x138>
 8006572:	4b16      	ldr	r3, [pc, #88]	; (80065cc <computeDshotDMA+0x180>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <computeDshotDMA+0x138>

					dshotcommand = tocheck ;
 800657a:	4b10      	ldr	r3, [pc, #64]	; (80065bc <computeDshotDMA+0x170>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <computeDshotDMA+0x184>)
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e011      	b.n	80065a8 <computeDshotDMA+0x15c>


			}else{
				commandcount++;
 8006584:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <computeDshotDMA+0x17c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	4a0f      	ldr	r2, [pc, #60]	; (80065c8 <computeDshotDMA+0x17c>)
 800658c:	6013      	str	r3, [r2, #0]
				if (commandcount > 1){
 800658e:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <computeDshotDMA+0x17c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b01      	cmp	r3, #1
 8006594:	dd08      	ble.n	80065a8 <computeDshotDMA+0x15c>
				newinput = tocheck ;
 8006596:	4b09      	ldr	r3, [pc, #36]	; (80065bc <computeDshotDMA+0x170>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a0a      	ldr	r2, [pc, #40]	; (80065c4 <computeDshotDMA+0x178>)
 800659c:	6013      	str	r3, [r2, #0]
			    commandcount = 0;
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <computeDshotDMA+0x17c>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e000      	b.n	80065a8 <computeDshotDMA+0x15c>
		return;
 80065a6:	bf00      	nop
			}
			}

}
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	200002a4 	.word	0x200002a4
 80065b4:	200001ac 	.word	0x200001ac
 80065b8:	200001c0 	.word	0x200001c0
 80065bc:	20000084 	.word	0x20000084
 80065c0:	2000006c 	.word	0x2000006c
 80065c4:	20000094 	.word	0x20000094
 80065c8:	20000088 	.word	0x20000088
 80065cc:	20000090 	.word	0x20000090
 80065d0:	20000224 	.word	0x20000224

080065d4 <computeServoInput>:


void computeServoInput(){
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af02      	add	r7, sp, #8

	if ( dma_buffer[1] < 2000 && dma_buffer[1] > 1000){
 80065da:	4b3b      	ldr	r3, [pc, #236]	; (80066c8 <computeServoInput+0xf4>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80065e2:	d220      	bcs.n	8006626 <computeServoInput+0x52>
 80065e4:	4b38      	ldr	r3, [pc, #224]	; (80066c8 <computeServoInput+0xf4>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065ec:	d91b      	bls.n	8006626 <computeServoInput+0x52>
		if(dma_buffer[2]< 1000 || dma_buffer[2] > 2500){
 80065ee:	4b36      	ldr	r3, [pc, #216]	; (80066c8 <computeServoInput+0xf4>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065f6:	d305      	bcc.n	8006604 <computeServoInput+0x30>
 80065f8:	4b33      	ldr	r3, [pc, #204]	; (80066c8 <computeServoInput+0xf4>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006600:	4293      	cmp	r3, r2
 8006602:	d936      	bls.n	8006672 <computeServoInput+0x9e>

		servorawinput = map(dma_buffer[1], 1100,2000,0,2000);
 8006604:	4b30      	ldr	r3, [pc, #192]	; (80066c8 <computeServoInput+0xf4>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	4618      	mov	r0, r3
 800660a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	2300      	movs	r3, #0
 8006612:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006616:	f240 414c 	movw	r1, #1100	; 0x44c
 800661a:	f7ff fbf7 	bl	8005e0c <map>
 800661e:	4602      	mov	r2, r0
 8006620:	4b2a      	ldr	r3, [pc, #168]	; (80066cc <computeServoInput+0xf8>)
 8006622:	601a      	str	r2, [r3, #0]
		if(dma_buffer[2]< 1000 || dma_buffer[2] > 2500){
 8006624:	e025      	b.n	8006672 <computeServoInput+0x9e>
		}
	}else if( dma_buffer[2] < 2000 && dma_buffer[2] > 1000) {
 8006626:	4b28      	ldr	r3, [pc, #160]	; (80066c8 <computeServoInput+0xf4>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800662e:	d221      	bcs.n	8006674 <computeServoInput+0xa0>
 8006630:	4b25      	ldr	r3, [pc, #148]	; (80066c8 <computeServoInput+0xf4>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006638:	d91c      	bls.n	8006674 <computeServoInput+0xa0>
		if(dma_buffer[1]< 1000 || dma_buffer[1] > 2500){
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <computeServoInput+0xf4>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006642:	d305      	bcc.n	8006650 <computeServoInput+0x7c>
 8006644:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <computeServoInput+0xf4>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800664c:	4293      	cmp	r3, r2
 800664e:	d911      	bls.n	8006674 <computeServoInput+0xa0>
		servorawinput = map(dma_buffer[2], 1100,2000,0,2000);
 8006650:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <computeServoInput+0xf4>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	2300      	movs	r3, #0
 800665e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006662:	f240 414c 	movw	r1, #1100	; 0x44c
 8006666:	f7ff fbd1 	bl	8005e0c <map>
 800666a:	4602      	mov	r2, r0
 800666c:	4b17      	ldr	r3, [pc, #92]	; (80066cc <computeServoInput+0xf8>)
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e000      	b.n	8006674 <computeServoInput+0xa0>
		if(dma_buffer[2]< 1000 || dma_buffer[2] > 2500){
 8006672:	bf00      	nop
		}
	}


	if (servorawinput - newinput > max_servo_deviation){
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <computeServoInput+0xf8>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <computeServoInput+0xfc>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	1ad2      	subs	r2, r2, r3
 800667e:	4b15      	ldr	r3, [pc, #84]	; (80066d4 <computeServoInput+0x100>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	dd07      	ble.n	8006696 <computeServoInput+0xc2>
		newinput += max_servo_deviation;
 8006686:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <computeServoInput+0xfc>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <computeServoInput+0x100>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4413      	add	r3, r2
 8006690:	4a0f      	ldr	r2, [pc, #60]	; (80066d0 <computeServoInput+0xfc>)
 8006692:	6013      	str	r3, [r2, #0]
	}else{
		newinput = servorawinput;
	}


}
 8006694:	e014      	b.n	80066c0 <computeServoInput+0xec>
	}else if(newinput - servorawinput > max_servo_deviation){
 8006696:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <computeServoInput+0xfc>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <computeServoInput+0xf8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <computeServoInput+0x100>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	dd07      	ble.n	80066b8 <computeServoInput+0xe4>
		newinput -= max_servo_deviation;
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <computeServoInput+0xfc>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <computeServoInput+0x100>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	4a07      	ldr	r2, [pc, #28]	; (80066d0 <computeServoInput+0xfc>)
 80066b4:	6013      	str	r3, [r2, #0]
}
 80066b6:	e003      	b.n	80066c0 <computeServoInput+0xec>
		newinput = servorawinput;
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <computeServoInput+0xf8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a04      	ldr	r2, [pc, #16]	; (80066d0 <computeServoInput+0xfc>)
 80066be:	6013      	str	r3, [r2, #0]
}
 80066c0:	bf00      	nop
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	200002a4 	.word	0x200002a4
 80066cc:	2000008c 	.word	0x2000008c
 80066d0:	20000094 	.word	0x20000094
 80066d4:	20000020 	.word	0x20000020

080066d8 <transferComplete>:


void transferComplete(){
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0

//	compit = 0;
	signaltimeout = 0;
 80066dc:	4b10      	ldr	r3, [pc, #64]	; (8006720 <transferComplete+0x48>)
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]

	if (inputSet == 1){
 80066e2:	4b10      	ldr	r3, [pc, #64]	; (8006724 <transferComplete+0x4c>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d119      	bne.n	800671e <transferComplete+0x46>
		if (dshot == 1){
 80066ea:	4b0f      	ldr	r3, [pc, #60]	; (8006728 <transferComplete+0x50>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d102      	bne.n	80066f8 <transferComplete+0x20>
			computeDshotDMA();
 80066f2:	f7ff feab 	bl	800644c <computeDshotDMA>

			return;
 80066f6:	e012      	b.n	800671e <transferComplete+0x46>
		}
		if (proshot == 1){
 80066f8:	4b0c      	ldr	r3, [pc, #48]	; (800672c <transferComplete+0x54>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d102      	bne.n	8006706 <transferComplete+0x2e>
			computeProshotDMA();
 8006700:	f7ff fdca 	bl	8006298 <computeProshotDMA>

			return;
 8006704:	e00b      	b.n	800671e <transferComplete+0x46>
		}

		if  (servoPwm == 1){
 8006706:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <transferComplete+0x58>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d107      	bne.n	800671e <transferComplete+0x46>
			computeServoInput();
 800670e:	f7ff ff61 	bl	80065d4 <computeServoInput>
				HAL_TIM_IC_Start_DMA(&htim8, TIM_CHANNEL_1, dma_buffer , 3);
 8006712:	2303      	movs	r3, #3
 8006714:	4a07      	ldr	r2, [pc, #28]	; (8006734 <transferComplete+0x5c>)
 8006716:	2100      	movs	r1, #0
 8006718:	4807      	ldr	r0, [pc, #28]	; (8006738 <transferComplete+0x60>)
 800671a:	f7fd faeb 	bl	8003cf4 <HAL_TIM_IC_Start_DMA>
				}
}

}
 800671e:	bd80      	pop	{r7, pc}
 8006720:	200000ac 	.word	0x200000ac
 8006724:	2000009c 	.word	0x2000009c
 8006728:	2000009d 	.word	0x2000009d
 800672c:	2000009e 	.word	0x2000009e
 8006730:	200000a2 	.word	0x200000a2
 8006734:	200002a4 	.word	0x200002a4
 8006738:	200000c0 	.word	0x200000c0

0800673c <switchADCPhase>:
void switchADCPhase(){
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
	    /**Configure for the selected ADC regular channel to be converted.
	     *
	     *
	    */

	 if (step == 1 || step == 4){            //        in phase 1 or 4 read from phase c Pf1 adc2
 8006742:	4b28      	ldr	r3, [pc, #160]	; (80067e4 <switchADCPhase+0xa8>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d003      	beq.n	8006752 <switchADCPhase+0x16>
 800674a:	4b26      	ldr	r3, [pc, #152]	; (80067e4 <switchADCPhase+0xa8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b04      	cmp	r3, #4
 8006750:	d116      	bne.n	8006780 <switchADCPhase+0x44>
		 HAL_ADC_Stop_IT(&hadc2);
 8006752:	4825      	ldr	r0, [pc, #148]	; (80067e8 <switchADCPhase+0xac>)
 8006754:	f7fa fb28 	bl	8000da8 <HAL_ADC_Stop_IT>
		 HAL_ADC_Stop_IT(&hadc1);
 8006758:	4824      	ldr	r0, [pc, #144]	; (80067ec <switchADCPhase+0xb0>)
 800675a:	f7fa fb25 	bl	8000da8 <HAL_ADC_Stop_IT>
//		  sConfig.Channel = last_adc_channel;
//		   	   		  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
//		   	   		  {
//		   	   		    _Error_Handler(__FILE__, __LINE__);
//		   	   		  }
		   sConfig.Channel = ADC_CHANNEL_10;
 800675e:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <switchADCPhase+0xb4>)
 8006760:	603b      	str	r3, [r7, #0]
		   sConfig.Rank = ADC_REGULAR_RANK_1;
 8006762:	2306      	movs	r3, #6
 8006764:	607b      	str	r3, [r7, #4]

	      if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006766:	463b      	mov	r3, r7
 8006768:	4619      	mov	r1, r3
 800676a:	481f      	ldr	r0, [pc, #124]	; (80067e8 <switchADCPhase+0xac>)
 800676c:	f7fa fd92 	bl	8001294 <HAL_ADC_ConfigChannel>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <switchADCPhase+0x3e>
	      {
	    	  Error_Handler();
 8006776:	f001 f841 	bl	80077fc <Error_Handler>
	      }
	      HAL_ADC_Start_IT(&hadc2);
 800677a:	481b      	ldr	r0, [pc, #108]	; (80067e8 <switchADCPhase+0xac>)
 800677c:	f7fa f9e0 	bl	8000b40 <HAL_ADC_Start_IT>
		}
   if (step == 2 || step == 5){            //        in phase two or 5 read from phase A PA4 adc2
 8006780:	4b18      	ldr	r3, [pc, #96]	; (80067e4 <switchADCPhase+0xa8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d003      	beq.n	8006790 <switchADCPhase+0x54>
 8006788:	4b16      	ldr	r3, [pc, #88]	; (80067e4 <switchADCPhase+0xa8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b05      	cmp	r3, #5
 800678e:	d116      	bne.n	80067be <switchADCPhase+0x82>
	   HAL_ADC_Stop_IT(&hadc2);
 8006790:	4815      	ldr	r0, [pc, #84]	; (80067e8 <switchADCPhase+0xac>)
 8006792:	f7fa fb09 	bl	8000da8 <HAL_ADC_Stop_IT>
	   HAL_ADC_Stop_IT(&hadc1);
 8006796:	4815      	ldr	r0, [pc, #84]	; (80067ec <switchADCPhase+0xb0>)
 8006798:	f7fa fb06 	bl	8000da8 <HAL_ADC_Stop_IT>
//	   	   		  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
//	   	   		  {
//	   	   		    _Error_Handler(__FILE__, __LINE__);
//	   	   		  }

	   	   	sConfig.Channel = ADC_CHANNEL_17;
 800679c:	4b15      	ldr	r3, [pc, #84]	; (80067f4 <switchADCPhase+0xb8>)
 800679e:	603b      	str	r3, [r7, #0]
	   	   	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80067a0:	2306      	movs	r3, #6
 80067a2:	607b      	str	r3, [r7, #4]

      if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80067a4:	463b      	mov	r3, r7
 80067a6:	4619      	mov	r1, r3
 80067a8:	480f      	ldr	r0, [pc, #60]	; (80067e8 <switchADCPhase+0xac>)
 80067aa:	f7fa fd73 	bl	8001294 <HAL_ADC_ConfigChannel>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <switchADCPhase+0x7c>
      {
    	  Error_Handler();
 80067b4:	f001 f822 	bl	80077fc <Error_Handler>
      }
      HAL_ADC_Start_IT(&hadc2);
 80067b8:	480b      	ldr	r0, [pc, #44]	; (80067e8 <switchADCPhase+0xac>)
 80067ba:	f7fa f9c1 	bl	8000b40 <HAL_ADC_Start_IT>
	}


   if (step == 3 || step == 6){                         // phase B pb0 --- on adc 1 does not change
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <switchADCPhase+0xa8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d003      	beq.n	80067ce <switchADCPhase+0x92>
 80067c6:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <switchADCPhase+0xa8>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b06      	cmp	r3, #6
 80067cc:	d105      	bne.n	80067da <switchADCPhase+0x9e>
	   HAL_ADC_Stop_IT(&hadc2);
 80067ce:	4806      	ldr	r0, [pc, #24]	; (80067e8 <switchADCPhase+0xac>)
 80067d0:	f7fa faea 	bl	8000da8 <HAL_ADC_Stop_IT>
//	    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
//				  {
//				    _Error_Handler(__FILE__, __LINE__);
//				  }
//	    last_adc_channel=ADC_CHANNEL_1;
	   HAL_ADC_Start_IT(&hadc1);      // zc found is not set to 0 until end of zcfound routine
 80067d4:	4805      	ldr	r0, [pc, #20]	; (80067ec <switchADCPhase+0xb0>)
 80067d6:	f7fa f9b3 	bl	8000b40 <HAL_ADC_Start_IT>
			}
}
 80067da:	bf00      	nop
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000030 	.word	0x20000030
 80067e8:	20000140 	.word	0x20000140
 80067ec:	20000228 	.word	0x20000228
 80067f0:	2a000400 	.word	0x2a000400
 80067f4:	47520000 	.word	0x47520000

080067f8 <commutate>:
void commutate(){
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
	if (forward == 1){
 80067fc:	4b33      	ldr	r3, [pc, #204]	; (80068cc <commutate+0xd4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d129      	bne.n	8006858 <commutate+0x60>
		step++;
 8006804:	4b32      	ldr	r3, [pc, #200]	; (80068d0 <commutate+0xd8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3301      	adds	r3, #1
 800680a:	4a31      	ldr	r2, [pc, #196]	; (80068d0 <commutate+0xd8>)
 800680c:	6013      	str	r3, [r2, #0]
		if (step > 6) {
 800680e:	4b30      	ldr	r3, [pc, #192]	; (80068d0 <commutate+0xd8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b06      	cmp	r3, #6
 8006814:	dd02      	ble.n	800681c <commutate+0x24>
			step = 1;
 8006816:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <commutate+0xd8>)
 8006818:	2201      	movs	r2, #1
 800681a:	601a      	str	r2, [r3, #0]
		}
		if (step == 1 || step == 3 || step == 5) {
 800681c:	4b2c      	ldr	r3, [pc, #176]	; (80068d0 <commutate+0xd8>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d007      	beq.n	8006834 <commutate+0x3c>
 8006824:	4b2a      	ldr	r3, [pc, #168]	; (80068d0 <commutate+0xd8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b03      	cmp	r3, #3
 800682a:	d003      	beq.n	8006834 <commutate+0x3c>
 800682c:	4b28      	ldr	r3, [pc, #160]	; (80068d0 <commutate+0xd8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b05      	cmp	r3, #5
 8006832:	d102      	bne.n	800683a <commutate+0x42>
			rising = 1;                                // is back emf rising or falling
 8006834:	4b27      	ldr	r3, [pc, #156]	; (80068d4 <commutate+0xdc>)
 8006836:	2201      	movs	r2, #1
 8006838:	601a      	str	r2, [r3, #0]
		}
		if (step == 2 || step == 4 || step == 6) {
 800683a:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <commutate+0xd8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d007      	beq.n	8006852 <commutate+0x5a>
 8006842:	4b23      	ldr	r3, [pc, #140]	; (80068d0 <commutate+0xd8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b04      	cmp	r3, #4
 8006848:	d003      	beq.n	8006852 <commutate+0x5a>
 800684a:	4b21      	ldr	r3, [pc, #132]	; (80068d0 <commutate+0xd8>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b06      	cmp	r3, #6
 8006850:	d102      	bne.n	8006858 <commutate+0x60>
			rising = 0;
 8006852:	4b20      	ldr	r3, [pc, #128]	; (80068d4 <commutate+0xdc>)
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]
		}
	}
	if (forward == 0){
 8006858:	4b1c      	ldr	r3, [pc, #112]	; (80068cc <commutate+0xd4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d129      	bne.n	80068b4 <commutate+0xbc>
		step--;
 8006860:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <commutate+0xd8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3b01      	subs	r3, #1
 8006866:	4a1a      	ldr	r2, [pc, #104]	; (80068d0 <commutate+0xd8>)
 8006868:	6013      	str	r3, [r2, #0]
		if (step < 1) {
 800686a:	4b19      	ldr	r3, [pc, #100]	; (80068d0 <commutate+0xd8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	dc02      	bgt.n	8006878 <commutate+0x80>
			step = 6;
 8006872:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <commutate+0xd8>)
 8006874:	2206      	movs	r2, #6
 8006876:	601a      	str	r2, [r3, #0]
		}
		if (step == 1 || step == 3 || step == 5) {
 8006878:	4b15      	ldr	r3, [pc, #84]	; (80068d0 <commutate+0xd8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d007      	beq.n	8006890 <commutate+0x98>
 8006880:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <commutate+0xd8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b03      	cmp	r3, #3
 8006886:	d003      	beq.n	8006890 <commutate+0x98>
 8006888:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <commutate+0xd8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b05      	cmp	r3, #5
 800688e:	d102      	bne.n	8006896 <commutate+0x9e>
			rising = 0;
 8006890:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <commutate+0xdc>)
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
		}
		if (step == 2 || step == 4 || step == 6) {
 8006896:	4b0e      	ldr	r3, [pc, #56]	; (80068d0 <commutate+0xd8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b02      	cmp	r3, #2
 800689c:	d007      	beq.n	80068ae <commutate+0xb6>
 800689e:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <commutate+0xd8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d003      	beq.n	80068ae <commutate+0xb6>
 80068a6:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <commutate+0xd8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b06      	cmp	r3, #6
 80068ac:	d102      	bne.n	80068b4 <commutate+0xbc>
			rising = 1;
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <commutate+0xdc>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
		}
	}
	comStep(step);
 80068b4:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <commutate+0xd8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fba9 	bl	8006010 <comStep>
	switchADCPhase();
 80068be:	f7ff ff3d 	bl	800673c <switchADCPhase>
	bemfcounter = 0;
 80068c2:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <commutate+0xe0>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
//	zcfound = 0;
}
 80068c8:	bf00      	nop
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20000010 	.word	0x20000010
 80068d0:	20000030 	.word	0x20000030
 80068d4:	2000000c 	.word	0x2000000c
 80068d8:	200002a0 	.word	0x200002a0

080068dc <playStartupTune>:

void playStartupTune(){
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
	TIM1->PSC = 75;
 80068e0:	4b12      	ldr	r3, [pc, #72]	; (800692c <playStartupTune+0x50>)
 80068e2:	224b      	movs	r2, #75	; 0x4b
 80068e4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->CCR1 = 5;
 80068e6:	4b11      	ldr	r3, [pc, #68]	; (800692c <playStartupTune+0x50>)
 80068e8:	2205      	movs	r2, #5
 80068ea:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 5;
 80068ec:	4b0f      	ldr	r3, [pc, #60]	; (800692c <playStartupTune+0x50>)
 80068ee:	2205      	movs	r2, #5
 80068f0:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 5;
 80068f2:	4b0e      	ldr	r3, [pc, #56]	; (800692c <playStartupTune+0x50>)
 80068f4:	2205      	movs	r2, #5
 80068f6:	63da      	str	r2, [r3, #60]	; 0x3c
	comStep(2);
 80068f8:	2002      	movs	r0, #2
 80068fa:	f7ff fb89 	bl	8006010 <comStep>
	HAL_Delay(100);
 80068fe:	2064      	movs	r0, #100	; 0x64
 8006900:	f7f9 fcfa 	bl	80002f8 <HAL_Delay>
	TIM1->PSC = 50;
 8006904:	4b09      	ldr	r3, [pc, #36]	; (800692c <playStartupTune+0x50>)
 8006906:	2232      	movs	r2, #50	; 0x32
 8006908:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 800690a:	2064      	movs	r0, #100	; 0x64
 800690c:	f7f9 fcf4 	bl	80002f8 <HAL_Delay>
	TIM1->PSC = 25;
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <playStartupTune+0x50>)
 8006912:	2219      	movs	r2, #25
 8006914:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8006916:	2064      	movs	r0, #100	; 0x64
 8006918:	f7f9 fcee 	bl	80002f8 <HAL_Delay>
	allOff();
 800691c:	f7ff fbbe 	bl	800609c <allOff>
	TIM1->PSC = 0;
 8006920:	4b02      	ldr	r3, [pc, #8]	; (800692c <playStartupTune+0x50>)
 8006922:	2200      	movs	r2, #0
 8006924:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006926:	bf00      	nop
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40012c00 	.word	0x40012c00

08006930 <playInputTune>:

void playInputTune(){
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
	TIM1->PSC = 100;
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <playInputTune+0x44>)
 8006936:	2264      	movs	r2, #100	; 0x64
 8006938:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->CCR1 = 5;
 800693a:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <playInputTune+0x44>)
 800693c:	2205      	movs	r2, #5
 800693e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 5;
 8006940:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <playInputTune+0x44>)
 8006942:	2205      	movs	r2, #5
 8006944:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 5;
 8006946:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <playInputTune+0x44>)
 8006948:	2205      	movs	r2, #5
 800694a:	63da      	str	r2, [r3, #60]	; 0x3c
	comStep(2);
 800694c:	2002      	movs	r0, #2
 800694e:	f7ff fb5f 	bl	8006010 <comStep>
	HAL_Delay(100);
 8006952:	2064      	movs	r0, #100	; 0x64
 8006954:	f7f9 fcd0 	bl	80002f8 <HAL_Delay>
	TIM1->PSC = 50;
 8006958:	4b06      	ldr	r3, [pc, #24]	; (8006974 <playInputTune+0x44>)
 800695a:	2232      	movs	r2, #50	; 0x32
 800695c:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 800695e:	2064      	movs	r0, #100	; 0x64
 8006960:	f7f9 fcca 	bl	80002f8 <HAL_Delay>
	allOff();
 8006964:	f7ff fb9a 	bl	800609c <allOff>
	TIM1->PSC = 0;
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <playInputTune+0x44>)
 800696a:	2200      	movs	r2, #0
 800696c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800696e:	bf00      	nop
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40012c00 	.word	0x40012c00

08006978 <zcfoundroutine>:





void zcfoundroutine(){
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
	thiszctime = TIM2->CNT;
 800697c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	461a      	mov	r2, r3
 8006984:	4b24      	ldr	r3, [pc, #144]	; (8006a18 <zcfoundroutine+0xa0>)
 8006986:	601a      	str	r2, [r3, #0]
	TIM2->CNT = 0;
 8006988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800698c:	2200      	movs	r2, #0
 800698e:	625a      	str	r2, [r3, #36]	; 0x24
	commutation_interval = thiszctime + commutation_interval / 2;
 8006990:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <zcfoundroutine+0xa4>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	0fda      	lsrs	r2, r3, #31
 8006996:	4413      	add	r3, r2
 8006998:	105b      	asrs	r3, r3, #1
 800699a:	461a      	mov	r2, r3
 800699c:	4b1e      	ldr	r3, [pc, #120]	; (8006a18 <zcfoundroutine+0xa0>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4413      	add	r3, r2
 80069a2:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <zcfoundroutine+0xa4>)
 80069a4:	6013      	str	r3, [r2, #0]
	waitTime = commutation_interval / 2;
 80069a6:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <zcfoundroutine+0xa4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	0fda      	lsrs	r2, r3, #31
 80069ac:	4413      	add	r3, r2
 80069ae:	105b      	asrs	r3, r3, #1
 80069b0:	461a      	mov	r2, r3
 80069b2:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <zcfoundroutine+0xa8>)
 80069b4:	601a      	str	r2, [r3, #0]
	blanktime = commutation_interval / 4;
 80069b6:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <zcfoundroutine+0xa4>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	da00      	bge.n	80069c0 <zcfoundroutine+0x48>
 80069be:	3303      	adds	r3, #3
 80069c0:	109b      	asrs	r3, r3, #2
 80069c2:	461a      	mov	r2, r3
 80069c4:	4b17      	ldr	r3, [pc, #92]	; (8006a24 <zcfoundroutine+0xac>)
 80069c6:	601a      	str	r2, [r3, #0]
	while (TIM2->CNT - thiszctime < waitTime - advance){
 80069c8:	bf00      	nop
 80069ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	4a11      	ldr	r2, [pc, #68]	; (8006a18 <zcfoundroutine+0xa0>)
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	4a12      	ldr	r2, [pc, #72]	; (8006a20 <zcfoundroutine+0xa8>)
 80069d8:	6811      	ldr	r1, [r2, #0]
 80069da:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <zcfoundroutine+0xb0>)
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	1a8a      	subs	r2, r1, r2
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d3f2      	bcc.n	80069ca <zcfoundroutine+0x52>

	}
	commutate();
 80069e4:	f7ff ff08 	bl	80067f8 <commutate>
	zc_counts++;
 80069e8:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <zcfoundroutine+0xb4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3301      	adds	r3, #1
 80069ee:	4a0f      	ldr	r2, [pc, #60]	; (8006a2c <zcfoundroutine+0xb4>)
 80069f0:	6013      	str	r3, [r2, #0]
	while (TIM2->CNT - thiszctime < waitTime + blanktime){
 80069f2:	bf00      	nop
 80069f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	4a07      	ldr	r2, [pc, #28]	; (8006a18 <zcfoundroutine+0xa0>)
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	4a07      	ldr	r2, [pc, #28]	; (8006a20 <zcfoundroutine+0xa8>)
 8006a02:	6811      	ldr	r1, [r2, #0]
 8006a04:	4a07      	ldr	r2, [pc, #28]	; (8006a24 <zcfoundroutine+0xac>)
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	440a      	add	r2, r1
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d3f2      	bcc.n	80069f4 <zcfoundroutine+0x7c>

	}
//	HAL_ADC_Start_IT(&hadc);
    zcfound = 0;
 8006a0e:	4b08      	ldr	r3, [pc, #32]	; (8006a30 <zcfoundroutine+0xb8>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	200003ec 	.word	0x200003ec
 8006a1c:	20000034 	.word	0x20000034
 8006a20:	200000a8 	.word	0x200000a8
 8006a24:	200003a8 	.word	0x200003a8
 8006a28:	20000064 	.word	0x20000064
 8006a2c:	2000029c 	.word	0x2000029c
 8006a30:	200000a4 	.word	0x200000a4

08006a34 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	//TIM1->CCR4 = adc_timer;


if(!zcfound){
 8006a3c:	4b14      	ldr	r3, [pc, #80]	; (8006a90 <HAL_ADC_ConvCpltCallback+0x5c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d121      	bne.n	8006a88 <HAL_ADC_ConvCpltCallback+0x54>
	bemf = HAL_ADC_GetValue(hadc);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7fa f9ea 	bl	8000e1e <HAL_ADC_GetValue>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <HAL_ADC_ConvCpltCallback+0x60>)
 8006a50:	601a      	str	r2, [r3, #0]
if (rising){
 8006a52:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <HAL_ADC_ConvCpltCallback+0x64>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00b      	beq.n	8006a72 <HAL_ADC_ConvCpltCallback+0x3e>
	if (bemf > threshold_up){
 8006a5a:	4b0e      	ldr	r3, [pc, #56]	; (8006a94 <HAL_ADC_ConvCpltCallback+0x60>)
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <HAL_ADC_ConvCpltCallback+0x68>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	dd10      	ble.n	8006a88 <HAL_ADC_ConvCpltCallback+0x54>

     bemfcounter++;
 8006a66:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	4a0c      	ldr	r2, [pc, #48]	; (8006aa0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8006a6e:	6013      	str	r3, [r2, #0]
		bemfcounter++;

	}
	}
}
}
 8006a70:	e00a      	b.n	8006a88 <HAL_ADC_ConvCpltCallback+0x54>
	if (bemf <= threshold_down){
 8006a72:	4b08      	ldr	r3, [pc, #32]	; (8006a94 <HAL_ADC_ConvCpltCallback+0x60>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <HAL_ADC_ConvCpltCallback+0x70>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	dc04      	bgt.n	8006a88 <HAL_ADC_ConvCpltCallback+0x54>
		bemfcounter++;
 8006a7e:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a06      	ldr	r2, [pc, #24]	; (8006aa0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8006a86:	6013      	str	r3, [r2, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	200000a4 	.word	0x200000a4
 8006a94:	200000b0 	.word	0x200000b0
 8006a98:	2000000c 	.word	0x2000000c
 8006a9c:	20000014 	.word	0x20000014
 8006aa0:	200002a0 	.word	0x200002a0
 8006aa4:	20000070 	.word	0x20000070

08006aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006aac:	f7f9 fbb4 	bl	8000218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006ab0:	f000 fa74 	bl	8006f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ab4:	f000 fe50 	bl	8007758 <MX_GPIO_Init>
  MX_DMA_Init();
 8006ab8:	f000 fe24 	bl	8007704 <MX_DMA_Init>
  MX_ADC1_Init();
 8006abc:	f000 fad6 	bl	800706c <MX_ADC1_Init>
  MX_ADC2_Init();
 8006ac0:	f000 fb4e 	bl	8007160 <MX_ADC2_Init>
  MX_IWDG_Init();
 8006ac4:	f000 fbb4 	bl	8007230 <MX_IWDG_Init>
  MX_TIM1_Init();
 8006ac8:	f000 fbd0 	bl	800726c <MX_TIM1_Init>
  MX_TIM2_Init();
 8006acc:	f000 fc98 	bl	8007400 <MX_TIM2_Init>
  MX_TIM4_Init();
 8006ad0:	f000 fce4 	bl	800749c <MX_TIM4_Init>
  MX_TIM8_Init();
 8006ad4:	f000 fd3a 	bl	800754c <MX_TIM8_Init>
  MX_TIM16_Init();
 8006ad8:	f000 fdca 	bl	8007670 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8006adc:	2100      	movs	r1, #0
 8006ade:	4892      	ldr	r0, [pc, #584]	; (8006d28 <main+0x280>)
 8006ae0:	f7fd f87a 	bl	8003bd8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);             // uncomment for comp_pwm
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4890      	ldr	r0, [pc, #576]	; (8006d28 <main+0x280>)
 8006ae8:	f7fe fe2e 	bl	8005748 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8006aec:	2104      	movs	r1, #4
 8006aee:	488e      	ldr	r0, [pc, #568]	; (8006d28 <main+0x280>)
 8006af0:	f7fd f872 	bl	8003bd8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8006af4:	2104      	movs	r1, #4
 8006af6:	488c      	ldr	r0, [pc, #560]	; (8006d28 <main+0x280>)
 8006af8:	f7fe fe26 	bl	8005748 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8006afc:	2108      	movs	r1, #8
 8006afe:	488a      	ldr	r0, [pc, #552]	; (8006d28 <main+0x280>)
 8006b00:	f7fd f86a 	bl	8003bd8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8006b04:	2108      	movs	r1, #8
 8006b06:	4888      	ldr	r0, [pc, #544]	; (8006d28 <main+0x280>)
 8006b08:	f7fe fe1e 	bl	8005748 <HAL_TIMEx_PWMN_Start>
  HAL_Delay(10);
 8006b0c:	200a      	movs	r0, #10
 8006b0e:	f7f9 fbf3 	bl	80002f8 <HAL_Delay>


  if (HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4) != HAL_OK)
 8006b12:	210c      	movs	r1, #12
 8006b14:	4885      	ldr	r0, [pc, #532]	; (8006d2c <main+0x284>)
 8006b16:	f7fc ffdb 	bl	8003ad0 <HAL_TIM_OC_Start>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <main+0x7c>
  		{
	  Error_Handler();
 8006b20:	f000 fe6c 	bl	80077fc <Error_Handler>
    }

  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8006b24:	4882      	ldr	r0, [pc, #520]	; (8006d30 <main+0x288>)
 8006b26:	f7fa f80b 	bl	8000b40 <HAL_ADC_Start_IT>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <main+0x8c>
	  return 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	e210      	b.n	8006f56 <main+0x4ae>
  if (HAL_ADC_Start_IT(&hadc2) != HAL_OK)
 8006b34:	487f      	ldr	r0, [pc, #508]	; (8006d34 <main+0x28c>)
 8006b36:	f7fa f803 	bl	8000b40 <HAL_ADC_Start_IT>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <main+0x9c>
 	  return 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	e208      	b.n	8006f56 <main+0x4ae>

  TIM4->CCR4 = 800;                // adc read timer.
 8006b44:	4b7c      	ldr	r3, [pc, #496]	; (8006d38 <main+0x290>)
 8006b46:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006b4a:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_Base_Start(&htim2);
 8006b4c:	487b      	ldr	r0, [pc, #492]	; (8006d3c <main+0x294>)
 8006b4e:	f7fc ff13 	bl	8003978 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8006b52:	487b      	ldr	r0, [pc, #492]	; (8006d40 <main+0x298>)
 8006b54:	f7fc ff10 	bl	8003978 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 8006b58:	487a      	ldr	r0, [pc, #488]	; (8006d44 <main+0x29c>)
 8006b5a:	f7fc ff63 	bl	8003a24 <HAL_TIM_Base_Start_IT>

  HAL_TIM_IC_Start_DMA(&htim8, TIM_CHANNEL_1, dma_buffer , 64);
 8006b5e:	2340      	movs	r3, #64	; 0x40
 8006b60:	4a79      	ldr	r2, [pc, #484]	; (8006d48 <main+0x2a0>)
 8006b62:	2100      	movs	r1, #0
 8006b64:	4876      	ldr	r0, [pc, #472]	; (8006d40 <main+0x298>)
 8006b66:	f7fd f8c5 	bl	8003cf4 <HAL_TIM_IC_Start_DMA>

  GPIOB->BSRR = GPIO_PIN_7;            // to put bemf into on or off time sense mode, high output for off time ( default)
 8006b6a:	4b78      	ldr	r3, [pc, #480]	; (8006d4c <main+0x2a4>)
 8006b6c:	2280      	movs	r2, #128	; 0x80
 8006b6e:	619a      	str	r2, [r3, #24]

  playStartupTune();
 8006b70:	f7ff feb4 	bl	80068dc <playStartupTune>

  //GPIOA->BSRR = GPIO_PIN_11;          // maybe LED?
  running = 0;
 8006b74:	4b76      	ldr	r3, [pc, #472]	; (8006d50 <main+0x2a8>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
  duty_cycle = 1;
 8006b7a:	4b76      	ldr	r3, [pc, #472]	; (8006d54 <main+0x2ac>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8006b80:	4875      	ldr	r0, [pc, #468]	; (8006d58 <main+0x2b0>)
 8006b82:	f7fb fee6 	bl	8002952 <HAL_IWDG_Init>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <main+0xe8>
	{
		/* Initialization Error */
		Error_Handler();
 8006b8c:	f000 fe36 	bl	80077fc <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count++;
 8006b90:	4b72      	ldr	r3, [pc, #456]	; (8006d5c <main+0x2b4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	4a71      	ldr	r2, [pc, #452]	; (8006d5c <main+0x2b4>)
 8006b98:	6013      	str	r3, [r2, #0]
	  if (count  > 20000){
 8006b9a:	4b70      	ldr	r3, [pc, #448]	; (8006d5c <main+0x2b4>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	dd06      	ble.n	8006bb4 <main+0x10c>
	 	 count = 0;
 8006ba6:	4b6d      	ldr	r3, [pc, #436]	; (8006d5c <main+0x2b4>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]
	 	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8006bac:	2140      	movs	r1, #64	; 0x40
 8006bae:	4867      	ldr	r0, [pc, #412]	; (8006d4c <main+0x2a4>)
 8006bb0:	f7fb feb6 	bl	8002920 <HAL_GPIO_TogglePin>
	  }

	  if (inputSet == 0){
 8006bb4:	4b6a      	ldr	r3, [pc, #424]	; (8006d60 <main+0x2b8>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <main+0x118>
	 	 detectInput();
 8006bbc:	f7ff faae 	bl	800611c <detectInput>
	  }
	 	  if (zero_input_count > 200 && !armed){
 8006bc0:	4b68      	ldr	r3, [pc, #416]	; (8006d64 <main+0x2bc>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2bc8      	cmp	r3, #200	; 0xc8
 8006bc6:	dd08      	ble.n	8006bda <main+0x132>
 8006bc8:	4b67      	ldr	r3, [pc, #412]	; (8006d68 <main+0x2c0>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d104      	bne.n	8006bda <main+0x132>
	 		  armed = 1;
 8006bd0:	4b65      	ldr	r3, [pc, #404]	; (8006d68 <main+0x2c0>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	701a      	strb	r2, [r3, #0]
	 		  playInputTune();
 8006bd6:	f7ff feab 	bl	8006930 <playInputTune>
	 	  }

	 	  if (bi_direction == 1 && proshot == 0){
 8006bda:	4b64      	ldr	r3, [pc, #400]	; (8006d6c <main+0x2c4>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d155      	bne.n	8006c8e <main+0x1e6>
 8006be2:	4b63      	ldr	r3, [pc, #396]	; (8006d70 <main+0x2c8>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d151      	bne.n	8006c8e <main+0x1e6>

	 		if ( newinput > 1100 ){
 8006bea:	4b62      	ldr	r3, [pc, #392]	; (8006d74 <main+0x2cc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f240 424c 	movw	r2, #1100	; 0x44c
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	dd1b      	ble.n	8006c2e <main+0x186>
	 			if(reversed_direction){
 8006bf6:	4b60      	ldr	r3, [pc, #384]	; (8006d78 <main+0x2d0>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <main+0x166>
	 			if (forward == 1){
 8006bfe:	4b5f      	ldr	r3, [pc, #380]	; (8006d7c <main+0x2d4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d10a      	bne.n	8006c1c <main+0x174>
	 				forward = 0 ;
 8006c06:	4b5d      	ldr	r3, [pc, #372]	; (8006d7c <main+0x2d4>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	e006      	b.n	8006c1c <main+0x174>
	 			}
	 			}else{
	 			if (forward == 0){
 8006c0e:	4b5b      	ldr	r3, [pc, #364]	; (8006d7c <main+0x2d4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d102      	bne.n	8006c1c <main+0x174>
	 				forward = 1 ;
 8006c16:	4b59      	ldr	r3, [pc, #356]	; (8006d7c <main+0x2d4>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
	 			}
	 			}
	 				input = (newinput - 1050)*3;
 8006c1c:	4b55      	ldr	r3, [pc, #340]	; (8006d74 <main+0x2cc>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f2a3 421a 	subw	r2, r3, #1050	; 0x41a
 8006c24:	4613      	mov	r3, r2
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	4413      	add	r3, r2
 8006c2a:	4a55      	ldr	r2, [pc, #340]	; (8006d80 <main+0x2d8>)
 8006c2c:	6013      	str	r3, [r2, #0]
	 		}

	 		if (newinput < 800) {
 8006c2e:	4b51      	ldr	r3, [pc, #324]	; (8006d74 <main+0x2cc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006c36:	da1b      	bge.n	8006c70 <main+0x1c8>
	 			if(reversed_direction){
 8006c38:	4b4f      	ldr	r3, [pc, #316]	; (8006d78 <main+0x2d0>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <main+0x1a8>
	 				if (forward == 0){
 8006c40:	4b4e      	ldr	r3, [pc, #312]	; (8006d7c <main+0x2d4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <main+0x1b6>
	 				forward = 1;
 8006c48:	4b4c      	ldr	r3, [pc, #304]	; (8006d7c <main+0x2d4>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e006      	b.n	8006c5e <main+0x1b6>
	 			}
	 			}else{


	 			if (forward == 1){
 8006c50:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <main+0x2d4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d102      	bne.n	8006c5e <main+0x1b6>
	 				forward = 0;
 8006c58:	4b48      	ldr	r3, [pc, #288]	; (8006d7c <main+0x2d4>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
	 			}
	 			}
	 				input = (800 - newinput) * 3;
 8006c5e:	4b45      	ldr	r3, [pc, #276]	; (8006d74 <main+0x2cc>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f5c3 7248 	rsb	r2, r3, #800	; 0x320
 8006c66:	4613      	mov	r3, r2
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	4413      	add	r3, r2
 8006c6c:	4a44      	ldr	r2, [pc, #272]	; (8006d80 <main+0x2d8>)
 8006c6e:	6013      	str	r3, [r2, #0]
	 		}

	 		if (newinput > 800 && newinput < 1100){
 8006c70:	4b40      	ldr	r3, [pc, #256]	; (8006d74 <main+0x2cc>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006c78:	dd53      	ble.n	8006d22 <main+0x27a>
 8006c7a:	4b3e      	ldr	r3, [pc, #248]	; (8006d74 <main+0x2cc>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f240 424b 	movw	r2, #1099	; 0x44b
 8006c82:	4293      	cmp	r3, r2
 8006c84:	dc4d      	bgt.n	8006d22 <main+0x27a>
	 			input = 0;
 8006c86:	4b3e      	ldr	r3, [pc, #248]	; (8006d80 <main+0x2d8>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
	 		if (newinput > 800 && newinput < 1100){
 8006c8c:	e049      	b.n	8006d22 <main+0x27a>

	 		}
	 	}else if((proshot || dshot)&& bi_direction){
 8006c8e:	4b38      	ldr	r3, [pc, #224]	; (8006d70 <main+0x2c8>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d103      	bne.n	8006c9e <main+0x1f6>
 8006c96:	4b3b      	ldr	r3, [pc, #236]	; (8006d84 <main+0x2dc>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d03c      	beq.n	8006d18 <main+0x270>
 8006c9e:	4b33      	ldr	r3, [pc, #204]	; (8006d6c <main+0x2c4>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d038      	beq.n	8006d18 <main+0x270>
	  					if ( newinput > 1100 ){
 8006ca6:	4b33      	ldr	r3, [pc, #204]	; (8006d74 <main+0x2cc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f240 424c 	movw	r2, #1100	; 0x44c
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	dd0d      	ble.n	8006cce <main+0x226>

	  					  if (!forward){
 8006cb2:	4b32      	ldr	r3, [pc, #200]	; (8006d7c <main+0x2d4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <main+0x218>
	  						forward = 1 ;
 8006cba:	4b30      	ldr	r3, [pc, #192]	; (8006d7c <main+0x2d4>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
	  					  }
	  						input = (newinput - 1100) * 2 ;
 8006cc0:	4b2c      	ldr	r3, [pc, #176]	; (8006d74 <main+0x2cc>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4a2d      	ldr	r2, [pc, #180]	; (8006d80 <main+0x2d8>)
 8006ccc:	6013      	str	r3, [r2, #0]


	  					}if ( newinput <= 1047 ){
 8006cce:	4b29      	ldr	r3, [pc, #164]	; (8006d74 <main+0x2cc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8006cd6:	da0c      	bge.n	8006cf2 <main+0x24a>
	  						if(forward){
 8006cd8:	4b28      	ldr	r3, [pc, #160]	; (8006d7c <main+0x2d4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <main+0x23e>
	  					forward = 0;
 8006ce0:	4b26      	ldr	r3, [pc, #152]	; (8006d7c <main+0x2d4>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
	  						}
	  						input = (newinput - 90) * 2 ;
 8006ce6:	4b23      	ldr	r3, [pc, #140]	; (8006d74 <main+0x2cc>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3b5a      	subs	r3, #90	; 0x5a
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	4a24      	ldr	r2, [pc, #144]	; (8006d80 <main+0x2d8>)
 8006cf0:	6013      	str	r3, [r2, #0]
	  					}
	  					if ((newinput > 1047 && newinput < 1100) || newinput < 100){
 8006cf2:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <main+0x2cc>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8006cfa:	db05      	blt.n	8006d08 <main+0x260>
 8006cfc:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <main+0x2cc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f240 424b 	movw	r2, #1099	; 0x44b
 8006d04:	4293      	cmp	r3, r2
 8006d06:	dd03      	ble.n	8006d10 <main+0x268>
 8006d08:	4b1a      	ldr	r3, [pc, #104]	; (8006d74 <main+0x2cc>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b63      	cmp	r3, #99	; 0x63
 8006d0e:	dc3b      	bgt.n	8006d88 <main+0x2e0>
	  						input = 0;
 8006d10:	4b1b      	ldr	r3, [pc, #108]	; (8006d80 <main+0x2d8>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
	  					if ((newinput > 1047 && newinput < 1100) || newinput < 100){
 8006d16:	e037      	b.n	8006d88 <main+0x2e0>
	  					}


	  				}else{
	 	 input = newinput;
 8006d18:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <main+0x2cc>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a18      	ldr	r2, [pc, #96]	; (8006d80 <main+0x2d8>)
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	e033      	b.n	8006d8a <main+0x2e2>
	 		if (newinput > 800 && newinput < 1100){
 8006d22:	bf00      	nop
 8006d24:	e031      	b.n	8006d8a <main+0x2e2>
 8006d26:	bf00      	nop
 8006d28:	200003ac 	.word	0x200003ac
 8006d2c:	20000100 	.word	0x20000100
 8006d30:	20000228 	.word	0x20000228
 8006d34:	20000140 	.word	0x20000140
 8006d38:	40000800 	.word	0x40000800
 8006d3c:	200003f0 	.word	0x200003f0
 8006d40:	200000c0 	.word	0x200000c0
 8006d44:	20000434 	.word	0x20000434
 8006d48:	200002a4 	.word	0x200002a4
 8006d4c:	48000400 	.word	0x48000400
 8006d50:	20000060 	.word	0x20000060
 8006d54:	2000002c 	.word	0x2000002c
 8006d58:	200001b0 	.word	0x200001b0
 8006d5c:	20000068 	.word	0x20000068
 8006d60:	2000009c 	.word	0x2000009c
 8006d64:	2000005c 	.word	0x2000005c
 8006d68:	200000a3 	.word	0x200000a3
 8006d6c:	20000008 	.word	0x20000008
 8006d70:	2000009e 	.word	0x2000009e
 8006d74:	20000094 	.word	0x20000094
 8006d78:	20000058 	.word	0x20000058
 8006d7c:	20000010 	.word	0x20000010
 8006d80:	20000090 	.word	0x20000090
 8006d84:	2000009d 	.word	0x2000009d
	  					if ((newinput > 1047 && newinput < 1100) || newinput < 100){
 8006d88:	bf00      	nop
	 }




	 	if ((input > 47) && (armed == 1)) {
 8006d8a:	4b74      	ldr	r3, [pc, #464]	; (8006f5c <main+0x4b4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b2f      	cmp	r3, #47	; 0x2f
 8006d90:	dd5e      	ble.n	8006e50 <main+0x3a8>
 8006d92:	4b73      	ldr	r3, [pc, #460]	; (8006f60 <main+0x4b8>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d15a      	bne.n	8006e50 <main+0x3a8>
	 		  			running = 1;
 8006d9a:	4b72      	ldr	r3, [pc, #456]	; (8006f64 <main+0x4bc>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]

	 		  			duty_cycle = (input  - 40) * 4;
 8006da0:	4b6e      	ldr	r3, [pc, #440]	; (8006f5c <main+0x4b4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3b28      	subs	r3, #40	; 0x28
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4a6f      	ldr	r2, [pc, #444]	; (8006f68 <main+0x4c0>)
 8006daa:	6013      	str	r3, [r2, #0]

	 		  			if (zc_counts < 20) {
 8006dac:	4b6f      	ldr	r3, [pc, #444]	; (8006f6c <main+0x4c4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b13      	cmp	r3, #19
 8006db2:	dc11      	bgt.n	8006dd8 <main+0x330>
	 		  				if (duty_cycle < 600) {
 8006db4:	4b6c      	ldr	r3, [pc, #432]	; (8006f68 <main+0x4c0>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8006dbc:	da03      	bge.n	8006dc6 <main+0x31e>
	 		  					duty_cycle = 600;
 8006dbe:	4b6a      	ldr	r3, [pc, #424]	; (8006f68 <main+0x4c0>)
 8006dc0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006dc4:	601a      	str	r2, [r3, #0]
	 		  				}
	 		  				if (duty_cycle > 1800) {
 8006dc6:	4b68      	ldr	r3, [pc, #416]	; (8006f68 <main+0x4c0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8006dce:	dd03      	ble.n	8006dd8 <main+0x330>
	 		  					duty_cycle = 1800;
 8006dd0:	4b65      	ldr	r3, [pc, #404]	; (8006f68 <main+0x4c0>)
 8006dd2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006dd6:	601a      	str	r2, [r3, #0]
	 		  				}
	 		  			}

	 		  			if (zc_counts < 50 ){
 8006dd8:	4b64      	ldr	r3, [pc, #400]	; (8006f6c <main+0x4c4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b31      	cmp	r3, #49	; 0x31
 8006dde:	dc08      	bgt.n	8006df2 <main+0x34a>
	 		  				if (duty_cycle > 2000){
 8006de0:	4b61      	ldr	r3, [pc, #388]	; (8006f68 <main+0x4c0>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006de8:	dd03      	ble.n	8006df2 <main+0x34a>
	 		  					duty_cycle = 2000;
 8006dea:	4b5f      	ldr	r3, [pc, #380]	; (8006f68 <main+0x4c0>)
 8006dec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006df0:	601a      	str	r2, [r3, #0]
	 		  				}
	 		  			}


	 		  				if (duty_cycle > 3000) {                             // safety!!!  set to only 50 percent power
 8006df2:	4b5d      	ldr	r3, [pc, #372]	; (8006f68 <main+0x4c0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	dd03      	ble.n	8006e06 <main+0x35e>
	 		  					duty_cycle = 3000;
 8006dfe:	4b5a      	ldr	r3, [pc, #360]	; (8006f68 <main+0x4c0>)
 8006e00:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006e04:	601a      	str	r2, [r3, #0]
	 		  				}
	 		  				if (duty_cycle < 180) {
 8006e06:	4b58      	ldr	r3, [pc, #352]	; (8006f68 <main+0x4c0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2bb3      	cmp	r3, #179	; 0xb3
 8006e0c:	dc02      	bgt.n	8006e14 <main+0x36c>
	 		  					duty_cycle = 180;
 8006e0e:	4b56      	ldr	r3, [pc, #344]	; (8006f68 <main+0x4c0>)
 8006e10:	22b4      	movs	r2, #180	; 0xb4
 8006e12:	601a      	str	r2, [r3, #0]
	 		  				}

	 		  				if (duty_cycle < 2000){
 8006e14:	4b54      	ldr	r3, [pc, #336]	; (8006f68 <main+0x4c0>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e1c:	da03      	bge.n	8006e26 <main+0x37e>
	 		  		 		 TIM4->CCR4 = 3000;
 8006e1e:	4b54      	ldr	r3, [pc, #336]	; (8006f70 <main+0x4c8>)
 8006e20:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006e24:	641a      	str	r2, [r3, #64]	; 0x40
	 		  		 		 }


	 		  		 	 if (duty_cycle > 2000){
 8006e26:	4b50      	ldr	r3, [pc, #320]	; (8006f68 <main+0x4c0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e2e:	dd03      	ble.n	8006e38 <main+0x390>
	 		  		 		 TIM4->CCR4 = 6000;
 8006e30:	4b4f      	ldr	r3, [pc, #316]	; (8006f70 <main+0x4c8>)
 8006e32:	f241 7270 	movw	r2, #6000	; 0x1770
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40
	 		  		 	 }

	 		  				TIM1->CCR1 = duty_cycle;// set duty cycle to 50 out of 768 to start.
 8006e38:	4b4b      	ldr	r3, [pc, #300]	; (8006f68 <main+0x4c0>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	4b4d      	ldr	r3, [pc, #308]	; (8006f74 <main+0x4cc>)
 8006e3e:	635a      	str	r2, [r3, #52]	; 0x34
	 		  				TIM1->CCR2 = duty_cycle;
 8006e40:	4b49      	ldr	r3, [pc, #292]	; (8006f68 <main+0x4c0>)
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	4b4b      	ldr	r3, [pc, #300]	; (8006f74 <main+0x4cc>)
 8006e46:	639a      	str	r2, [r3, #56]	; 0x38
	 		  				TIM1->CCR3 = duty_cycle;
 8006e48:	4b47      	ldr	r3, [pc, #284]	; (8006f68 <main+0x4c0>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	4b49      	ldr	r3, [pc, #292]	; (8006f74 <main+0x4cc>)
 8006e4e:	63da      	str	r2, [r3, #60]	; 0x3c
	 		  				//	TIM1->CCR4 = duty_cycle;

	  }

	 if ( duty_cycle < 1000){
 8006e50:	4b45      	ldr	r3, [pc, #276]	; (8006f68 <main+0x4c0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e58:	da06      	bge.n	8006e68 <main+0x3c0>
	 	min_zc_counts_up = 10;
 8006e5a:	4b47      	ldr	r3, [pc, #284]	; (8006f78 <main+0x4d0>)
 8006e5c:	220a      	movs	r2, #10
 8006e5e:	601a      	str	r2, [r3, #0]
	 	min_zc_counts_down = 10;
 8006e60:	4b46      	ldr	r3, [pc, #280]	; (8006f7c <main+0x4d4>)
 8006e62:	220a      	movs	r2, #10
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e013      	b.n	8006e90 <main+0x3e8>
	 }else{
	 	min_zc_counts_up = commutation_interval / 5000;
 8006e68:	4b45      	ldr	r3, [pc, #276]	; (8006f80 <main+0x4d8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a45      	ldr	r2, [pc, #276]	; (8006f84 <main+0x4dc>)
 8006e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8006e72:	12d2      	asrs	r2, r2, #11
 8006e74:	17db      	asrs	r3, r3, #31
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	4a3f      	ldr	r2, [pc, #252]	; (8006f78 <main+0x4d0>)
 8006e7a:	6013      	str	r3, [r2, #0]
	 	min_zc_counts_down = commutation_interval / 5000;
 8006e7c:	4b40      	ldr	r3, [pc, #256]	; (8006f80 <main+0x4d8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a40      	ldr	r2, [pc, #256]	; (8006f84 <main+0x4dc>)
 8006e82:	fb82 1203 	smull	r1, r2, r2, r3
 8006e86:	12d2      	asrs	r2, r2, #11
 8006e88:	17db      	asrs	r3, r3, #31
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	4a3b      	ldr	r2, [pc, #236]	; (8006f7c <main+0x4d4>)
 8006e8e:	6013      	str	r3, [r2, #0]
	 }


	 if (input < 140){
 8006e90:	4b32      	ldr	r3, [pc, #200]	; (8006f5c <main+0x4b4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b8b      	cmp	r3, #139	; 0x8b
 8006e96:	dc18      	bgt.n	8006eca <main+0x422>
	 	 running = 0;
 8006e98:	4b32      	ldr	r3, [pc, #200]	; (8006f64 <main+0x4bc>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
	 	 duty_cycle = 0;
 8006e9e:	4b32      	ldr	r3, [pc, #200]	; (8006f68 <main+0x4c0>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
	 	zc_counts = 0;
 8006ea4:	4b31      	ldr	r3, [pc, #196]	; (8006f6c <main+0x4c4>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]





	 	 TIM1->CCR1 = duty_cycle;												// set duty cycle to 50 out of 768 to start.
 8006eaa:	4b2f      	ldr	r3, [pc, #188]	; (8006f68 <main+0x4c0>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b31      	ldr	r3, [pc, #196]	; (8006f74 <main+0x4cc>)
 8006eb0:	635a      	str	r2, [r3, #52]	; 0x34
	 	 TIM1->CCR2 = duty_cycle;
 8006eb2:	4b2d      	ldr	r3, [pc, #180]	; (8006f68 <main+0x4c0>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4b2f      	ldr	r3, [pc, #188]	; (8006f74 <main+0x4cc>)
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
	 	 TIM1->CCR3 = duty_cycle;
 8006eba:	4b2b      	ldr	r3, [pc, #172]	; (8006f68 <main+0x4c0>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b2d      	ldr	r3, [pc, #180]	; (8006f74 <main+0x4cc>)
 8006ec0:	63da      	str	r2, [r3, #60]	; 0x3c
	 	 TIM4->CNT = TIM1->CNT;                 // lazy synchronization
 8006ec2:	4b2c      	ldr	r3, [pc, #176]	; (8006f74 <main+0x4cc>)
 8006ec4:	4a2a      	ldr	r2, [pc, #168]	; (8006f70 <main+0x4c8>)
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	6253      	str	r3, [r2, #36]	; 0x24

	 	 // test speed of adc change

	 	//  GPIOF->BRR = GPIO_PIN_0;

	 	  if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)                   // watchdog refresh
 8006eca:	482f      	ldr	r0, [pc, #188]	; (8006f88 <main+0x4e0>)
 8006ecc:	f7fb fd87 	bl	80029de <HAL_IWDG_Refresh>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <main+0x432>
	 	  			{
	 	  				/* Refresh Error */
	 	  				Error_Handler();
 8006ed6:	f000 fc91 	bl	80077fc <Error_Handler>
	 	  			}




	  if (!zcfound){
 8006eda:	4b2c      	ldr	r3, [pc, #176]	; (8006f8c <main+0x4e4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d126      	bne.n	8006f30 <main+0x488>
	 	  		  if (rising){
 8006ee2:	4b2b      	ldr	r3, [pc, #172]	; (8006f90 <main+0x4e8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d011      	beq.n	8006f0e <main+0x466>
	 	  		 if (bemfcounter > min_zc_counts_up){
 8006eea:	4b2a      	ldr	r3, [pc, #168]	; (8006f94 <main+0x4ec>)
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b22      	ldr	r3, [pc, #136]	; (8006f78 <main+0x4d0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	dd1c      	ble.n	8006f30 <main+0x488>
	 	  			 GPIOF->BSRR = GPIO_PIN_0;
 8006ef6:	4b28      	ldr	r3, [pc, #160]	; (8006f98 <main+0x4f0>)
 8006ef8:	2201      	movs	r2, #1
 8006efa:	619a      	str	r2, [r3, #24]
	 	  			 zcfound = 1;
 8006efc:	4b23      	ldr	r3, [pc, #140]	; (8006f8c <main+0x4e4>)
 8006efe:	2201      	movs	r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
	 	  			 bemfcounter = 0;
 8006f02:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <main+0x4ec>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]
	 	  			 zcfoundroutine();
 8006f08:	f7ff fd36 	bl	8006978 <zcfoundroutine>
 8006f0c:	e010      	b.n	8006f30 <main+0x488>
	 	  		//	 break;

	 	  		}
	 	  		  }else{
	 	  			  if (bemfcounter > min_zc_counts_down){
 8006f0e:	4b21      	ldr	r3, [pc, #132]	; (8006f94 <main+0x4ec>)
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <main+0x4d4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	dd0a      	ble.n	8006f30 <main+0x488>
	 	  			  			 GPIOF->BSRR = GPIO_PIN_0;
 8006f1a:	4b1f      	ldr	r3, [pc, #124]	; (8006f98 <main+0x4f0>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	619a      	str	r2, [r3, #24]
	 	  			  			 zcfound = 1;
 8006f20:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <main+0x4e4>)
 8006f22:	2201      	movs	r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
	 	  			  			 bemfcounter = 0;
 8006f26:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <main+0x4ec>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
	 	  			  			 zcfoundroutine();
 8006f2c:	f7ff fd24 	bl	8006978 <zcfoundroutine>
	 	  			  //			 break;

	 	  			  		}
	 	  		  }
	 	  	  }
  	  if (TIM2->CNT > 60000 && running == 1){           // this starts the motor
 8006f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	f67f ae28 	bls.w	8006b90 <main+0xe8>
 8006f40:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <main+0x4bc>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	f47f ae23 	bne.w	8006b90 <main+0xe8>
  		//  TIM3->CNT = commutation_interval / 2;
  		  zcfoundroutine();
 8006f4a:	f7ff fd15 	bl	8006978 <zcfoundroutine>
  		zc_counts = 0;
 8006f4e:	4b07      	ldr	r3, [pc, #28]	; (8006f6c <main+0x4c4>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	601a      	str	r2, [r3, #0]
	  count++;
 8006f54:	e61c      	b.n	8006b90 <main+0xe8>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000090 	.word	0x20000090
 8006f60:	200000a3 	.word	0x200000a3
 8006f64:	20000060 	.word	0x20000060
 8006f68:	2000002c 	.word	0x2000002c
 8006f6c:	2000029c 	.word	0x2000029c
 8006f70:	40000800 	.word	0x40000800
 8006f74:	40012c00 	.word	0x40012c00
 8006f78:	20000024 	.word	0x20000024
 8006f7c:	20000028 	.word	0x20000028
 8006f80:	20000034 	.word	0x20000034
 8006f84:	68db8bad 	.word	0x68db8bad
 8006f88:	200001b0 	.word	0x200001b0
 8006f8c:	200000a4 	.word	0x200000a4
 8006f90:	2000000c 	.word	0x2000000c
 8006f94:	200002a0 	.word	0x200002a0
 8006f98:	48001400 	.word	0x48001400

08006f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b0a4      	sub	sp, #144	; 0x90
 8006fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006fa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006fa6:	2238      	movs	r2, #56	; 0x38
 8006fa8:	2100      	movs	r1, #0
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 ff1e 	bl	8007dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006fb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	605a      	str	r2, [r3, #4]
 8006fba:	609a      	str	r2, [r3, #8]
 8006fbc:	60da      	str	r2, [r3, #12]
 8006fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	2244      	movs	r2, #68	; 0x44
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 ff10 	bl	8007dec <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8006fcc:	2000      	movs	r0, #0
 8006fce:	f7fb fd17 	bl	8002a00 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8006fd2:	230a      	movs	r3, #10
 8006fd4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fda:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006fdc:	2340      	movs	r3, #64	; 0x40
 8006fde:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8006fec:	2304      	movs	r3, #4
 8006fee:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8006ff0:	2355      	movs	r3, #85	; 0x55
 8006ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007002:	2302      	movs	r3, #2
 8007004:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007008:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800700c:	4618      	mov	r0, r3
 800700e:	f7fb fd9b 	bl	8002b48 <HAL_RCC_OscConfig>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8007018:	f000 fbf0 	bl	80077fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800701c:	230f      	movs	r3, #15
 800701e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007020:	2303      	movs	r3, #3
 8007022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007024:	2300      	movs	r3, #0
 8007026:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007028:	2300      	movs	r3, #0
 800702a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800702c:	2300      	movs	r3, #0
 800702e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007030:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007034:	2108      	movs	r1, #8
 8007036:	4618      	mov	r0, r3
 8007038:	f7fc f89e 	bl	8003178 <HAL_RCC_ClockConfig>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8007042:	f000 fbdb 	bl	80077fc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8007046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800704c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007052:	463b      	mov	r3, r7
 8007054:	4618      	mov	r0, r3
 8007056:	f7fc fa73 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8007060:	f000 fbcc 	bl	80077fc <Error_Handler>
  }
}
 8007064:	bf00      	nop
 8007066:	3790      	adds	r7, #144	; 0x90
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08c      	sub	sp, #48	; 0x30
 8007070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	605a      	str	r2, [r3, #4]
 800707c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800707e:	1d3b      	adds	r3, r7, #4
 8007080:	2220      	movs	r2, #32
 8007082:	2100      	movs	r1, #0
 8007084:	4618      	mov	r0, r3
 8007086:	f000 feb1 	bl	8007dec <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800708a:	4b33      	ldr	r3, [pc, #204]	; (8007158 <MX_ADC1_Init+0xec>)
 800708c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007090:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007092:	4b31      	ldr	r3, [pc, #196]	; (8007158 <MX_ADC1_Init+0xec>)
 8007094:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007098:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800709a:	4b2f      	ldr	r3, [pc, #188]	; (8007158 <MX_ADC1_Init+0xec>)
 800709c:	2200      	movs	r2, #0
 800709e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070a0:	4b2d      	ldr	r3, [pc, #180]	; (8007158 <MX_ADC1_Init+0xec>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80070a6:	4b2c      	ldr	r3, [pc, #176]	; (8007158 <MX_ADC1_Init+0xec>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80070ac:	4b2a      	ldr	r3, [pc, #168]	; (8007158 <MX_ADC1_Init+0xec>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80070b2:	4b29      	ldr	r3, [pc, #164]	; (8007158 <MX_ADC1_Init+0xec>)
 80070b4:	2204      	movs	r2, #4
 80070b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80070b8:	4b27      	ldr	r3, [pc, #156]	; (8007158 <MX_ADC1_Init+0xec>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80070be:	4b26      	ldr	r3, [pc, #152]	; (8007158 <MX_ADC1_Init+0xec>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80070c4:	4b24      	ldr	r3, [pc, #144]	; (8007158 <MX_ADC1_Init+0xec>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80070ca:	4b23      	ldr	r3, [pc, #140]	; (8007158 <MX_ADC1_Init+0xec>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_CC4;
 80070d2:	4b21      	ldr	r3, [pc, #132]	; (8007158 <MX_ADC1_Init+0xec>)
 80070d4:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 80070d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80070da:	4b1f      	ldr	r3, [pc, #124]	; (8007158 <MX_ADC1_Init+0xec>)
 80070dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80070e2:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <MX_ADC1_Init+0xec>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80070ea:	4b1b      	ldr	r3, [pc, #108]	; (8007158 <MX_ADC1_Init+0xec>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80070f0:	4b19      	ldr	r3, [pc, #100]	; (8007158 <MX_ADC1_Init+0xec>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80070f8:	4817      	ldr	r0, [pc, #92]	; (8007158 <MX_ADC1_Init+0xec>)
 80070fa:	f7f9 fb99 	bl	8000830 <HAL_ADC_Init>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8007104:	f000 fb7a 	bl	80077fc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007108:	2300      	movs	r3, #0
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800710c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007110:	4619      	mov	r1, r3
 8007112:	4811      	ldr	r0, [pc, #68]	; (8007158 <MX_ADC1_Init+0xec>)
 8007114:	f7fa fde0 	bl	8001cd8 <HAL_ADCEx_MultiModeConfigChannel>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800711e:	f000 fb6d 	bl	80077fc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007122:	4b0e      	ldr	r3, [pc, #56]	; (800715c <MX_ADC1_Init+0xf0>)
 8007124:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007126:	2306      	movs	r3, #6
 8007128:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800712a:	2303      	movs	r3, #3
 800712c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800712e:	237f      	movs	r3, #127	; 0x7f
 8007130:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007132:	2304      	movs	r3, #4
 8007134:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800713a:	1d3b      	adds	r3, r7, #4
 800713c:	4619      	mov	r1, r3
 800713e:	4806      	ldr	r0, [pc, #24]	; (8007158 <MX_ADC1_Init+0xec>)
 8007140:	f7fa f8a8 	bl	8001294 <HAL_ADC_ConfigChannel>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800714a:	f000 fb57 	bl	80077fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800714e:	bf00      	nop
 8007150:	3730      	adds	r7, #48	; 0x30
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20000228 	.word	0x20000228
 800715c:	3ef08000 	.word	0x3ef08000

08007160 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007166:	463b      	mov	r3, r7
 8007168:	2220      	movs	r2, #32
 800716a:	2100      	movs	r1, #0
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fe3d 	bl	8007dec <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8007172:	4b2c      	ldr	r3, [pc, #176]	; (8007224 <MX_ADC2_Init+0xc4>)
 8007174:	4a2c      	ldr	r2, [pc, #176]	; (8007228 <MX_ADC2_Init+0xc8>)
 8007176:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007178:	4b2a      	ldr	r3, [pc, #168]	; (8007224 <MX_ADC2_Init+0xc4>)
 800717a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800717e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8007180:	4b28      	ldr	r3, [pc, #160]	; (8007224 <MX_ADC2_Init+0xc4>)
 8007182:	2200      	movs	r2, #0
 8007184:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007186:	4b27      	ldr	r3, [pc, #156]	; (8007224 <MX_ADC2_Init+0xc4>)
 8007188:	2200      	movs	r2, #0
 800718a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800718c:	4b25      	ldr	r3, [pc, #148]	; (8007224 <MX_ADC2_Init+0xc4>)
 800718e:	2200      	movs	r2, #0
 8007190:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007192:	4b24      	ldr	r3, [pc, #144]	; (8007224 <MX_ADC2_Init+0xc4>)
 8007194:	2200      	movs	r2, #0
 8007196:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007198:	4b22      	ldr	r3, [pc, #136]	; (8007224 <MX_ADC2_Init+0xc4>)
 800719a:	2204      	movs	r2, #4
 800719c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800719e:	4b21      	ldr	r3, [pc, #132]	; (8007224 <MX_ADC2_Init+0xc4>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80071a4:	4b1f      	ldr	r3, [pc, #124]	; (8007224 <MX_ADC2_Init+0xc4>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80071aa:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <MX_ADC2_Init+0xc4>)
 80071ac:	2201      	movs	r2, #1
 80071ae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80071b0:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <MX_ADC2_Init+0xc4>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_CC4;
 80071b8:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <MX_ADC2_Init+0xc4>)
 80071ba:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 80071be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80071c0:	4b18      	ldr	r3, [pc, #96]	; (8007224 <MX_ADC2_Init+0xc4>)
 80071c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80071c8:	4b16      	ldr	r3, [pc, #88]	; (8007224 <MX_ADC2_Init+0xc4>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80071d0:	4b14      	ldr	r3, [pc, #80]	; (8007224 <MX_ADC2_Init+0xc4>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80071d6:	4b13      	ldr	r3, [pc, #76]	; (8007224 <MX_ADC2_Init+0xc4>)
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80071de:	4811      	ldr	r0, [pc, #68]	; (8007224 <MX_ADC2_Init+0xc4>)
 80071e0:	f7f9 fb26 	bl	8000830 <HAL_ADC_Init>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80071ea:	f000 fb07 	bl	80077fc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80071ee:	4b0f      	ldr	r3, [pc, #60]	; (800722c <MX_ADC2_Init+0xcc>)
 80071f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80071f2:	2306      	movs	r3, #6
 80071f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80071f6:	2304      	movs	r3, #4
 80071f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80071fa:	237f      	movs	r3, #127	; 0x7f
 80071fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80071fe:	2304      	movs	r3, #4
 8007200:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007206:	463b      	mov	r3, r7
 8007208:	4619      	mov	r1, r3
 800720a:	4806      	ldr	r0, [pc, #24]	; (8007224 <MX_ADC2_Init+0xc4>)
 800720c:	f7fa f842 	bl	8001294 <HAL_ADC_ConfigChannel>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8007216:	f000 faf1 	bl	80077fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800721a:	bf00      	nop
 800721c:	3720      	adds	r7, #32
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000140 	.word	0x20000140
 8007228:	50000100 	.word	0x50000100
 800722c:	2a000400 	.word	0x2a000400

08007230 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8007234:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <MX_IWDG_Init+0x34>)
 8007236:	4a0c      	ldr	r2, [pc, #48]	; (8007268 <MX_IWDG_Init+0x38>)
 8007238:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800723a:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <MX_IWDG_Init+0x34>)
 800723c:	2200      	movs	r2, #0
 800723e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8007240:	4b08      	ldr	r3, [pc, #32]	; (8007264 <MX_IWDG_Init+0x34>)
 8007242:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007246:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <MX_IWDG_Init+0x34>)
 800724a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800724e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8007250:	4804      	ldr	r0, [pc, #16]	; (8007264 <MX_IWDG_Init+0x34>)
 8007252:	f7fb fb7e 	bl	8002952 <HAL_IWDG_Init>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800725c:	f000 face 	bl	80077fc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8007260:	bf00      	nop
 8007262:	bd80      	pop	{r7, pc}
 8007264:	200001b0 	.word	0x200001b0
 8007268:	40003000 	.word	0x40003000

0800726c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b098      	sub	sp, #96	; 0x60
 8007270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007272:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	605a      	str	r2, [r3, #4]
 800727c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800727e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	605a      	str	r2, [r3, #4]
 8007288:	609a      	str	r2, [r3, #8]
 800728a:	60da      	str	r2, [r3, #12]
 800728c:	611a      	str	r2, [r3, #16]
 800728e:	615a      	str	r2, [r3, #20]
 8007290:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007292:	1d3b      	adds	r3, r7, #4
 8007294:	2234      	movs	r2, #52	; 0x34
 8007296:	2100      	movs	r1, #0
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fda7 	bl	8007dec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800729e:	4b56      	ldr	r3, [pc, #344]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80072a0:	4a56      	ldr	r2, [pc, #344]	; (80073fc <MX_TIM1_Init+0x190>)
 80072a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80072a4:	4b54      	ldr	r3, [pc, #336]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072aa:	4b53      	ldr	r3, [pc, #332]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 80072b0:	4b51      	ldr	r3, [pc, #324]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80072b2:	f641 3258 	movw	r2, #7000	; 0x1b58
 80072b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072b8:	4b4f      	ldr	r3, [pc, #316]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80072be:	4b4e      	ldr	r3, [pc, #312]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072c4:	4b4c      	ldr	r3, [pc, #304]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80072ca:	484b      	ldr	r0, [pc, #300]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80072cc:	f7fc fc58 	bl	8003b80 <HAL_TIM_PWM_Init>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80072d6:	f000 fa91 	bl	80077fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80072da:	4847      	ldr	r0, [pc, #284]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80072dc:	f7fc fbcc 	bl	8003a78 <HAL_TIM_OC_Init>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80072e6:	f000 fa89 	bl	80077fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072ea:	2300      	movs	r3, #0
 80072ec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80072ee:	2300      	movs	r3, #0
 80072f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80072f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80072fa:	4619      	mov	r1, r3
 80072fc:	483e      	ldr	r0, [pc, #248]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80072fe:	f7fe fa53 	bl	80057a8 <HAL_TIMEx_MasterConfigSynchronization>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8007308:	f000 fa78 	bl	80077fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800730c:	2360      	movs	r3, #96	; 0x60
 800730e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007314:	2300      	movs	r3, #0
 8007316:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007318:	2300      	movs	r3, #0
 800731a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800731c:	2300      	movs	r3, #0
 800731e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007320:	2300      	movs	r3, #0
 8007322:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007324:	2300      	movs	r3, #0
 8007326:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007328:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800732c:	2200      	movs	r2, #0
 800732e:	4619      	mov	r1, r3
 8007330:	4831      	ldr	r0, [pc, #196]	; (80073f8 <MX_TIM1_Init+0x18c>)
 8007332:	f7fd f8fd 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800733c:	f000 fa5e 	bl	80077fc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007344:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007348:	2204      	movs	r2, #4
 800734a:	4619      	mov	r1, r3
 800734c:	482a      	ldr	r0, [pc, #168]	; (80073f8 <MX_TIM1_Init+0x18c>)
 800734e:	f7fd f8ef 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8007358:	f000 fa50 	bl	80077fc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007360:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007364:	2208      	movs	r2, #8
 8007366:	4619      	mov	r1, r3
 8007368:	4823      	ldr	r0, [pc, #140]	; (80073f8 <MX_TIM1_Init+0x18c>)
 800736a:	f7fd f8e1 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8007374:	f000 fa42 	bl	80077fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8007378:	2300      	movs	r3, #0
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007380:	2300      	movs	r3, #0
 8007382:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007384:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007388:	220c      	movs	r2, #12
 800738a:	4619      	mov	r1, r3
 800738c:	481a      	ldr	r0, [pc, #104]	; (80073f8 <MX_TIM1_Init+0x18c>)
 800738e:	f7fc ffb5 	bl	80042fc <HAL_TIM_OC_ConfigChannel>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8007398:	f000 fa30 	bl	80077fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800739c:	2300      	movs	r3, #0
 800739e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 80;
 80073a8:	2350      	movs	r3, #80	; 0x50
 80073aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80073b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80073ba:	2300      	movs	r3, #0
 80073bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80073be:	2300      	movs	r3, #0
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80073c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80073cc:	2300      	movs	r3, #0
 80073ce:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80073d4:	1d3b      	adds	r3, r7, #4
 80073d6:	4619      	mov	r1, r3
 80073d8:	4807      	ldr	r0, [pc, #28]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80073da:	f7fe fa43 	bl	8005864 <HAL_TIMEx_ConfigBreakDeadTime>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 80073e4:	f000 fa0a 	bl	80077fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80073e8:	4803      	ldr	r0, [pc, #12]	; (80073f8 <MX_TIM1_Init+0x18c>)
 80073ea:	f000 fbef 	bl	8007bcc <HAL_TIM_MspPostInit>

}
 80073ee:	bf00      	nop
 80073f0:	3760      	adds	r7, #96	; 0x60
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	200003ac 	.word	0x200003ac
 80073fc:	40012c00 	.word	0x40012c00

08007400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007406:	f107 0310 	add.w	r3, r7, #16
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	605a      	str	r2, [r3, #4]
 8007410:	609a      	str	r2, [r3, #8]
 8007412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007414:	1d3b      	adds	r3, r7, #4
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	605a      	str	r2, [r3, #4]
 800741c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800741e:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <MX_TIM2_Init+0x94>)
 8007420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007424:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 8007426:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <MX_TIM2_Init+0x94>)
 8007428:	2223      	movs	r2, #35	; 0x23
 800742a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800742c:	4b19      	ldr	r3, [pc, #100]	; (8007494 <MX_TIM2_Init+0x94>)
 800742e:	2200      	movs	r2, #0
 8007430:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 125000;
 8007432:	4b18      	ldr	r3, [pc, #96]	; (8007494 <MX_TIM2_Init+0x94>)
 8007434:	4a18      	ldr	r2, [pc, #96]	; (8007498 <MX_TIM2_Init+0x98>)
 8007436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007438:	4b16      	ldr	r3, [pc, #88]	; (8007494 <MX_TIM2_Init+0x94>)
 800743a:	2200      	movs	r2, #0
 800743c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800743e:	4b15      	ldr	r3, [pc, #84]	; (8007494 <MX_TIM2_Init+0x94>)
 8007440:	2200      	movs	r2, #0
 8007442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007444:	4813      	ldr	r0, [pc, #76]	; (8007494 <MX_TIM2_Init+0x94>)
 8007446:	f7fc fa6b 	bl	8003920 <HAL_TIM_Base_Init>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007450:	f000 f9d4 	bl	80077fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007458:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800745a:	f107 0310 	add.w	r3, r7, #16
 800745e:	4619      	mov	r1, r3
 8007460:	480c      	ldr	r0, [pc, #48]	; (8007494 <MX_TIM2_Init+0x94>)
 8007462:	f7fd f97d 	bl	8004760 <HAL_TIM_ConfigClockSource>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800746c:	f000 f9c6 	bl	80077fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007470:	2300      	movs	r3, #0
 8007472:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007478:	1d3b      	adds	r3, r7, #4
 800747a:	4619      	mov	r1, r3
 800747c:	4805      	ldr	r0, [pc, #20]	; (8007494 <MX_TIM2_Init+0x94>)
 800747e:	f7fe f993 	bl	80057a8 <HAL_TIMEx_MasterConfigSynchronization>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007488:	f000 f9b8 	bl	80077fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800748c:	bf00      	nop
 800748e:	3720      	adds	r7, #32
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	200003f0 	.word	0x200003f0
 8007498:	0001e848 	.word	0x0001e848

0800749c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	; 0x28
 80074a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80074a2:	f107 031c 	add.w	r3, r7, #28
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	605a      	str	r2, [r3, #4]
 80074ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80074ae:	463b      	mov	r3, r7
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	605a      	str	r2, [r3, #4]
 80074b6:	609a      	str	r2, [r3, #8]
 80074b8:	60da      	str	r2, [r3, #12]
 80074ba:	611a      	str	r2, [r3, #16]
 80074bc:	615a      	str	r2, [r3, #20]
 80074be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80074c0:	4b20      	ldr	r3, [pc, #128]	; (8007544 <MX_TIM4_Init+0xa8>)
 80074c2:	4a21      	ldr	r2, [pc, #132]	; (8007548 <MX_TIM4_Init+0xac>)
 80074c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80074c6:	4b1f      	ldr	r3, [pc, #124]	; (8007544 <MX_TIM4_Init+0xa8>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074cc:	4b1d      	ldr	r3, [pc, #116]	; (8007544 <MX_TIM4_Init+0xa8>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 80074d2:	4b1c      	ldr	r3, [pc, #112]	; (8007544 <MX_TIM4_Init+0xa8>)
 80074d4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80074d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80074da:	4b1a      	ldr	r3, [pc, #104]	; (8007544 <MX_TIM4_Init+0xa8>)
 80074dc:	2200      	movs	r2, #0
 80074de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074e0:	4b18      	ldr	r3, [pc, #96]	; (8007544 <MX_TIM4_Init+0xa8>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80074e6:	4817      	ldr	r0, [pc, #92]	; (8007544 <MX_TIM4_Init+0xa8>)
 80074e8:	f7fc fac6 	bl	8003a78 <HAL_TIM_OC_Init>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80074f2:	f000 f983 	bl	80077fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80074fe:	f107 031c 	add.w	r3, r7, #28
 8007502:	4619      	mov	r1, r3
 8007504:	480f      	ldr	r0, [pc, #60]	; (8007544 <MX_TIM4_Init+0xa8>)
 8007506:	f7fe f94f 	bl	80057a8 <HAL_TIMEx_MasterConfigSynchronization>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8007510:	f000 f974 	bl	80077fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8007514:	2300      	movs	r3, #0
 8007516:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800751c:	2300      	movs	r3, #0
 800751e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007520:	2300      	movs	r3, #0
 8007522:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007524:	463b      	mov	r3, r7
 8007526:	220c      	movs	r2, #12
 8007528:	4619      	mov	r1, r3
 800752a:	4806      	ldr	r0, [pc, #24]	; (8007544 <MX_TIM4_Init+0xa8>)
 800752c:	f7fc fee6 	bl	80042fc <HAL_TIM_OC_ConfigChannel>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8007536:	f000 f961 	bl	80077fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800753a:	bf00      	nop
 800753c:	3728      	adds	r7, #40	; 0x28
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000100 	.word	0x20000100
 8007548:	40000800 	.word	0x40000800

0800754c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b09a      	sub	sp, #104	; 0x68
 8007550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8007552:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	605a      	str	r2, [r3, #4]
 800755c:	609a      	str	r2, [r3, #8]
 800755e:	60da      	str	r2, [r3, #12]
 8007560:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007562:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	605a      	str	r2, [r3, #4]
 800756c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800756e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	605a      	str	r2, [r3, #4]
 8007578:	609a      	str	r2, [r3, #8]
 800757a:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800757c:	1d3b      	adds	r3, r7, #4
 800757e:	2234      	movs	r2, #52	; 0x34
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fc32 	bl	8007dec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8007588:	4b37      	ldr	r3, [pc, #220]	; (8007668 <MX_TIM8_Init+0x11c>)
 800758a:	4a38      	ldr	r2, [pc, #224]	; (800766c <MX_TIM8_Init+0x120>)
 800758c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 800758e:	4b36      	ldr	r3, [pc, #216]	; (8007668 <MX_TIM8_Init+0x11c>)
 8007590:	2203      	movs	r2, #3
 8007592:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007594:	4b34      	ldr	r3, [pc, #208]	; (8007668 <MX_TIM8_Init+0x11c>)
 8007596:	2200      	movs	r2, #0
 8007598:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800759a:	4b33      	ldr	r3, [pc, #204]	; (8007668 <MX_TIM8_Init+0x11c>)
 800759c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80075a2:	4b31      	ldr	r3, [pc, #196]	; (8007668 <MX_TIM8_Init+0x11c>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80075a8:	4b2f      	ldr	r3, [pc, #188]	; (8007668 <MX_TIM8_Init+0x11c>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80075ae:	4b2e      	ldr	r3, [pc, #184]	; (8007668 <MX_TIM8_Init+0x11c>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80075b4:	482c      	ldr	r0, [pc, #176]	; (8007668 <MX_TIM8_Init+0x11c>)
 80075b6:	f7fc f9b3 	bl	8003920 <HAL_TIM_Base_Init>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80075c0:	f000 f91c 	bl	80077fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80075c4:	4828      	ldr	r0, [pc, #160]	; (8007668 <MX_TIM8_Init+0x11c>)
 80075c6:	f7fc fb5f 	bl	8003c88 <HAL_TIM_IC_Init>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 80075d0:	f000 f914 	bl	80077fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80075d4:	2304      	movs	r3, #4
 80075d6:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80075d8:	2350      	movs	r3, #80	; 0x50
 80075da:	65bb      	str	r3, [r7, #88]	; 0x58
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80075dc:	230a      	movs	r3, #10
 80075de:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.TriggerFilter = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80075e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80075e8:	4619      	mov	r1, r3
 80075ea:	481f      	ldr	r0, [pc, #124]	; (8007668 <MX_TIM8_Init+0x11c>)
 80075ec:	f7fd f996 	bl	800491c <HAL_TIM_SlaveConfigSynchro>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <MX_TIM8_Init+0xae>
  {
    Error_Handler();
 80075f6:	f000 f901 	bl	80077fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80075fa:	2300      	movs	r3, #0
 80075fc:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80075fe:	2300      	movs	r3, #0
 8007600:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007602:	2300      	movs	r3, #0
 8007604:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007606:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800760a:	4619      	mov	r1, r3
 800760c:	4816      	ldr	r0, [pc, #88]	; (8007668 <MX_TIM8_Init+0x11c>)
 800760e:	f7fe f8cb 	bl	80057a8 <HAL_TIMEx_MasterConfigSynchronization>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8007618:	f000 f8f0 	bl	80077fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800761c:	230a      	movs	r3, #10
 800761e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007620:	2301      	movs	r3, #1
 8007622:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007624:	2300      	movs	r3, #0
 8007626:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICFilter = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800762c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007630:	2200      	movs	r2, #0
 8007632:	4619      	mov	r1, r3
 8007634:	480c      	ldr	r0, [pc, #48]	; (8007668 <MX_TIM8_Init+0x11c>)
 8007636:	f7fc fedf 	bl	80043f8 <HAL_TIM_IC_ConfigChannel>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8007640:	f000 f8dc 	bl	80077fc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007644:	2300      	movs	r3, #0
 8007646:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007648:	2300      	movs	r3, #0
 800764a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	4619      	mov	r1, r3
 8007650:	4805      	ldr	r0, [pc, #20]	; (8007668 <MX_TIM8_Init+0x11c>)
 8007652:	f7fe f907 	bl	8005864 <HAL_TIMEx_ConfigBreakDeadTime>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 800765c:	f000 f8ce 	bl	80077fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8007660:	bf00      	nop
 8007662:	3768      	adds	r7, #104	; 0x68
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	200000c0 	.word	0x200000c0
 800766c:	40013400 	.word	0x40013400

08007670 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8007676:	463b      	mov	r3, r7
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	609a      	str	r2, [r3, #8]
 8007680:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007682:	4b1e      	ldr	r3, [pc, #120]	; (80076fc <MX_TIM16_Init+0x8c>)
 8007684:	4a1e      	ldr	r2, [pc, #120]	; (8007700 <MX_TIM16_Init+0x90>)
 8007686:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3;
 8007688:	4b1c      	ldr	r3, [pc, #112]	; (80076fc <MX_TIM16_Init+0x8c>)
 800768a:	2203      	movs	r2, #3
 800768c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800768e:	4b1b      	ldr	r3, [pc, #108]	; (80076fc <MX_TIM16_Init+0x8c>)
 8007690:	2200      	movs	r2, #0
 8007692:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8000;
 8007694:	4b19      	ldr	r3, [pc, #100]	; (80076fc <MX_TIM16_Init+0x8c>)
 8007696:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800769a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800769c:	4b17      	ldr	r3, [pc, #92]	; (80076fc <MX_TIM16_Init+0x8c>)
 800769e:	2200      	movs	r2, #0
 80076a0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80076a2:	4b16      	ldr	r3, [pc, #88]	; (80076fc <MX_TIM16_Init+0x8c>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80076a8:	4b14      	ldr	r3, [pc, #80]	; (80076fc <MX_TIM16_Init+0x8c>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80076ae:	4813      	ldr	r0, [pc, #76]	; (80076fc <MX_TIM16_Init+0x8c>)
 80076b0:	f7fc f936 	bl	8003920 <HAL_TIM_Base_Init>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 80076ba:	f000 f89f 	bl	80077fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 80076be:	480f      	ldr	r0, [pc, #60]	; (80076fc <MX_TIM16_Init+0x8c>)
 80076c0:	f7fc fae2 	bl	8003c88 <HAL_TIM_IC_Init>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80076ca:	f000 f897 	bl	80077fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80076ce:	2300      	movs	r3, #0
 80076d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80076d2:	2301      	movs	r3, #1
 80076d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80076de:	463b      	mov	r3, r7
 80076e0:	2200      	movs	r2, #0
 80076e2:	4619      	mov	r1, r3
 80076e4:	4805      	ldr	r0, [pc, #20]	; (80076fc <MX_TIM16_Init+0x8c>)
 80076e6:	f7fc fe87 	bl	80043f8 <HAL_TIM_IC_ConfigChannel>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80076f0:	f000 f884 	bl	80077fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80076f4:	bf00      	nop
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000434 	.word	0x20000434
 8007700:	40014400 	.word	0x40014400

08007704 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800770a:	4b12      	ldr	r3, [pc, #72]	; (8007754 <MX_DMA_Init+0x50>)
 800770c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770e:	4a11      	ldr	r2, [pc, #68]	; (8007754 <MX_DMA_Init+0x50>)
 8007710:	f043 0304 	orr.w	r3, r3, #4
 8007714:	6493      	str	r3, [r2, #72]	; 0x48
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <MX_DMA_Init+0x50>)
 8007718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800771a:	f003 0304 	and.w	r3, r3, #4
 800771e:	607b      	str	r3, [r7, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007722:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <MX_DMA_Init+0x50>)
 8007724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007726:	4a0b      	ldr	r2, [pc, #44]	; (8007754 <MX_DMA_Init+0x50>)
 8007728:	f043 0301 	orr.w	r3, r3, #1
 800772c:	6493      	str	r3, [r2, #72]	; 0x48
 800772e:	4b09      	ldr	r3, [pc, #36]	; (8007754 <MX_DMA_Init+0x50>)
 8007730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800773a:	2200      	movs	r2, #0
 800773c:	2100      	movs	r1, #0
 800773e:	200c      	movs	r0, #12
 8007740:	f7fa fc45 	bl	8001fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007744:	200c      	movs	r0, #12
 8007746:	f7fa fc5c 	bl	8002002 <HAL_NVIC_EnableIRQ>

}
 800774a:	bf00      	nop
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	40021000 	.word	0x40021000

08007758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800775e:	463b      	mov	r3, r7
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	605a      	str	r2, [r3, #4]
 8007766:	609a      	str	r2, [r3, #8]
 8007768:	60da      	str	r2, [r3, #12]
 800776a:	611a      	str	r2, [r3, #16]
 800776c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800776e:	2020      	movs	r0, #32
 8007770:	f7fe fb34 	bl	8005ddc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007774:	2001      	movs	r0, #1
 8007776:	f7fe fb31 	bl	8005ddc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800777a:	2002      	movs	r0, #2
 800777c:	f7fe fb2e 	bl	8005ddc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8007780:	2140      	movs	r1, #64	; 0x40
 8007782:	481d      	ldr	r0, [pc, #116]	; (80077f8 <MX_GPIO_Init+0xa0>)
 8007784:	f7fe fb1c 	bl	8005dc0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
 8007788:	2180      	movs	r1, #128	; 0x80
 800778a:	481b      	ldr	r0, [pc, #108]	; (80077f8 <MX_GPIO_Init+0xa0>)
 800778c:	f7fe fb18 	bl	8005dc0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8007790:	2310      	movs	r3, #16
 8007792:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007794:	2302      	movs	r3, #2
 8007796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007798:	2300      	movs	r3, #0
 800779a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077a0:	2300      	movs	r3, #0
 80077a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80077a4:	2302      	movs	r3, #2
 80077a6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077a8:	463b      	mov	r3, r7
 80077aa:	4619      	mov	r1, r3
 80077ac:	4812      	ldr	r0, [pc, #72]	; (80077f8 <MX_GPIO_Init+0xa0>)
 80077ae:	f7fe fa69 	bl	8005c84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80077b2:	2340      	movs	r3, #64	; 0x40
 80077b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80077b6:	2301      	movs	r3, #1
 80077b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077c2:	2300      	movs	r3, #0
 80077c4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077c6:	463b      	mov	r3, r7
 80077c8:	4619      	mov	r1, r3
 80077ca:	480b      	ldr	r0, [pc, #44]	; (80077f8 <MX_GPIO_Init+0xa0>)
 80077cc:	f7fe fa5a 	bl	8005c84 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80077d0:	2380      	movs	r3, #128	; 0x80
 80077d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80077d4:	2301      	movs	r3, #1
 80077d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80077d8:	2300      	movs	r3, #0
 80077da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077e0:	2300      	movs	r3, #0
 80077e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077e4:	463b      	mov	r3, r7
 80077e6:	4619      	mov	r1, r3
 80077e8:	4803      	ldr	r0, [pc, #12]	; (80077f8 <MX_GPIO_Init+0xa0>)
 80077ea:	f7fe fa4b 	bl	8005c84 <LL_GPIO_Init>

}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	48000400 	.word	0x48000400

080077fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007800:	bf00      	nop
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	4a04      	ldr	r2, [pc, #16]	; (8007828 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8007816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800781a:	6093      	str	r3, [r2, #8]
}
 800781c:	bf00      	nop
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	40007000 	.word	0x40007000

0800782c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007832:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <HAL_MspInit+0x44>)
 8007834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007836:	4a0e      	ldr	r2, [pc, #56]	; (8007870 <HAL_MspInit+0x44>)
 8007838:	f043 0301 	orr.w	r3, r3, #1
 800783c:	6613      	str	r3, [r2, #96]	; 0x60
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <HAL_MspInit+0x44>)
 8007840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	607b      	str	r3, [r7, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800784a:	4b09      	ldr	r3, [pc, #36]	; (8007870 <HAL_MspInit+0x44>)
 800784c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784e:	4a08      	ldr	r2, [pc, #32]	; (8007870 <HAL_MspInit+0x44>)
 8007850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007854:	6593      	str	r3, [r2, #88]	; 0x58
 8007856:	4b06      	ldr	r3, [pc, #24]	; (8007870 <HAL_MspInit+0x44>)
 8007858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8007862:	f7ff ffd3 	bl	800780c <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40021000 	.word	0x40021000

08007874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08c      	sub	sp, #48	; 0x30
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800787c:	f107 031c 	add.w	r3, r7, #28
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	605a      	str	r2, [r3, #4]
 8007886:	609a      	str	r2, [r3, #8]
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007894:	d135      	bne.n	8007902 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8007896:	4b46      	ldr	r3, [pc, #280]	; (80079b0 <HAL_ADC_MspInit+0x13c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3301      	adds	r3, #1
 800789c:	4a44      	ldr	r2, [pc, #272]	; (80079b0 <HAL_ADC_MspInit+0x13c>)
 800789e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80078a0:	4b43      	ldr	r3, [pc, #268]	; (80079b0 <HAL_ADC_MspInit+0x13c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d10b      	bne.n	80078c0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80078a8:	4b42      	ldr	r3, [pc, #264]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 80078aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ac:	4a41      	ldr	r2, [pc, #260]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 80078ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078b4:	4b3f      	ldr	r3, [pc, #252]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 80078b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078bc:	61bb      	str	r3, [r7, #24]
 80078be:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078c0:	4b3c      	ldr	r3, [pc, #240]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 80078c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c4:	4a3b      	ldr	r2, [pc, #236]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 80078c6:	f043 0302 	orr.w	r3, r3, #2
 80078ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078cc:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 80078ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80078d8:	2301      	movs	r3, #1
 80078da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078dc:	2303      	movs	r3, #3
 80078de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078e4:	f107 031c 	add.w	r3, r7, #28
 80078e8:	4619      	mov	r1, r3
 80078ea:	4833      	ldr	r0, [pc, #204]	; (80079b8 <HAL_ADC_MspInit+0x144>)
 80078ec:	f7fa fe7e 	bl	80025ec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80078f0:	2200      	movs	r2, #0
 80078f2:	2100      	movs	r1, #0
 80078f4:	2012      	movs	r0, #18
 80078f6:	f7fa fb6a 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80078fa:	2012      	movs	r0, #18
 80078fc:	f7fa fb81 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007900:	e052      	b.n	80079a8 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a2d      	ldr	r2, [pc, #180]	; (80079bc <HAL_ADC_MspInit+0x148>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d14d      	bne.n	80079a8 <HAL_ADC_MspInit+0x134>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800790c:	4b28      	ldr	r3, [pc, #160]	; (80079b0 <HAL_ADC_MspInit+0x13c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3301      	adds	r3, #1
 8007912:	4a27      	ldr	r2, [pc, #156]	; (80079b0 <HAL_ADC_MspInit+0x13c>)
 8007914:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8007916:	4b26      	ldr	r3, [pc, #152]	; (80079b0 <HAL_ADC_MspInit+0x13c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d10b      	bne.n	8007936 <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800791e:	4b25      	ldr	r3, [pc, #148]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 8007920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007922:	4a24      	ldr	r2, [pc, #144]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 8007924:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800792a:	4b22      	ldr	r3, [pc, #136]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 800792c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800792e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007936:	4b1f      	ldr	r3, [pc, #124]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 8007938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800793a:	4a1e      	ldr	r2, [pc, #120]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 800793c:	f043 0320 	orr.w	r3, r3, #32
 8007940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007942:	4b1c      	ldr	r3, [pc, #112]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 8007944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800794e:	4b19      	ldr	r3, [pc, #100]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 8007950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007952:	4a18      	ldr	r2, [pc, #96]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800795a:	4b16      	ldr	r3, [pc, #88]	; (80079b4 <HAL_ADC_MspInit+0x140>)
 800795c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	60bb      	str	r3, [r7, #8]
 8007964:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007966:	2302      	movs	r3, #2
 8007968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800796a:	2303      	movs	r3, #3
 800796c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800796e:	2300      	movs	r3, #0
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007972:	f107 031c 	add.w	r3, r7, #28
 8007976:	4619      	mov	r1, r3
 8007978:	4811      	ldr	r0, [pc, #68]	; (80079c0 <HAL_ADC_MspInit+0x14c>)
 800797a:	f7fa fe37 	bl	80025ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800797e:	2310      	movs	r3, #16
 8007980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007982:	2303      	movs	r3, #3
 8007984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007986:	2300      	movs	r3, #0
 8007988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800798a:	f107 031c 	add.w	r3, r7, #28
 800798e:	4619      	mov	r1, r3
 8007990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007994:	f7fa fe2a 	bl	80025ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8007998:	2200      	movs	r2, #0
 800799a:	2100      	movs	r1, #0
 800799c:	2012      	movs	r0, #18
 800799e:	f7fa fb16 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80079a2:	2012      	movs	r0, #18
 80079a4:	f7fa fb2d 	bl	8002002 <HAL_NVIC_EnableIRQ>
}
 80079a8:	bf00      	nop
 80079aa:	3730      	adds	r7, #48	; 0x30
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	200000b4 	.word	0x200000b4
 80079b4:	40021000 	.word	0x40021000
 80079b8:	48000400 	.word	0x48000400
 80079bc:	50000100 	.word	0x50000100
 80079c0:	48001400 	.word	0x48001400

080079c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a0d      	ldr	r2, [pc, #52]	; (8007a08 <HAL_TIM_PWM_MspInit+0x44>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d113      	bne.n	80079fe <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80079d6:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <HAL_TIM_PWM_MspInit+0x48>)
 80079d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079da:	4a0c      	ldr	r2, [pc, #48]	; (8007a0c <HAL_TIM_PWM_MspInit+0x48>)
 80079dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80079e0:	6613      	str	r3, [r2, #96]	; 0x60
 80079e2:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <HAL_TIM_PWM_MspInit+0x48>)
 80079e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80079ee:	2200      	movs	r2, #0
 80079f0:	2101      	movs	r1, #1
 80079f2:	2019      	movs	r0, #25
 80079f4:	f7fa faeb 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80079f8:	2019      	movs	r0, #25
 80079fa:	f7fa fb02 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40012c00 	.word	0x40012c00
 8007a0c:	40021000 	.word	0x40021000

08007a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08c      	sub	sp, #48	; 0x30
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a18:	f107 031c 	add.w	r3, r7, #28
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	605a      	str	r2, [r3, #4]
 8007a22:	609a      	str	r2, [r3, #8]
 8007a24:	60da      	str	r2, [r3, #12]
 8007a26:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a30:	d10c      	bne.n	8007a4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007a32:	4b51      	ldr	r3, [pc, #324]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a36:	4a50      	ldr	r2, [pc, #320]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8007a3e:	4b4e      	ldr	r3, [pc, #312]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	61bb      	str	r3, [r7, #24]
 8007a48:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8007a4a:	e091      	b.n	8007b70 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM8)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a4a      	ldr	r2, [pc, #296]	; (8007b7c <HAL_TIM_Base_MspInit+0x16c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d156      	bne.n	8007b04 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007a56:	4b48      	ldr	r3, [pc, #288]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a5a:	4a47      	ldr	r2, [pc, #284]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a60:	6613      	str	r3, [r2, #96]	; 0x60
 8007a62:	4b45      	ldr	r3, [pc, #276]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a6e:	4b42      	ldr	r3, [pc, #264]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a72:	4a41      	ldr	r2, [pc, #260]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007a74:	f043 0301 	orr.w	r3, r3, #1
 8007a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a7a:	4b3f      	ldr	r3, [pc, #252]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a94:	2300      	movs	r3, #0
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8007a98:	2302      	movs	r3, #2
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a9c:	f107 031c 	add.w	r3, r7, #28
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007aa6:	f7fa fda1 	bl	80025ec <HAL_GPIO_Init>
    hdma_tim8_ch1.Instance = DMA1_Channel2;
 8007aaa:	4b35      	ldr	r3, [pc, #212]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007aac:	4a35      	ldr	r2, [pc, #212]	; (8007b84 <HAL_TIM_Base_MspInit+0x174>)
 8007aae:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 8007ab0:	4b33      	ldr	r3, [pc, #204]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007ab2:	2231      	movs	r2, #49	; 0x31
 8007ab4:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ab6:	4b32      	ldr	r3, [pc, #200]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007abc:	4b30      	ldr	r3, [pc, #192]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007ac2:	4b2f      	ldr	r3, [pc, #188]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007ac4:	2280      	movs	r2, #128	; 0x80
 8007ac6:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007ac8:	4b2d      	ldr	r3, [pc, #180]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ace:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007ad0:	4b2b      	ldr	r3, [pc, #172]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ad6:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8007ad8:	4b29      	ldr	r3, [pc, #164]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007ade:	4b28      	ldr	r3, [pc, #160]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ae4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8007ae6:	4826      	ldr	r0, [pc, #152]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007ae8:	f7fa faa6 	bl	8002038 <HAL_DMA_Init>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_TIM_Base_MspInit+0xe6>
      Error_Handler();
 8007af2:	f7ff fe83 	bl	80077fc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007afa:	625a      	str	r2, [r3, #36]	; 0x24
 8007afc:	4a20      	ldr	r2, [pc, #128]	; (8007b80 <HAL_TIM_Base_MspInit+0x170>)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007b02:	e035      	b.n	8007b70 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM16)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a1f      	ldr	r2, [pc, #124]	; (8007b88 <HAL_TIM_Base_MspInit+0x178>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d130      	bne.n	8007b70 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007b0e:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b12:	4a19      	ldr	r2, [pc, #100]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b18:	6613      	str	r3, [r2, #96]	; 0x60
 8007b1a:	4b17      	ldr	r3, [pc, #92]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b26:	4b14      	ldr	r3, [pc, #80]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2a:	4a13      	ldr	r2, [pc, #76]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007b2c:	f043 0301 	orr.w	r3, r3, #1
 8007b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b32:	4b11      	ldr	r3, [pc, #68]	; (8007b78 <HAL_TIM_Base_MspInit+0x168>)
 8007b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	60bb      	str	r3, [r7, #8]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007b3e:	2340      	movs	r3, #64	; 0x40
 8007b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b42:	2302      	movs	r3, #2
 8007b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b52:	f107 031c 	add.w	r3, r7, #28
 8007b56:	4619      	mov	r1, r3
 8007b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b5c:	f7fa fd46 	bl	80025ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8007b60:	2200      	movs	r2, #0
 8007b62:	2101      	movs	r1, #1
 8007b64:	2019      	movs	r0, #25
 8007b66:	f7fa fa32 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007b6a:	2019      	movs	r0, #25
 8007b6c:	f7fa fa49 	bl	8002002 <HAL_NVIC_EnableIRQ>
}
 8007b70:	bf00      	nop
 8007b72:	3730      	adds	r7, #48	; 0x30
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	40021000 	.word	0x40021000
 8007b7c:	40013400 	.word	0x40013400
 8007b80:	200001c4 	.word	0x200001c4
 8007b84:	4002001c 	.word	0x4002001c
 8007b88:	40014400 	.word	0x40014400

08007b8c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a0a      	ldr	r2, [pc, #40]	; (8007bc4 <HAL_TIM_OC_MspInit+0x38>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d10b      	bne.n	8007bb6 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <HAL_TIM_OC_MspInit+0x3c>)
 8007ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba2:	4a09      	ldr	r2, [pc, #36]	; (8007bc8 <HAL_TIM_OC_MspInit+0x3c>)
 8007ba4:	f043 0304 	orr.w	r3, r3, #4
 8007ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <HAL_TIM_OC_MspInit+0x3c>)
 8007bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	40000800 	.word	0x40000800
 8007bc8:	40021000 	.word	0x40021000

08007bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	; 0x28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd4:	f107 0314 	add.w	r3, r7, #20
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	609a      	str	r2, [r3, #8]
 8007be0:	60da      	str	r2, [r3, #12]
 8007be2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a20      	ldr	r2, [pc, #128]	; (8007c6c <HAL_TIM_MspPostInit+0xa0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d139      	bne.n	8007c62 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007bee:	4b20      	ldr	r3, [pc, #128]	; (8007c70 <HAL_TIM_MspPostInit+0xa4>)
 8007bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf2:	4a1f      	ldr	r2, [pc, #124]	; (8007c70 <HAL_TIM_MspPostInit+0xa4>)
 8007bf4:	f043 0320 	orr.w	r3, r3, #32
 8007bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bfa:	4b1d      	ldr	r3, [pc, #116]	; (8007c70 <HAL_TIM_MspPostInit+0xa4>)
 8007bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	613b      	str	r3, [r7, #16]
 8007c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c06:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <HAL_TIM_MspPostInit+0xa4>)
 8007c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0a:	4a19      	ldr	r2, [pc, #100]	; (8007c70 <HAL_TIM_MspPostInit+0xa4>)
 8007c0c:	f043 0301 	orr.w	r3, r3, #1
 8007c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c12:	4b17      	ldr	r3, [pc, #92]	; (8007c70 <HAL_TIM_MspPostInit+0xa4>)
 8007c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c22:	2302      	movs	r3, #2
 8007c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8007c2e:	2306      	movs	r3, #6
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007c32:	f107 0314 	add.w	r3, r7, #20
 8007c36:	4619      	mov	r1, r3
 8007c38:	480e      	ldr	r0, [pc, #56]	; (8007c74 <HAL_TIM_MspPostInit+0xa8>)
 8007c3a:	f7fa fcd7 	bl	80025ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8007c3e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007c42:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c44:	2302      	movs	r3, #2
 8007c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8007c50:	2306      	movs	r3, #6
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c54:	f107 0314 	add.w	r3, r7, #20
 8007c58:	4619      	mov	r1, r3
 8007c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c5e:	f7fa fcc5 	bl	80025ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8007c62:	bf00      	nop
 8007c64:	3728      	adds	r7, #40	; 0x28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40021000 	.word	0x40021000
 8007c74:	48001400 	.word	0x48001400

08007c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c7c:	bf00      	nop
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c86:	b480      	push	{r7}
 8007c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c8a:	e7fe      	b.n	8007c8a <HardFault_Handler+0x4>

08007c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c90:	e7fe      	b.n	8007c90 <MemManage_Handler+0x4>

08007c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c92:	b480      	push	{r7}
 8007c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c96:	e7fe      	b.n	8007c96 <BusFault_Handler+0x4>

08007c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c9c:	e7fe      	b.n	8007c9c <UsageFault_Handler+0x4>

08007c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ca2:	bf00      	nop
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007cb0:	bf00      	nop
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007cbe:	bf00      	nop
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007ccc:	f7f8 faf6 	bl	80002bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007cd0:	bf00      	nop
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8007cd8:	4803      	ldr	r0, [pc, #12]	; (8007ce8 <DMA1_Channel2_IRQHandler+0x14>)
 8007cda:	f7fa fb37 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
  transferComplete();
 8007cde:	f7fe fcfb 	bl	80066d8 <transferComplete>
  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007ce2:	bf00      	nop
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	200001c4 	.word	0x200001c4

08007cec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007cf0:	4803      	ldr	r0, [pc, #12]	; (8007d00 <ADC1_2_IRQHandler+0x14>)
 8007cf2:	f7f9 f8a1 	bl	8000e38 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8007cf6:	4803      	ldr	r0, [pc, #12]	; (8007d04 <ADC1_2_IRQHandler+0x18>)
 8007cf8:	f7f9 f89e 	bl	8000e38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8007cfc:	bf00      	nop
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20000228 	.word	0x20000228
 8007d04:	20000140 	.word	0x20000140

08007d08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007d0c:	4803      	ldr	r0, [pc, #12]	; (8007d1c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8007d0e:	f7fc f975 	bl	8003ffc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8007d12:	4803      	ldr	r0, [pc, #12]	; (8007d20 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8007d14:	f7fc f972 	bl	8003ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007d18:	bf00      	nop
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	200003ac 	.word	0x200003ac
 8007d20:	20000434 	.word	0x20000434

08007d24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007d28:	4b08      	ldr	r3, [pc, #32]	; (8007d4c <SystemInit+0x28>)
 8007d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2e:	4a07      	ldr	r2, [pc, #28]	; (8007d4c <SystemInit+0x28>)
 8007d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d38:	4b04      	ldr	r3, [pc, #16]	; (8007d4c <SystemInit+0x28>)
 8007d3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d3e:	609a      	str	r2, [r3, #8]
#endif
}
 8007d40:	bf00      	nop
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	e000ed00 	.word	0xe000ed00

08007d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007d50:	480d      	ldr	r0, [pc, #52]	; (8007d88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007d52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007d54:	480d      	ldr	r0, [pc, #52]	; (8007d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8007d56:	490e      	ldr	r1, [pc, #56]	; (8007d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007d58:	4a0e      	ldr	r2, [pc, #56]	; (8007d94 <LoopForever+0xe>)
  movs r3, #0
 8007d5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007d5c:	e002      	b.n	8007d64 <LoopCopyDataInit>

08007d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d62:	3304      	adds	r3, #4

08007d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d68:	d3f9      	bcc.n	8007d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d6a:	4a0b      	ldr	r2, [pc, #44]	; (8007d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007d6c:	4c0b      	ldr	r4, [pc, #44]	; (8007d9c <LoopForever+0x16>)
  movs r3, #0
 8007d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d70:	e001      	b.n	8007d76 <LoopFillZerobss>

08007d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d74:	3204      	adds	r2, #4

08007d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d78:	d3fb      	bcc.n	8007d72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007d7a:	f7ff ffd3 	bl	8007d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d7e:	f000 f811 	bl	8007da4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007d82:	f7fe fe91 	bl	8006aa8 <main>

08007d86 <LoopForever>:

LoopForever:
    b LoopForever
 8007d86:	e7fe      	b.n	8007d86 <LoopForever>
  ldr   r0, =_estack
 8007d88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8007d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d90:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8007d94:	08007e2c 	.word	0x08007e2c
  ldr r2, =_sbss
 8007d98:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8007d9c:	2000047c 	.word	0x2000047c

08007da0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007da0:	e7fe      	b.n	8007da0 <COMP1_2_3_IRQHandler>
	...

08007da4 <__libc_init_array>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	4e0d      	ldr	r6, [pc, #52]	; (8007ddc <__libc_init_array+0x38>)
 8007da8:	4c0d      	ldr	r4, [pc, #52]	; (8007de0 <__libc_init_array+0x3c>)
 8007daa:	1ba4      	subs	r4, r4, r6
 8007dac:	10a4      	asrs	r4, r4, #2
 8007dae:	2500      	movs	r5, #0
 8007db0:	42a5      	cmp	r5, r4
 8007db2:	d109      	bne.n	8007dc8 <__libc_init_array+0x24>
 8007db4:	4e0b      	ldr	r6, [pc, #44]	; (8007de4 <__libc_init_array+0x40>)
 8007db6:	4c0c      	ldr	r4, [pc, #48]	; (8007de8 <__libc_init_array+0x44>)
 8007db8:	f000 f820 	bl	8007dfc <_init>
 8007dbc:	1ba4      	subs	r4, r4, r6
 8007dbe:	10a4      	asrs	r4, r4, #2
 8007dc0:	2500      	movs	r5, #0
 8007dc2:	42a5      	cmp	r5, r4
 8007dc4:	d105      	bne.n	8007dd2 <__libc_init_array+0x2e>
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dcc:	4798      	blx	r3
 8007dce:	3501      	adds	r5, #1
 8007dd0:	e7ee      	b.n	8007db0 <__libc_init_array+0xc>
 8007dd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dd6:	4798      	blx	r3
 8007dd8:	3501      	adds	r5, #1
 8007dda:	e7f2      	b.n	8007dc2 <__libc_init_array+0x1e>
 8007ddc:	08007e24 	.word	0x08007e24
 8007de0:	08007e24 	.word	0x08007e24
 8007de4:	08007e24 	.word	0x08007e24
 8007de8:	08007e28 	.word	0x08007e28

08007dec <memset>:
 8007dec:	4402      	add	r2, r0
 8007dee:	4603      	mov	r3, r0
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d100      	bne.n	8007df6 <memset+0xa>
 8007df4:	4770      	bx	lr
 8007df6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dfa:	e7f9      	b.n	8007df0 <memset+0x4>

08007dfc <_init>:
 8007dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfe:	bf00      	nop
 8007e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e02:	bc08      	pop	{r3}
 8007e04:	469e      	mov	lr, r3
 8007e06:	4770      	bx	lr

08007e08 <_fini>:
 8007e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0a:	bf00      	nop
 8007e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0e:	bc08      	pop	{r3}
 8007e10:	469e      	mov	lr, r3
 8007e12:	4770      	bx	lr
